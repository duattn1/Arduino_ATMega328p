
XArduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000442  00800100  000058ae  00005942  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000058ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000143  00800542  00800542  00005d84  2**0
                  ALLOC
  3 .stab         00002ce8  00000000  00000000  00005d84  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b40  00000000  00000000  00008a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000095ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000007b5  00000000  00000000  0000970c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000036d4  00000000  00000000  00009ec1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000da6  00000000  00000000  0000d595  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003321  00000000  00000000  0000e33b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000540  00000000  00000000  0001165c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001738  00000000  00000000  00011b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000006f1  00000000  00000000  000132d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000007da  00000000  00000000  000139c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000048  00000000  00000000  0001419f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 ca 06 	jmp	0xd94	; 0xd94 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	15 e0       	ldi	r17, 0x05	; 5
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee ea       	ldi	r30, 0xAE	; 174
      7c:	f8 e5       	ldi	r31, 0x58	; 88
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 34       	cpi	r26, 0x42	; 66
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	16 e0       	ldi	r17, 0x06	; 6
      8c:	a2 e4       	ldi	r26, 0x42	; 66
      8e:	b5 e0       	ldi	r27, 0x05	; 5
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a5 38       	cpi	r26, 0x85	; 133
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 55 2c 	jmp	0x58aa	; 0x58aa <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

/*******************************************************************************
 * 6. Function Definitions
 ******************************************************************************/
int main(void)
{
      a6:	df 93       	push	r29
      a8:	cf 93       	push	r28
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
#ifndef UNIT_TESTING	
    Sample_RunApp();
#else
    Test_RunTest();	
      ae:	0e 94 26 06 	call	0xc4c	; 0xc4c <Test_RunTest>
      b2:	80 e0       	ldi	r24, 0x00	; 0
      b4:	90 e0       	ldi	r25, 0x00	; 0
#endif
}
      b6:	cf 91       	pop	r28
      b8:	df 91       	pop	r29
      ba:	08 95       	ret

000000bc <Sample_RunApp>:
 ******************************************************************************/

/*******************************************************************************
 * 6. Function Definitions
 ******************************************************************************/
void Sample_RunApp(void){
      bc:	df 93       	push	r29
      be:	cf 93       	push	r28
      c0:	cd b7       	in	r28, 0x3d	; 61
      c2:	de b7       	in	r29, 0x3e	; 62
#ifdef MAX7219_KIT_SAMPLE	
Max7219_Setup();
Max7219_Loop();
#endif	

}
      c4:	cf 91       	pop	r28
      c6:	df 91       	pop	r29
      c8:	08 95       	ret

000000ca <Gpio_GetPortBase>:
 ******************************************************************************/

/*******************************************************************************
 * 6. Function Definitions
 ******************************************************************************/
Struct_Gpio_Typedef* Gpio_GetPortBase(Enum_Gpio_Port_Typedef port_enum){
      ca:	df 93       	push	r29
      cc:	cf 93       	push	r28
      ce:	00 d0       	rcall	.+0      	; 0xd0 <Gpio_GetPortBase+0x6>
      d0:	0f 92       	push	r0
      d2:	cd b7       	in	r28, 0x3d	; 61
      d4:	de b7       	in	r29, 0x3e	; 62
      d6:	8b 83       	std	Y+3, r24	; 0x03
    Struct_Gpio_Typedef* gpiox_ptr = NULL;
      d8:	1a 82       	std	Y+2, r1	; 0x02
      da:	19 82       	std	Y+1, r1	; 0x01

    switch(port_enum){
      dc:	8b 81       	ldd	r24, Y+3	; 0x03
      de:	88 2f       	mov	r24, r24
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	81 30       	cpi	r24, 0x01	; 1
      e4:	91 05       	cpc	r25, r1
      e6:	51 f0       	breq	.+20     	; 0xfc <Gpio_GetPortBase+0x32>
      e8:	82 30       	cpi	r24, 0x02	; 2
      ea:	91 05       	cpc	r25, r1
      ec:	61 f0       	breq	.+24     	; 0x106 <Gpio_GetPortBase+0x3c>
      ee:	00 97       	sbiw	r24, 0x00	; 0
      f0:	79 f4       	brne	.+30     	; 0x110 <Gpio_GetPortBase+0x46>
        case Gpio_PortB:
            gpiox_ptr = GPIOB;
      f2:	83 e2       	ldi	r24, 0x23	; 35
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	9a 83       	std	Y+2, r25	; 0x02
      f8:	89 83       	std	Y+1, r24	; 0x01
            break;
      fa:	0a c0       	rjmp	.+20     	; 0x110 <Gpio_GetPortBase+0x46>
        case Gpio_PortC:
            gpiox_ptr = GPIOC;
      fc:	86 e2       	ldi	r24, 0x26	; 38
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	9a 83       	std	Y+2, r25	; 0x02
     102:	89 83       	std	Y+1, r24	; 0x01
            break;
     104:	05 c0       	rjmp	.+10     	; 0x110 <Gpio_GetPortBase+0x46>
        case Gpio_PortD:
            gpiox_ptr = GPIOD;
     106:	89 e2       	ldi	r24, 0x29	; 41
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	9a 83       	std	Y+2, r25	; 0x02
     10c:	89 83       	std	Y+1, r24	; 0x01
            break;
     10e:	00 00       	nop
    }
    
    return gpiox_ptr;
     110:	89 81       	ldd	r24, Y+1	; 0x01
     112:	9a 81       	ldd	r25, Y+2	; 0x02
}
     114:	0f 90       	pop	r0
     116:	0f 90       	pop	r0
     118:	0f 90       	pop	r0
     11a:	cf 91       	pop	r28
     11c:	df 91       	pop	r29
     11e:	08 95       	ret

00000120 <Gpio_CommandPullUpResistorSetting>:

void Gpio_CommandPullUpResistorSetting(Enum_Command_Typedef cmd_enum)
{
     120:	df 93       	push	r29
     122:	cf 93       	push	r28
     124:	0f 92       	push	r0
     126:	cd b7       	in	r28, 0x3d	; 61
     128:	de b7       	in	r29, 0x3e	; 62
     12a:	89 83       	std	Y+1, r24	; 0x01
    if (Disable == cmd_enum)
     12c:	89 81       	ldd	r24, Y+1	; 0x01
     12e:	88 23       	and	r24, r24
     130:	51 f4       	brne	.+20     	; 0x146 <Gpio_CommandPullUpResistorSetting+0x26>
    {
        MCUCR |= 0x01 << PUD; /* Write 1 to PUD bit to disable pull-up resistor */
     132:	85 e5       	ldi	r24, 0x55	; 85
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	25 e5       	ldi	r18, 0x55	; 85
     138:	30 e0       	ldi	r19, 0x00	; 0
     13a:	f9 01       	movw	r30, r18
     13c:	20 81       	ld	r18, Z
     13e:	20 61       	ori	r18, 0x10	; 16
     140:	fc 01       	movw	r30, r24
     142:	20 83       	st	Z, r18
     144:	09 c0       	rjmp	.+18     	; 0x158 <Gpio_CommandPullUpResistorSetting+0x38>
    } 
    else
    {
        MCUCR &= ~(MASK_1BIT << PUD);
     146:	85 e5       	ldi	r24, 0x55	; 85
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	25 e5       	ldi	r18, 0x55	; 85
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	f9 01       	movw	r30, r18
     150:	20 81       	ld	r18, Z
     152:	2f 7e       	andi	r18, 0xEF	; 239
     154:	fc 01       	movw	r30, r24
     156:	20 83       	st	Z, r18
    }
}
     158:	0f 90       	pop	r0
     15a:	cf 91       	pop	r28
     15c:	df 91       	pop	r29
     15e:	08 95       	ret

00000160 <Gpio_PinMode>:

void Gpio_PinMode(Enum_Gpio_ArduinoPin_Typedef arduinoPin_enum, Enum_Gpio_DDRxDirection_Typedef direction_enum){
     160:	df 93       	push	r29
     162:	cf 93       	push	r28
     164:	00 d0       	rcall	.+0      	; 0x166 <Gpio_PinMode+0x6>
     166:	00 d0       	rcall	.+0      	; 0x168 <Gpio_PinMode+0x8>
     168:	00 d0       	rcall	.+0      	; 0x16a <Gpio_PinMode+0xa>
     16a:	cd b7       	in	r28, 0x3d	; 61
     16c:	de b7       	in	r29, 0x3e	; 62
     16e:	8d 83       	std	Y+5, r24	; 0x05
     170:	6e 83       	std	Y+6, r22	; 0x06
    Struct_Gpio_Typedef *gpiox_ptr = NULL;
     172:	1a 82       	std	Y+2, r1	; 0x02
     174:	19 82       	std	Y+1, r1	; 0x01
    Enum_Gpio_Port_Typedef port_enum = Pins_array[arduinoPin_enum].port;
     176:	8d 81       	ldd	r24, Y+5	; 0x05
     178:	88 2f       	mov	r24, r24
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	88 0f       	add	r24, r24
     17e:	99 1f       	adc	r25, r25
     180:	80 50       	subi	r24, 0x00	; 0
     182:	9f 4f       	sbci	r25, 0xFF	; 255
     184:	fc 01       	movw	r30, r24
     186:	80 81       	ld	r24, Z
     188:	8b 83       	std	Y+3, r24	; 0x03
    Enum_Gpio_Pin_Typedef pin_enum = Pins_array[arduinoPin_enum].pin;
     18a:	8d 81       	ldd	r24, Y+5	; 0x05
     18c:	88 2f       	mov	r24, r24
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	88 0f       	add	r24, r24
     192:	99 1f       	adc	r25, r25
     194:	8f 5f       	subi	r24, 0xFF	; 255
     196:	9e 4f       	sbci	r25, 0xFE	; 254
     198:	fc 01       	movw	r30, r24
     19a:	80 81       	ld	r24, Z
     19c:	8c 83       	std	Y+4, r24	; 0x04
    
    gpiox_ptr = Gpio_GetPortBase(port_enum);
     19e:	8b 81       	ldd	r24, Y+3	; 0x03
     1a0:	0e 94 65 00 	call	0xca	; 0xca <Gpio_GetPortBase>
     1a4:	9a 83       	std	Y+2, r25	; 0x02
     1a6:	89 83       	std	Y+1, r24	; 0x01
    if(NULL != gpiox_ptr){
     1a8:	89 81       	ldd	r24, Y+1	; 0x01
     1aa:	9a 81       	ldd	r25, Y+2	; 0x02
     1ac:	00 97       	sbiw	r24, 0x00	; 0
     1ae:	61 f1       	breq	.+88     	; 0x208 <Gpio_PinMode+0xa8>
        gpiox_ptr->DDRx_uint8 &= ~(MASK_1BIT << pin_enum);
     1b0:	89 81       	ldd	r24, Y+1	; 0x01
     1b2:	9a 81       	ldd	r25, Y+2	; 0x02
     1b4:	fc 01       	movw	r30, r24
     1b6:	81 81       	ldd	r24, Z+1	; 0x01
     1b8:	48 2f       	mov	r20, r24
     1ba:	8c 81       	ldd	r24, Y+4	; 0x04
     1bc:	28 2f       	mov	r18, r24
     1be:	30 e0       	ldi	r19, 0x00	; 0
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <Gpio_PinMode+0x6a>
     1c6:	88 0f       	add	r24, r24
     1c8:	99 1f       	adc	r25, r25
     1ca:	2a 95       	dec	r18
     1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <Gpio_PinMode+0x66>
     1ce:	80 95       	com	r24
     1d0:	84 23       	and	r24, r20
     1d2:	28 2f       	mov	r18, r24
     1d4:	89 81       	ldd	r24, Y+1	; 0x01
     1d6:	9a 81       	ldd	r25, Y+2	; 0x02
     1d8:	fc 01       	movw	r30, r24
     1da:	21 83       	std	Z+1, r18	; 0x01
        gpiox_ptr->DDRx_uint8 |= direction_enum << pin_enum;
     1dc:	89 81       	ldd	r24, Y+1	; 0x01
     1de:	9a 81       	ldd	r25, Y+2	; 0x02
     1e0:	fc 01       	movw	r30, r24
     1e2:	81 81       	ldd	r24, Z+1	; 0x01
     1e4:	48 2f       	mov	r20, r24
     1e6:	8e 81       	ldd	r24, Y+6	; 0x06
     1e8:	88 2f       	mov	r24, r24
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	2c 81       	ldd	r18, Y+4	; 0x04
     1ee:	22 2f       	mov	r18, r18
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <Gpio_PinMode+0x98>
     1f4:	88 0f       	add	r24, r24
     1f6:	99 1f       	adc	r25, r25
     1f8:	2a 95       	dec	r18
     1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <Gpio_PinMode+0x94>
     1fc:	84 2b       	or	r24, r20
     1fe:	28 2f       	mov	r18, r24
     200:	89 81       	ldd	r24, Y+1	; 0x01
     202:	9a 81       	ldd	r25, Y+2	; 0x02
     204:	fc 01       	movw	r30, r24
     206:	21 83       	std	Z+1, r18	; 0x01
    } else {
        /* Do nothing */
    }
}
     208:	26 96       	adiw	r28, 0x06	; 6
     20a:	0f b6       	in	r0, 0x3f	; 63
     20c:	f8 94       	cli
     20e:	de bf       	out	0x3e, r29	; 62
     210:	0f be       	out	0x3f, r0	; 63
     212:	cd bf       	out	0x3d, r28	; 61
     214:	cf 91       	pop	r28
     216:	df 91       	pop	r29
     218:	08 95       	ret

0000021a <Gpio_DigitalWrite>:

void Gpio_DigitalWrite(Enum_Gpio_ArduinoPin_Typedef arduinoPin_enum, Enum_IOValue_Typedef value_enum){
     21a:	df 93       	push	r29
     21c:	cf 93       	push	r28
     21e:	00 d0       	rcall	.+0      	; 0x220 <Gpio_DigitalWrite+0x6>
     220:	00 d0       	rcall	.+0      	; 0x222 <Gpio_DigitalWrite+0x8>
     222:	00 d0       	rcall	.+0      	; 0x224 <Gpio_DigitalWrite+0xa>
     224:	cd b7       	in	r28, 0x3d	; 61
     226:	de b7       	in	r29, 0x3e	; 62
     228:	8d 83       	std	Y+5, r24	; 0x05
     22a:	6e 83       	std	Y+6, r22	; 0x06
    Struct_Gpio_Typedef *gpiox_ptr = NULL;
     22c:	1a 82       	std	Y+2, r1	; 0x02
     22e:	19 82       	std	Y+1, r1	; 0x01
    Enum_Gpio_Port_Typedef port_enum = Pins_array[arduinoPin_enum].port;
     230:	8d 81       	ldd	r24, Y+5	; 0x05
     232:	88 2f       	mov	r24, r24
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	88 0f       	add	r24, r24
     238:	99 1f       	adc	r25, r25
     23a:	80 50       	subi	r24, 0x00	; 0
     23c:	9f 4f       	sbci	r25, 0xFF	; 255
     23e:	fc 01       	movw	r30, r24
     240:	80 81       	ld	r24, Z
     242:	8b 83       	std	Y+3, r24	; 0x03
    Enum_Gpio_Pin_Typedef pin_enum = Pins_array[arduinoPin_enum].pin;
     244:	8d 81       	ldd	r24, Y+5	; 0x05
     246:	88 2f       	mov	r24, r24
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	88 0f       	add	r24, r24
     24c:	99 1f       	adc	r25, r25
     24e:	8f 5f       	subi	r24, 0xFF	; 255
     250:	9e 4f       	sbci	r25, 0xFE	; 254
     252:	fc 01       	movw	r30, r24
     254:	80 81       	ld	r24, Z
     256:	8c 83       	std	Y+4, r24	; 0x04
    
    gpiox_ptr = Gpio_GetPortBase(port_enum);
     258:	8b 81       	ldd	r24, Y+3	; 0x03
     25a:	0e 94 65 00 	call	0xca	; 0xca <Gpio_GetPortBase>
     25e:	9a 83       	std	Y+2, r25	; 0x02
     260:	89 83       	std	Y+1, r24	; 0x01
    if(NULL != gpiox_ptr){
     262:	89 81       	ldd	r24, Y+1	; 0x01
     264:	9a 81       	ldd	r25, Y+2	; 0x02
     266:	00 97       	sbiw	r24, 0x00	; 0
     268:	79 f1       	breq	.+94     	; 0x2c8 <Gpio_DigitalWrite+0xae>
        if(High == value_enum){
     26a:	8e 81       	ldd	r24, Y+6	; 0x06
     26c:	81 30       	cpi	r24, 0x01	; 1
     26e:	b1 f4       	brne	.+44     	; 0x29c <Gpio_DigitalWrite+0x82>
            gpiox_ptr->PORTx_uint8 |= High << pin_enum;
     270:	89 81       	ldd	r24, Y+1	; 0x01
     272:	9a 81       	ldd	r25, Y+2	; 0x02
     274:	fc 01       	movw	r30, r24
     276:	82 81       	ldd	r24, Z+2	; 0x02
     278:	48 2f       	mov	r20, r24
     27a:	8c 81       	ldd	r24, Y+4	; 0x04
     27c:	28 2f       	mov	r18, r24
     27e:	30 e0       	ldi	r19, 0x00	; 0
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	02 c0       	rjmp	.+4      	; 0x28a <Gpio_DigitalWrite+0x70>
     286:	88 0f       	add	r24, r24
     288:	99 1f       	adc	r25, r25
     28a:	2a 95       	dec	r18
     28c:	e2 f7       	brpl	.-8      	; 0x286 <Gpio_DigitalWrite+0x6c>
     28e:	84 2b       	or	r24, r20
     290:	28 2f       	mov	r18, r24
     292:	89 81       	ldd	r24, Y+1	; 0x01
     294:	9a 81       	ldd	r25, Y+2	; 0x02
     296:	fc 01       	movw	r30, r24
     298:	22 83       	std	Z+2, r18	; 0x02
     29a:	16 c0       	rjmp	.+44     	; 0x2c8 <Gpio_DigitalWrite+0xae>
        } else {
            gpiox_ptr->PORTx_uint8 &= ~(High << pin_enum);
     29c:	89 81       	ldd	r24, Y+1	; 0x01
     29e:	9a 81       	ldd	r25, Y+2	; 0x02
     2a0:	fc 01       	movw	r30, r24
     2a2:	82 81       	ldd	r24, Z+2	; 0x02
     2a4:	48 2f       	mov	r20, r24
     2a6:	8c 81       	ldd	r24, Y+4	; 0x04
     2a8:	28 2f       	mov	r18, r24
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <Gpio_DigitalWrite+0x9c>
     2b2:	88 0f       	add	r24, r24
     2b4:	99 1f       	adc	r25, r25
     2b6:	2a 95       	dec	r18
     2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <Gpio_DigitalWrite+0x98>
     2ba:	80 95       	com	r24
     2bc:	84 23       	and	r24, r20
     2be:	28 2f       	mov	r18, r24
     2c0:	89 81       	ldd	r24, Y+1	; 0x01
     2c2:	9a 81       	ldd	r25, Y+2	; 0x02
     2c4:	fc 01       	movw	r30, r24
     2c6:	22 83       	std	Z+2, r18	; 0x02
        }
        
    } else {
        /* Do nothing */
    }
}
     2c8:	26 96       	adiw	r28, 0x06	; 6
     2ca:	0f b6       	in	r0, 0x3f	; 63
     2cc:	f8 94       	cli
     2ce:	de bf       	out	0x3e, r29	; 62
     2d0:	0f be       	out	0x3f, r0	; 63
     2d2:	cd bf       	out	0x3d, r28	; 61
     2d4:	cf 91       	pop	r28
     2d6:	df 91       	pop	r29
     2d8:	08 95       	ret

000002da <Usart_InitUSART>:
 ******************************************************************************/

/*******************************************************************************
 * 6. Function Definitions
 ******************************************************************************/
void Usart_InitUSART(const Struct_Usart_Config_Typedef *config_ptr){
     2da:	df 93       	push	r29
     2dc:	cf 93       	push	r28
     2de:	00 d0       	rcall	.+0      	; 0x2e0 <Usart_InitUSART+0x6>
     2e0:	00 d0       	rcall	.+0      	; 0x2e2 <Usart_InitUSART+0x8>
     2e2:	cd b7       	in	r28, 0x3d	; 61
     2e4:	de b7       	in	r29, 0x3e	; 62
     2e6:	9c 83       	std	Y+4, r25	; 0x04
     2e8:	8b 83       	std	Y+3, r24	; 0x03
    /* Declare 2 local variables since data frame size configuring bits 
       are located in 2 registers.*/
    uint8_t UCSZn2_uint8 = (config_ptr->dataSize) & 0x04;
     2ea:	8b 81       	ldd	r24, Y+3	; 0x03
     2ec:	9c 81       	ldd	r25, Y+4	; 0x04
     2ee:	fc 01       	movw	r30, r24
     2f0:	83 81       	ldd	r24, Z+3	; 0x03
     2f2:	84 70       	andi	r24, 0x04	; 4
     2f4:	89 83       	std	Y+1, r24	; 0x01
    uint8_t UCSZn1To0_uint8 = (config_ptr->dataSize) & 0x03;
     2f6:	8b 81       	ldd	r24, Y+3	; 0x03
     2f8:	9c 81       	ldd	r25, Y+4	; 0x04
     2fa:	fc 01       	movw	r30, r24
     2fc:	83 81       	ldd	r24, Z+3	; 0x03
     2fe:	83 70       	andi	r24, 0x03	; 3
     300:	8a 83       	std	Y+2, r24	; 0x02
    
    /* Select sync or async USART */
    UCSR0C &= ~(MASK_2BIT << UMSEL00);
     302:	82 ec       	ldi	r24, 0xC2	; 194
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	22 ec       	ldi	r18, 0xC2	; 194
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	f9 01       	movw	r30, r18
     30c:	20 81       	ld	r18, Z
     30e:	2f 73       	andi	r18, 0x3F	; 63
     310:	fc 01       	movw	r30, r24
     312:	20 83       	st	Z, r18
    UCSR0C |= config_ptr->mode << UMSEL00;
     314:	82 ec       	ldi	r24, 0xC2	; 194
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	22 ec       	ldi	r18, 0xC2	; 194
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	f9 01       	movw	r30, r18
     31e:	20 81       	ld	r18, Z
     320:	42 2f       	mov	r20, r18
     322:	2b 81       	ldd	r18, Y+3	; 0x03
     324:	3c 81       	ldd	r19, Y+4	; 0x04
     326:	f9 01       	movw	r30, r18
     328:	20 81       	ld	r18, Z
     32a:	22 2f       	mov	r18, r18
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	00 24       	eor	r0, r0
     330:	36 95       	lsr	r19
     332:	27 95       	ror	r18
     334:	07 94       	ror	r0
     336:	36 95       	lsr	r19
     338:	27 95       	ror	r18
     33a:	07 94       	ror	r0
     33c:	32 2f       	mov	r19, r18
     33e:	20 2d       	mov	r18, r0
     340:	24 2b       	or	r18, r20
     342:	fc 01       	movw	r30, r24
     344:	20 83       	st	Z, r18
    /* Select parity mode */
    UCSR0C &= ~(MASK_2BIT << UPM00);
     346:	82 ec       	ldi	r24, 0xC2	; 194
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	22 ec       	ldi	r18, 0xC2	; 194
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	f9 01       	movw	r30, r18
     350:	20 81       	ld	r18, Z
     352:	2f 7c       	andi	r18, 0xCF	; 207
     354:	fc 01       	movw	r30, r24
     356:	20 83       	st	Z, r18
    UCSR0C |= config_ptr->parity << UPM00;
     358:	82 ec       	ldi	r24, 0xC2	; 194
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	22 ec       	ldi	r18, 0xC2	; 194
     35e:	30 e0       	ldi	r19, 0x00	; 0
     360:	f9 01       	movw	r30, r18
     362:	20 81       	ld	r18, Z
     364:	42 2f       	mov	r20, r18
     366:	2b 81       	ldd	r18, Y+3	; 0x03
     368:	3c 81       	ldd	r19, Y+4	; 0x04
     36a:	f9 01       	movw	r30, r18
     36c:	21 81       	ldd	r18, Z+1	; 0x01
     36e:	22 2f       	mov	r18, r18
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	22 95       	swap	r18
     374:	32 95       	swap	r19
     376:	30 7f       	andi	r19, 0xF0	; 240
     378:	32 27       	eor	r19, r18
     37a:	20 7f       	andi	r18, 0xF0	; 240
     37c:	32 27       	eor	r19, r18
     37e:	24 2b       	or	r18, r20
     380:	fc 01       	movw	r30, r24
     382:	20 83       	st	Z, r18
    /* Select number of stop bit */
    UCSR0C &= ~(MASK_1BIT << USBS0);
     384:	82 ec       	ldi	r24, 0xC2	; 194
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	22 ec       	ldi	r18, 0xC2	; 194
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	f9 01       	movw	r30, r18
     38e:	20 81       	ld	r18, Z
     390:	27 7f       	andi	r18, 0xF7	; 247
     392:	fc 01       	movw	r30, r24
     394:	20 83       	st	Z, r18
    UCSR0C |= config_ptr->stopBit << USBS0;
     396:	82 ec       	ldi	r24, 0xC2	; 194
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	22 ec       	ldi	r18, 0xC2	; 194
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	f9 01       	movw	r30, r18
     3a0:	20 81       	ld	r18, Z
     3a2:	42 2f       	mov	r20, r18
     3a4:	2b 81       	ldd	r18, Y+3	; 0x03
     3a6:	3c 81       	ldd	r19, Y+4	; 0x04
     3a8:	f9 01       	movw	r30, r18
     3aa:	22 81       	ldd	r18, Z+2	; 0x02
     3ac:	22 2f       	mov	r18, r18
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	22 0f       	add	r18, r18
     3b2:	33 1f       	adc	r19, r19
     3b4:	22 0f       	add	r18, r18
     3b6:	33 1f       	adc	r19, r19
     3b8:	22 0f       	add	r18, r18
     3ba:	33 1f       	adc	r19, r19
     3bc:	24 2b       	or	r18, r20
     3be:	fc 01       	movw	r30, r24
     3c0:	20 83       	st	Z, r18
    /* Select data frame size */
    UCSR0B &= ~(MASK_1BIT << UCSZ02);
     3c2:	81 ec       	ldi	r24, 0xC1	; 193
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	21 ec       	ldi	r18, 0xC1	; 193
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	f9 01       	movw	r30, r18
     3cc:	20 81       	ld	r18, Z
     3ce:	2b 7f       	andi	r18, 0xFB	; 251
     3d0:	fc 01       	movw	r30, r24
     3d2:	20 83       	st	Z, r18
    UCSR0C &= ~(MASK_2BIT << UCSZ00);
     3d4:	82 ec       	ldi	r24, 0xC2	; 194
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	22 ec       	ldi	r18, 0xC2	; 194
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	f9 01       	movw	r30, r18
     3de:	20 81       	ld	r18, Z
     3e0:	29 7f       	andi	r18, 0xF9	; 249
     3e2:	fc 01       	movw	r30, r24
     3e4:	20 83       	st	Z, r18
    UCSR0B |= UCSZn2_uint8 << UCSZ02;	
     3e6:	81 ec       	ldi	r24, 0xC1	; 193
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	21 ec       	ldi	r18, 0xC1	; 193
     3ec:	30 e0       	ldi	r19, 0x00	; 0
     3ee:	f9 01       	movw	r30, r18
     3f0:	20 81       	ld	r18, Z
     3f2:	42 2f       	mov	r20, r18
     3f4:	29 81       	ldd	r18, Y+1	; 0x01
     3f6:	22 2f       	mov	r18, r18
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	22 0f       	add	r18, r18
     3fc:	33 1f       	adc	r19, r19
     3fe:	22 0f       	add	r18, r18
     400:	33 1f       	adc	r19, r19
     402:	24 2b       	or	r18, r20
     404:	fc 01       	movw	r30, r24
     406:	20 83       	st	Z, r18
    UCSR0C |= UCSZn1To0_uint8 << UCSZ00;
     408:	82 ec       	ldi	r24, 0xC2	; 194
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	22 ec       	ldi	r18, 0xC2	; 194
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	f9 01       	movw	r30, r18
     412:	20 81       	ld	r18, Z
     414:	42 2f       	mov	r20, r18
     416:	2a 81       	ldd	r18, Y+2	; 0x02
     418:	22 2f       	mov	r18, r18
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	22 0f       	add	r18, r18
     41e:	33 1f       	adc	r19, r19
     420:	24 2b       	or	r18, r20
     422:	fc 01       	movw	r30, r24
     424:	20 83       	st	Z, r18
    /* enable RX interrupt */
    UCSR0B |= 1 << RXCIE0;
     426:	81 ec       	ldi	r24, 0xC1	; 193
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	21 ec       	ldi	r18, 0xC1	; 193
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	f9 01       	movw	r30, r18
     430:	20 81       	ld	r18, Z
     432:	20 68       	ori	r18, 0x80	; 128
     434:	fc 01       	movw	r30, r24
     436:	20 83       	st	Z, r18
}
     438:	0f 90       	pop	r0
     43a:	0f 90       	pop	r0
     43c:	0f 90       	pop	r0
     43e:	0f 90       	pop	r0
     440:	cf 91       	pop	r28
     442:	df 91       	pop	r29
     444:	08 95       	ret

00000446 <Usart_SetBaudrate>:

void Usart_SetBaudrate(Enum_Usart_Baudrate_Typedef baudrate_enum){
     446:	df 93       	push	r29
     448:	cf 93       	push	r28
     44a:	cd b7       	in	r28, 0x3d	; 61
     44c:	de b7       	in	r29, 0x3e	; 62
     44e:	27 97       	sbiw	r28, 0x07	; 7
     450:	0f b6       	in	r0, 0x3f	; 63
     452:	f8 94       	cli
     454:	de bf       	out	0x3e, r29	; 62
     456:	0f be       	out	0x3f, r0	; 63
     458:	cd bf       	out	0x3d, r28	; 61
     45a:	6c 83       	std	Y+4, r22	; 0x04
     45c:	7d 83       	std	Y+5, r23	; 0x05
     45e:	8e 83       	std	Y+6, r24	; 0x06
     460:	9f 83       	std	Y+7, r25	; 0x07
    uint16_t UBRRnValue_uint16;
    uint8_t isDoubleSpeed_uint8 = UCSR0A & (1 << U2X0);
     462:	80 ec       	ldi	r24, 0xC0	; 192
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	fc 01       	movw	r30, r24
     468:	80 81       	ld	r24, Z
     46a:	82 70       	andi	r24, 0x02	; 2
     46c:	8b 83       	std	Y+3, r24	; 0x03
    
    if(0 == isDoubleSpeed_uint8){
     46e:	8b 81       	ldd	r24, Y+3	; 0x03
     470:	88 23       	and	r24, r24
     472:	21 f5       	brne	.+72     	; 0x4bc <Usart_SetBaudrate+0x76>
        UBRRnValue_uint16 = FOSC/(baudrate_enum*16) - 1;
     474:	8c 81       	ldd	r24, Y+4	; 0x04
     476:	9d 81       	ldd	r25, Y+5	; 0x05
     478:	ae 81       	ldd	r26, Y+6	; 0x06
     47a:	bf 81       	ldd	r27, Y+7	; 0x07
     47c:	88 0f       	add	r24, r24
     47e:	99 1f       	adc	r25, r25
     480:	aa 1f       	adc	r26, r26
     482:	bb 1f       	adc	r27, r27
     484:	88 0f       	add	r24, r24
     486:	99 1f       	adc	r25, r25
     488:	aa 1f       	adc	r26, r26
     48a:	bb 1f       	adc	r27, r27
     48c:	88 0f       	add	r24, r24
     48e:	99 1f       	adc	r25, r25
     490:	aa 1f       	adc	r26, r26
     492:	bb 1f       	adc	r27, r27
     494:	88 0f       	add	r24, r24
     496:	99 1f       	adc	r25, r25
     498:	aa 1f       	adc	r26, r26
     49a:	bb 1f       	adc	r27, r27
     49c:	9c 01       	movw	r18, r24
     49e:	ad 01       	movw	r20, r26
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	94 e2       	ldi	r25, 0x24	; 36
     4a4:	a4 ef       	ldi	r26, 0xF4	; 244
     4a6:	b0 e0       	ldi	r27, 0x00	; 0
     4a8:	bc 01       	movw	r22, r24
     4aa:	cd 01       	movw	r24, r26
     4ac:	0e 94 d7 28 	call	0x51ae	; 0x51ae <__udivmodsi4>
     4b0:	da 01       	movw	r26, r20
     4b2:	c9 01       	movw	r24, r18
     4b4:	01 97       	sbiw	r24, 0x01	; 1
     4b6:	9a 83       	std	Y+2, r25	; 0x02
     4b8:	89 83       	std	Y+1, r24	; 0x01
     4ba:	1f c0       	rjmp	.+62     	; 0x4fa <Usart_SetBaudrate+0xb4>
    } else {
        UBRRnValue_uint16 = FOSC/(baudrate_enum*8) - 1;
     4bc:	8c 81       	ldd	r24, Y+4	; 0x04
     4be:	9d 81       	ldd	r25, Y+5	; 0x05
     4c0:	ae 81       	ldd	r26, Y+6	; 0x06
     4c2:	bf 81       	ldd	r27, Y+7	; 0x07
     4c4:	88 0f       	add	r24, r24
     4c6:	99 1f       	adc	r25, r25
     4c8:	aa 1f       	adc	r26, r26
     4ca:	bb 1f       	adc	r27, r27
     4cc:	88 0f       	add	r24, r24
     4ce:	99 1f       	adc	r25, r25
     4d0:	aa 1f       	adc	r26, r26
     4d2:	bb 1f       	adc	r27, r27
     4d4:	88 0f       	add	r24, r24
     4d6:	99 1f       	adc	r25, r25
     4d8:	aa 1f       	adc	r26, r26
     4da:	bb 1f       	adc	r27, r27
     4dc:	9c 01       	movw	r18, r24
     4de:	ad 01       	movw	r20, r26
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	94 e2       	ldi	r25, 0x24	; 36
     4e4:	a4 ef       	ldi	r26, 0xF4	; 244
     4e6:	b0 e0       	ldi	r27, 0x00	; 0
     4e8:	bc 01       	movw	r22, r24
     4ea:	cd 01       	movw	r24, r26
     4ec:	0e 94 d7 28 	call	0x51ae	; 0x51ae <__udivmodsi4>
     4f0:	da 01       	movw	r26, r20
     4f2:	c9 01       	movw	r24, r18
     4f4:	01 97       	sbiw	r24, 0x01	; 1
     4f6:	9a 83       	std	Y+2, r25	; 0x02
     4f8:	89 83       	std	Y+1, r24	; 0x01
    }
    
    /* Set baudrate. Since baudrate value range from 0..0x0FFF, the UBRRnL and UBRRnH are compared with 
    0x00FF and 0x0F00 respectively. */
    UBRR0L = (UBRRnValue_uint16 & 0x00FF);
     4fa:	84 ec       	ldi	r24, 0xC4	; 196
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	29 81       	ldd	r18, Y+1	; 0x01
     500:	fc 01       	movw	r30, r24
     502:	20 83       	st	Z, r18
    UBRR0H = (UBRRnValue_uint16 & 0x0F00);
     504:	85 ec       	ldi	r24, 0xC5	; 197
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	fc 01       	movw	r30, r24
     50a:	10 82       	st	Z, r1
}
     50c:	27 96       	adiw	r28, 0x07	; 7
     50e:	0f b6       	in	r0, 0x3f	; 63
     510:	f8 94       	cli
     512:	de bf       	out	0x3e, r29	; 62
     514:	0f be       	out	0x3f, r0	; 63
     516:	cd bf       	out	0x3d, r28	; 61
     518:	cf 91       	pop	r28
     51a:	df 91       	pop	r29
     51c:	08 95       	ret

0000051e <Usart_CommandTransmitter>:

void Usart_CommandTransmitter(Enum_Command_Typedef cmd_enum){
     51e:	df 93       	push	r29
     520:	cf 93       	push	r28
     522:	0f 92       	push	r0
     524:	cd b7       	in	r28, 0x3d	; 61
     526:	de b7       	in	r29, 0x3e	; 62
     528:	89 83       	std	Y+1, r24	; 0x01
    if(Enable == cmd_enum){
     52a:	89 81       	ldd	r24, Y+1	; 0x01
     52c:	81 30       	cpi	r24, 0x01	; 1
     52e:	51 f4       	brne	.+20     	; 0x544 <Usart_CommandTransmitter+0x26>
        UCSR0B |= Enable << TXEN0;
     530:	81 ec       	ldi	r24, 0xC1	; 193
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	21 ec       	ldi	r18, 0xC1	; 193
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	f9 01       	movw	r30, r18
     53a:	20 81       	ld	r18, Z
     53c:	28 60       	ori	r18, 0x08	; 8
     53e:	fc 01       	movw	r30, r24
     540:	20 83       	st	Z, r18
     542:	09 c0       	rjmp	.+18     	; 0x556 <Usart_CommandTransmitter+0x38>
    } else {
        UCSR0B &= ~(MASK_1BIT << TXEN0);
     544:	81 ec       	ldi	r24, 0xC1	; 193
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	21 ec       	ldi	r18, 0xC1	; 193
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	f9 01       	movw	r30, r18
     54e:	20 81       	ld	r18, Z
     550:	27 7f       	andi	r18, 0xF7	; 247
     552:	fc 01       	movw	r30, r24
     554:	20 83       	st	Z, r18
    }
}
     556:	0f 90       	pop	r0
     558:	cf 91       	pop	r28
     55a:	df 91       	pop	r29
     55c:	08 95       	ret

0000055e <Usart_CommandReceiver>:

void Usart_CommandReceiver(Enum_Command_Typedef cmd_enum){
     55e:	df 93       	push	r29
     560:	cf 93       	push	r28
     562:	0f 92       	push	r0
     564:	cd b7       	in	r28, 0x3d	; 61
     566:	de b7       	in	r29, 0x3e	; 62
     568:	89 83       	std	Y+1, r24	; 0x01
    if(Enable == cmd_enum){
     56a:	89 81       	ldd	r24, Y+1	; 0x01
     56c:	81 30       	cpi	r24, 0x01	; 1
     56e:	51 f4       	brne	.+20     	; 0x584 <Usart_CommandReceiver+0x26>
        UCSR0B |= Enable << RXEN0;
     570:	81 ec       	ldi	r24, 0xC1	; 193
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	21 ec       	ldi	r18, 0xC1	; 193
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	f9 01       	movw	r30, r18
     57a:	20 81       	ld	r18, Z
     57c:	20 61       	ori	r18, 0x10	; 16
     57e:	fc 01       	movw	r30, r24
     580:	20 83       	st	Z, r18
     582:	09 c0       	rjmp	.+18     	; 0x596 <Usart_CommandReceiver+0x38>
    } else {
        UCSR0B &= ~(MASK_1BIT << RXEN0);
     584:	81 ec       	ldi	r24, 0xC1	; 193
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	21 ec       	ldi	r18, 0xC1	; 193
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	f9 01       	movw	r30, r18
     58e:	20 81       	ld	r18, Z
     590:	2f 7e       	andi	r18, 0xEF	; 239
     592:	fc 01       	movw	r30, r24
     594:	20 83       	st	Z, r18
    }
}
     596:	0f 90       	pop	r0
     598:	cf 91       	pop	r28
     59a:	df 91       	pop	r29
     59c:	08 95       	ret

0000059e <Usart_SendChar>:

uint8_t Usart_SendChar(uint8_t data_uint8, FILE *stream_ptr){
     59e:	df 93       	push	r29
     5a0:	cf 93       	push	r28
     5a2:	00 d0       	rcall	.+0      	; 0x5a4 <Usart_SendChar+0x6>
     5a4:	0f 92       	push	r0
     5a6:	cd b7       	in	r28, 0x3d	; 61
     5a8:	de b7       	in	r29, 0x3e	; 62
     5aa:	89 83       	std	Y+1, r24	; 0x01
     5ac:	7b 83       	std	Y+3, r23	; 0x03
     5ae:	6a 83       	std	Y+2, r22	; 0x02
    if(data_uint8 == '\n') {
     5b0:	89 81       	ldd	r24, Y+1	; 0x01
     5b2:	8a 30       	cpi	r24, 0x0A	; 10
     5b4:	31 f4       	brne	.+12     	; 0x5c2 <Usart_SendChar+0x24>
        Usart_SendChar('\r', 0);
     5b6:	8d e0       	ldi	r24, 0x0D	; 13
     5b8:	60 e0       	ldi	r22, 0x00	; 0
     5ba:	70 e0       	ldi	r23, 0x00	; 0
     5bc:	0e 94 cf 02 	call	0x59e	; 0x59e <Usart_SendChar>
    }
    /* Wait for empty transmit buffer */
    while (!(UCSR0A & (1 << UDRE0)));
     5c0:	01 c0       	rjmp	.+2      	; 0x5c4 <Usart_SendChar+0x26>
     5c2:	00 00       	nop
     5c4:	80 ec       	ldi	r24, 0xC0	; 192
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	fc 01       	movw	r30, r24
     5ca:	80 81       	ld	r24, Z
     5cc:	88 2f       	mov	r24, r24
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	80 72       	andi	r24, 0x20	; 32
     5d2:	90 70       	andi	r25, 0x00	; 0
     5d4:	00 97       	sbiw	r24, 0x00	; 0
     5d6:	b1 f3       	breq	.-20     	; 0x5c4 <Usart_SendChar+0x26>
    /* Put data into buffer to send the data */
    UDR0 = data_uint8;
     5d8:	86 ec       	ldi	r24, 0xC6	; 198
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	29 81       	ldd	r18, Y+1	; 0x01
     5de:	fc 01       	movw	r30, r24
     5e0:	20 83       	st	Z, r18
    return 0;
     5e2:	80 e0       	ldi	r24, 0x00	; 0
}
     5e4:	0f 90       	pop	r0
     5e6:	0f 90       	pop	r0
     5e8:	0f 90       	pop	r0
     5ea:	cf 91       	pop	r28
     5ec:	df 91       	pop	r29
     5ee:	08 95       	ret

000005f0 <Usart_SendString>:

void Usart_SendString(uint8_t *string_ptr){
     5f0:	df 93       	push	r29
     5f2:	cf 93       	push	r28
     5f4:	00 d0       	rcall	.+0      	; 0x5f6 <Usart_SendString+0x6>
     5f6:	cd b7       	in	r28, 0x3d	; 61
     5f8:	de b7       	in	r29, 0x3e	; 62
     5fa:	9a 83       	std	Y+2, r25	; 0x02
     5fc:	89 83       	std	Y+1, r24	; 0x01
    while('\0' != *string_ptr){
     5fe:	0d c0       	rjmp	.+26     	; 0x61a <Usart_SendString+0x2a>
        Usart_SendChar(*string_ptr, 0);
     600:	89 81       	ldd	r24, Y+1	; 0x01
     602:	9a 81       	ldd	r25, Y+2	; 0x02
     604:	fc 01       	movw	r30, r24
     606:	80 81       	ld	r24, Z
     608:	60 e0       	ldi	r22, 0x00	; 0
     60a:	70 e0       	ldi	r23, 0x00	; 0
     60c:	0e 94 cf 02 	call	0x59e	; 0x59e <Usart_SendChar>
        string_ptr++;
     610:	89 81       	ldd	r24, Y+1	; 0x01
     612:	9a 81       	ldd	r25, Y+2	; 0x02
     614:	01 96       	adiw	r24, 0x01	; 1
     616:	9a 83       	std	Y+2, r25	; 0x02
     618:	89 83       	std	Y+1, r24	; 0x01
    UDR0 = data_uint8;
    return 0;
}

void Usart_SendString(uint8_t *string_ptr){
    while('\0' != *string_ptr){
     61a:	89 81       	ldd	r24, Y+1	; 0x01
     61c:	9a 81       	ldd	r25, Y+2	; 0x02
     61e:	fc 01       	movw	r30, r24
     620:	80 81       	ld	r24, Z
     622:	88 23       	and	r24, r24
     624:	69 f7       	brne	.-38     	; 0x600 <Usart_SendString+0x10>
        Usart_SendChar(*string_ptr, 0);
        string_ptr++;
    }
}
     626:	0f 90       	pop	r0
     628:	0f 90       	pop	r0
     62a:	cf 91       	pop	r28
     62c:	df 91       	pop	r29
     62e:	08 95       	ret

00000630 <Usart_ReceiveChar>:

uint8_t Usart_ReceiveChar(FILE *stream_ptr){
     630:	df 93       	push	r29
     632:	cf 93       	push	r28
     634:	00 d0       	rcall	.+0      	; 0x636 <Usart_ReceiveChar+0x6>
     636:	cd b7       	in	r28, 0x3d	; 61
     638:	de b7       	in	r29, 0x3e	; 62
     63a:	9a 83       	std	Y+2, r25	; 0x02
     63c:	89 83       	std	Y+1, r24	; 0x01
    /* Wait for data to be received */
    while (!(UCSR0A & (1 << RXC0)));
     63e:	00 00       	nop
     640:	80 ec       	ldi	r24, 0xC0	; 192
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	fc 01       	movw	r30, r24
     646:	80 81       	ld	r24, Z
     648:	88 23       	and	r24, r24
     64a:	d4 f7       	brge	.-12     	; 0x640 <Usart_ReceiveChar+0x10>
    /* Get and return received data from buffer */
    return (uint8_t)UDR0;
     64c:	86 ec       	ldi	r24, 0xC6	; 198
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	fc 01       	movw	r30, r24
     652:	80 81       	ld	r24, Z
}
     654:	0f 90       	pop	r0
     656:	0f 90       	pop	r0
     658:	cf 91       	pop	r28
     65a:	df 91       	pop	r29
     65c:	08 95       	ret

0000065e <getFunctionIndex>:
 ******************************************************************************/

/*******************************************************************************
 * 6. Function Definitions
 ******************************************************************************/
uint8_t getFunctionIndex(const char *name, const char *functions[], uint8_t functionsLength){
     65e:	df 93       	push	r29
     660:	cf 93       	push	r28
     662:	cd b7       	in	r28, 0x3d	; 61
     664:	de b7       	in	r29, 0x3e	; 62
     666:	29 97       	sbiw	r28, 0x09	; 9
     668:	0f b6       	in	r0, 0x3f	; 63
     66a:	f8 94       	cli
     66c:	de bf       	out	0x3e, r29	; 62
     66e:	0f be       	out	0x3f, r0	; 63
     670:	cd bf       	out	0x3d, r28	; 61
     672:	9e 83       	std	Y+6, r25	; 0x06
     674:	8d 83       	std	Y+5, r24	; 0x05
     676:	78 87       	std	Y+8, r23	; 0x08
     678:	6f 83       	std	Y+7, r22	; 0x07
     67a:	49 87       	std	Y+9, r20	; 0x09
	int i, result = -1;
     67c:	8f ef       	ldi	r24, 0xFF	; 255
     67e:	9f ef       	ldi	r25, 0xFF	; 255
     680:	9c 83       	std	Y+4, r25	; 0x04
     682:	8b 83       	std	Y+3, r24	; 0x03
	for(i = 0; i < functionsLength; i++){
     684:	1a 82       	std	Y+2, r1	; 0x02
     686:	19 82       	std	Y+1, r1	; 0x01
     688:	1b c0       	rjmp	.+54     	; 0x6c0 <getFunctionIndex+0x62>
		if(0 == strcmp(name, functions[i])){
     68a:	89 81       	ldd	r24, Y+1	; 0x01
     68c:	9a 81       	ldd	r25, Y+2	; 0x02
     68e:	88 0f       	add	r24, r24
     690:	99 1f       	adc	r25, r25
     692:	2f 81       	ldd	r18, Y+7	; 0x07
     694:	38 85       	ldd	r19, Y+8	; 0x08
     696:	82 0f       	add	r24, r18
     698:	93 1f       	adc	r25, r19
     69a:	fc 01       	movw	r30, r24
     69c:	20 81       	ld	r18, Z
     69e:	31 81       	ldd	r19, Z+1	; 0x01
     6a0:	8d 81       	ldd	r24, Y+5	; 0x05
     6a2:	9e 81       	ldd	r25, Y+6	; 0x06
     6a4:	b9 01       	movw	r22, r18
     6a6:	0e 94 69 29 	call	0x52d2	; 0x52d2 <strcmp>
     6aa:	00 97       	sbiw	r24, 0x00	; 0
     6ac:	21 f4       	brne	.+8      	; 0x6b6 <getFunctionIndex+0x58>
			result = i;
     6ae:	89 81       	ldd	r24, Y+1	; 0x01
     6b0:	9a 81       	ldd	r25, Y+2	; 0x02
     6b2:	9c 83       	std	Y+4, r25	; 0x04
     6b4:	8b 83       	std	Y+3, r24	; 0x03
/*******************************************************************************
 * 6. Function Definitions
 ******************************************************************************/
uint8_t getFunctionIndex(const char *name, const char *functions[], uint8_t functionsLength){
	int i, result = -1;
	for(i = 0; i < functionsLength; i++){
     6b6:	89 81       	ldd	r24, Y+1	; 0x01
     6b8:	9a 81       	ldd	r25, Y+2	; 0x02
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	9a 83       	std	Y+2, r25	; 0x02
     6be:	89 83       	std	Y+1, r24	; 0x01
     6c0:	89 85       	ldd	r24, Y+9	; 0x09
     6c2:	28 2f       	mov	r18, r24
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	89 81       	ldd	r24, Y+1	; 0x01
     6c8:	9a 81       	ldd	r25, Y+2	; 0x02
     6ca:	82 17       	cp	r24, r18
     6cc:	93 07       	cpc	r25, r19
     6ce:	ec f2       	brlt	.-70     	; 0x68a <getFunctionIndex+0x2c>
		if(0 == strcmp(name, functions[i])){
			result = i;
		}
	}
	return result;
     6d0:	8b 81       	ldd	r24, Y+3	; 0x03
}
     6d2:	29 96       	adiw	r28, 0x09	; 9
     6d4:	0f b6       	in	r0, 0x3f	; 63
     6d6:	f8 94       	cli
     6d8:	de bf       	out	0x3e, r29	; 62
     6da:	0f be       	out	0x3f, r0	; 63
     6dc:	cd bf       	out	0x3d, r28	; 61
     6de:	cf 91       	pop	r28
     6e0:	df 91       	pop	r29
     6e2:	08 95       	ret

000006e4 <compareBitsOnUint8>:

void compareBitsOnUint8(Struct_Uint8Data_Typedef *data_ptr){
     6e4:	8f 92       	push	r8
     6e6:	9f 92       	push	r9
     6e8:	af 92       	push	r10
     6ea:	bf 92       	push	r11
     6ec:	cf 92       	push	r12
     6ee:	df 92       	push	r13
     6f0:	ef 92       	push	r14
     6f2:	ff 92       	push	r15
     6f4:	0f 93       	push	r16
     6f6:	1f 93       	push	r17
     6f8:	df 93       	push	r29
     6fa:	cf 93       	push	r28
     6fc:	00 d0       	rcall	.+0      	; 0x6fe <compareBitsOnUint8+0x1a>
     6fe:	cd b7       	in	r28, 0x3d	; 61
     700:	de b7       	in	r29, 0x3e	; 62
     702:	9a 83       	std	Y+2, r25	; 0x02
     704:	89 83       	std	Y+1, r24	; 0x01
    TEST_ASSERT_BITS(data_ptr->mask, data_ptr->expected, data_ptr->actual);	
     706:	89 81       	ldd	r24, Y+1	; 0x01
     708:	9a 81       	ldd	r25, Y+2	; 0x02
     70a:	fc 01       	movw	r30, r24
     70c:	82 81       	ldd	r24, Z+2	; 0x02
     70e:	88 2f       	mov	r24, r24
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	a0 e0       	ldi	r26, 0x00	; 0
     714:	b0 e0       	ldi	r27, 0x00	; 0
     716:	29 81       	ldd	r18, Y+1	; 0x01
     718:	3a 81       	ldd	r19, Y+2	; 0x02
     71a:	f9 01       	movw	r30, r18
     71c:	21 81       	ldd	r18, Z+1	; 0x01
     71e:	22 2f       	mov	r18, r18
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	40 e0       	ldi	r20, 0x00	; 0
     724:	50 e0       	ldi	r21, 0x00	; 0
     726:	69 81       	ldd	r22, Y+1	; 0x01
     728:	7a 81       	ldd	r23, Y+2	; 0x02
     72a:	fb 01       	movw	r30, r22
     72c:	60 81       	ld	r22, Z
     72e:	e6 2e       	mov	r14, r22
     730:	ff 24       	eor	r15, r15
     732:	00 e0       	ldi	r16, 0x00	; 0
     734:	10 e0       	ldi	r17, 0x00	; 0
     736:	bc 01       	movw	r22, r24
     738:	cd 01       	movw	r24, r26
     73a:	cc 24       	eor	r12, r12
     73c:	dd 24       	eor	r13, r13
     73e:	0f 2e       	mov	r0, r31
     740:	f3 e3       	ldi	r31, 0x33	; 51
     742:	8f 2e       	mov	r8, r31
     744:	f0 e0       	ldi	r31, 0x00	; 0
     746:	9f 2e       	mov	r9, r31
     748:	f0 e0       	ldi	r31, 0x00	; 0
     74a:	af 2e       	mov	r10, r31
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	bf 2e       	mov	r11, r31
     750:	f0 2d       	mov	r31, r0
     752:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <UnityAssertBits>
}
     756:	0f 90       	pop	r0
     758:	0f 90       	pop	r0
     75a:	cf 91       	pop	r28
     75c:	df 91       	pop	r29
     75e:	1f 91       	pop	r17
     760:	0f 91       	pop	r16
     762:	ff 90       	pop	r15
     764:	ef 90       	pop	r14
     766:	df 90       	pop	r13
     768:	cf 90       	pop	r12
     76a:	bf 90       	pop	r11
     76c:	af 90       	pop	r10
     76e:	9f 90       	pop	r9
     770:	8f 90       	pop	r8
     772:	08 95       	ret

00000774 <compareBitsOnUint32>:

void compareBitsOnUint32(Struct_Uint32Data_Typedef *data_ptr){
     774:	8f 92       	push	r8
     776:	9f 92       	push	r9
     778:	af 92       	push	r10
     77a:	bf 92       	push	r11
     77c:	cf 92       	push	r12
     77e:	df 92       	push	r13
     780:	ef 92       	push	r14
     782:	ff 92       	push	r15
     784:	0f 93       	push	r16
     786:	1f 93       	push	r17
     788:	df 93       	push	r29
     78a:	cf 93       	push	r28
     78c:	00 d0       	rcall	.+0      	; 0x78e <compareBitsOnUint32+0x1a>
     78e:	cd b7       	in	r28, 0x3d	; 61
     790:	de b7       	in	r29, 0x3e	; 62
     792:	9a 83       	std	Y+2, r25	; 0x02
     794:	89 83       	std	Y+1, r24	; 0x01
    TEST_ASSERT_BITS(data_ptr->mask, data_ptr->expected, data_ptr->actual);	
     796:	89 81       	ldd	r24, Y+1	; 0x01
     798:	9a 81       	ldd	r25, Y+2	; 0x02
     79a:	fc 01       	movw	r30, r24
     79c:	80 85       	ldd	r24, Z+8	; 0x08
     79e:	91 85       	ldd	r25, Z+9	; 0x09
     7a0:	a2 85       	ldd	r26, Z+10	; 0x0a
     7a2:	b3 85       	ldd	r27, Z+11	; 0x0b
     7a4:	29 81       	ldd	r18, Y+1	; 0x01
     7a6:	3a 81       	ldd	r19, Y+2	; 0x02
     7a8:	f9 01       	movw	r30, r18
     7aa:	24 81       	ldd	r18, Z+4	; 0x04
     7ac:	35 81       	ldd	r19, Z+5	; 0x05
     7ae:	46 81       	ldd	r20, Z+6	; 0x06
     7b0:	57 81       	ldd	r21, Z+7	; 0x07
     7b2:	69 81       	ldd	r22, Y+1	; 0x01
     7b4:	7a 81       	ldd	r23, Y+2	; 0x02
     7b6:	fb 01       	movw	r30, r22
     7b8:	e0 80       	ld	r14, Z
     7ba:	f1 80       	ldd	r15, Z+1	; 0x01
     7bc:	02 81       	ldd	r16, Z+2	; 0x02
     7be:	13 81       	ldd	r17, Z+3	; 0x03
     7c0:	bc 01       	movw	r22, r24
     7c2:	cd 01       	movw	r24, r26
     7c4:	cc 24       	eor	r12, r12
     7c6:	dd 24       	eor	r13, r13
     7c8:	0f 2e       	mov	r0, r31
     7ca:	f7 e3       	ldi	r31, 0x37	; 55
     7cc:	8f 2e       	mov	r8, r31
     7ce:	f0 e0       	ldi	r31, 0x00	; 0
     7d0:	9f 2e       	mov	r9, r31
     7d2:	f0 e0       	ldi	r31, 0x00	; 0
     7d4:	af 2e       	mov	r10, r31
     7d6:	f0 e0       	ldi	r31, 0x00	; 0
     7d8:	bf 2e       	mov	r11, r31
     7da:	f0 2d       	mov	r31, r0
     7dc:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <UnityAssertBits>
}
     7e0:	0f 90       	pop	r0
     7e2:	0f 90       	pop	r0
     7e4:	cf 91       	pop	r28
     7e6:	df 91       	pop	r29
     7e8:	1f 91       	pop	r17
     7ea:	0f 91       	pop	r16
     7ec:	ff 90       	pop	r15
     7ee:	ef 90       	pop	r14
     7f0:	df 90       	pop	r13
     7f2:	cf 90       	pop	r12
     7f4:	bf 90       	pop	r11
     7f6:	af 90       	pop	r10
     7f8:	9f 90       	pop	r9
     7fa:	8f 90       	pop	r8
     7fc:	08 95       	ret

000007fe <compareOnUint8>:

void compareOnUint8(Struct_Uint8Data_Typedef *data_ptr){
     7fe:	af 92       	push	r10
     800:	cf 92       	push	r12
     802:	df 92       	push	r13
     804:	ef 92       	push	r14
     806:	ff 92       	push	r15
     808:	0f 93       	push	r16
     80a:	1f 93       	push	r17
     80c:	df 93       	push	r29
     80e:	cf 93       	push	r28
     810:	00 d0       	rcall	.+0      	; 0x812 <compareOnUint8+0x14>
     812:	cd b7       	in	r28, 0x3d	; 61
     814:	de b7       	in	r29, 0x3e	; 62
     816:	9a 83       	std	Y+2, r25	; 0x02
     818:	89 83       	std	Y+1, r24	; 0x01
    TEST_ASSERT_EQUAL(data_ptr->expected, data_ptr->actual);	
     81a:	89 81       	ldd	r24, Y+1	; 0x01
     81c:	9a 81       	ldd	r25, Y+2	; 0x02
     81e:	fc 01       	movw	r30, r24
     820:	81 81       	ldd	r24, Z+1	; 0x01
     822:	88 2f       	mov	r24, r24
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	a0 e0       	ldi	r26, 0x00	; 0
     828:	b0 e0       	ldi	r27, 0x00	; 0
     82a:	29 81       	ldd	r18, Y+1	; 0x01
     82c:	3a 81       	ldd	r19, Y+2	; 0x02
     82e:	f9 01       	movw	r30, r18
     830:	20 81       	ld	r18, Z
     832:	22 2f       	mov	r18, r18
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	40 e0       	ldi	r20, 0x00	; 0
     838:	50 e0       	ldi	r21, 0x00	; 0
     83a:	bc 01       	movw	r22, r24
     83c:	cd 01       	movw	r24, r26
     83e:	00 e0       	ldi	r16, 0x00	; 0
     840:	10 e0       	ldi	r17, 0x00	; 0
     842:	0f 2e       	mov	r0, r31
     844:	fb e3       	ldi	r31, 0x3B	; 59
     846:	cf 2e       	mov	r12, r31
     848:	f0 e0       	ldi	r31, 0x00	; 0
     84a:	df 2e       	mov	r13, r31
     84c:	f0 e0       	ldi	r31, 0x00	; 0
     84e:	ef 2e       	mov	r14, r31
     850:	f0 e0       	ldi	r31, 0x00	; 0
     852:	ff 2e       	mov	r15, r31
     854:	f0 2d       	mov	r31, r0
     856:	0f 2e       	mov	r0, r31
     858:	f2 e1       	ldi	r31, 0x12	; 18
     85a:	af 2e       	mov	r10, r31
     85c:	f0 2d       	mov	r31, r0
     85e:	0e 94 81 11 	call	0x2302	; 0x2302 <UnityAssertEqualNumber>
}
     862:	0f 90       	pop	r0
     864:	0f 90       	pop	r0
     866:	cf 91       	pop	r28
     868:	df 91       	pop	r29
     86a:	1f 91       	pop	r17
     86c:	0f 91       	pop	r16
     86e:	ff 90       	pop	r15
     870:	ef 90       	pop	r14
     872:	df 90       	pop	r13
     874:	cf 90       	pop	r12
     876:	af 90       	pop	r10
     878:	08 95       	ret

0000087a <compareOnUint8Ptr>:

void compareOnUint8Ptr(Struct_Uint8PtrData_Typedef *data_ptr){
     87a:	af 92       	push	r10
     87c:	cf 92       	push	r12
     87e:	df 92       	push	r13
     880:	ef 92       	push	r14
     882:	ff 92       	push	r15
     884:	0f 93       	push	r16
     886:	1f 93       	push	r17
     888:	df 93       	push	r29
     88a:	cf 93       	push	r28
     88c:	00 d0       	rcall	.+0      	; 0x88e <compareOnUint8Ptr+0x14>
     88e:	cd b7       	in	r28, 0x3d	; 61
     890:	de b7       	in	r29, 0x3e	; 62
     892:	9a 83       	std	Y+2, r25	; 0x02
     894:	89 83       	std	Y+1, r24	; 0x01
    TEST_ASSERT_EQUAL_PTR(data_ptr->expected, data_ptr->actual);	
     896:	89 81       	ldd	r24, Y+1	; 0x01
     898:	9a 81       	ldd	r25, Y+2	; 0x02
     89a:	fc 01       	movw	r30, r24
     89c:	82 81       	ldd	r24, Z+2	; 0x02
     89e:	93 81       	ldd	r25, Z+3	; 0x03
     8a0:	aa 27       	eor	r26, r26
     8a2:	97 fd       	sbrc	r25, 7
     8a4:	a0 95       	com	r26
     8a6:	ba 2f       	mov	r27, r26
     8a8:	29 81       	ldd	r18, Y+1	; 0x01
     8aa:	3a 81       	ldd	r19, Y+2	; 0x02
     8ac:	f9 01       	movw	r30, r18
     8ae:	20 81       	ld	r18, Z
     8b0:	31 81       	ldd	r19, Z+1	; 0x01
     8b2:	44 27       	eor	r20, r20
     8b4:	37 fd       	sbrc	r19, 7
     8b6:	40 95       	com	r20
     8b8:	54 2f       	mov	r21, r20
     8ba:	bc 01       	movw	r22, r24
     8bc:	cd 01       	movw	r24, r26
     8be:	00 e0       	ldi	r16, 0x00	; 0
     8c0:	10 e0       	ldi	r17, 0x00	; 0
     8c2:	0f 2e       	mov	r0, r31
     8c4:	ff e3       	ldi	r31, 0x3F	; 63
     8c6:	cf 2e       	mov	r12, r31
     8c8:	f0 e0       	ldi	r31, 0x00	; 0
     8ca:	df 2e       	mov	r13, r31
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	ef 2e       	mov	r14, r31
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	ff 2e       	mov	r15, r31
     8d4:	f0 2d       	mov	r31, r0
     8d6:	0f 2e       	mov	r0, r31
     8d8:	f2 e4       	ldi	r31, 0x42	; 66
     8da:	af 2e       	mov	r10, r31
     8dc:	f0 2d       	mov	r31, r0
     8de:	0e 94 81 11 	call	0x2302	; 0x2302 <UnityAssertEqualNumber>
}
     8e2:	0f 90       	pop	r0
     8e4:	0f 90       	pop	r0
     8e6:	cf 91       	pop	r28
     8e8:	df 91       	pop	r29
     8ea:	1f 91       	pop	r17
     8ec:	0f 91       	pop	r16
     8ee:	ff 90       	pop	r15
     8f0:	ef 90       	pop	r14
     8f2:	df 90       	pop	r13
     8f4:	cf 90       	pop	r12
     8f6:	af 90       	pop	r10
     8f8:	08 95       	ret

000008fa <compareOnUint32>:

void compareOnUint32(Struct_Uint32Data_Typedef *data_ptr){
     8fa:	af 92       	push	r10
     8fc:	cf 92       	push	r12
     8fe:	df 92       	push	r13
     900:	ef 92       	push	r14
     902:	ff 92       	push	r15
     904:	0f 93       	push	r16
     906:	1f 93       	push	r17
     908:	df 93       	push	r29
     90a:	cf 93       	push	r28
     90c:	00 d0       	rcall	.+0      	; 0x90e <__stack+0xf>
     90e:	cd b7       	in	r28, 0x3d	; 61
     910:	de b7       	in	r29, 0x3e	; 62
     912:	9a 83       	std	Y+2, r25	; 0x02
     914:	89 83       	std	Y+1, r24	; 0x01
    TEST_ASSERT_EQUAL(data_ptr->expected, data_ptr->actual);	
     916:	89 81       	ldd	r24, Y+1	; 0x01
     918:	9a 81       	ldd	r25, Y+2	; 0x02
     91a:	fc 01       	movw	r30, r24
     91c:	84 81       	ldd	r24, Z+4	; 0x04
     91e:	95 81       	ldd	r25, Z+5	; 0x05
     920:	a6 81       	ldd	r26, Z+6	; 0x06
     922:	b7 81       	ldd	r27, Z+7	; 0x07
     924:	29 81       	ldd	r18, Y+1	; 0x01
     926:	3a 81       	ldd	r19, Y+2	; 0x02
     928:	f9 01       	movw	r30, r18
     92a:	20 81       	ld	r18, Z
     92c:	31 81       	ldd	r19, Z+1	; 0x01
     92e:	42 81       	ldd	r20, Z+2	; 0x02
     930:	53 81       	ldd	r21, Z+3	; 0x03
     932:	bc 01       	movw	r22, r24
     934:	cd 01       	movw	r24, r26
     936:	00 e0       	ldi	r16, 0x00	; 0
     938:	10 e0       	ldi	r17, 0x00	; 0
     93a:	0f 2e       	mov	r0, r31
     93c:	f3 e4       	ldi	r31, 0x43	; 67
     93e:	cf 2e       	mov	r12, r31
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	df 2e       	mov	r13, r31
     944:	f0 e0       	ldi	r31, 0x00	; 0
     946:	ef 2e       	mov	r14, r31
     948:	f0 e0       	ldi	r31, 0x00	; 0
     94a:	ff 2e       	mov	r15, r31
     94c:	f0 2d       	mov	r31, r0
     94e:	0f 2e       	mov	r0, r31
     950:	f2 e1       	ldi	r31, 0x12	; 18
     952:	af 2e       	mov	r10, r31
     954:	f0 2d       	mov	r31, r0
     956:	0e 94 81 11 	call	0x2302	; 0x2302 <UnityAssertEqualNumber>
}
     95a:	0f 90       	pop	r0
     95c:	0f 90       	pop	r0
     95e:	cf 91       	pop	r28
     960:	df 91       	pop	r29
     962:	1f 91       	pop	r17
     964:	0f 91       	pop	r16
     966:	ff 90       	pop	r15
     968:	ef 90       	pop	r14
     96a:	df 90       	pop	r13
     96c:	cf 90       	pop	r12
     96e:	af 90       	pop	r10
     970:	08 95       	ret

00000972 <Test_RunTestcase>:

/*******************************************************************************
 * 6. Function Definitions
 ******************************************************************************/
void Test_RunTestcase(void)
{	
     972:	df 93       	push	r29
     974:	cf 93       	push	r28
     976:	00 d0       	rcall	.+0      	; 0x978 <Test_RunTestcase+0x6>
     978:	0f 92       	push	r0
     97a:	cd b7       	in	r28, 0x3d	; 61
     97c:	de b7       	in	r29, 0x3e	; 62
	uint8_t cmd;
	uint8_t functionIndex = 0; /*  */
     97e:	19 82       	std	Y+1, r1	; 0x01
	uint8_t functionsLength = sizeof(functions)/sizeof(functions[0]);
     980:	85 e0       	ldi	r24, 0x05	; 5
     982:	8a 83       	std	Y+2, r24	; 0x02
	
	Usart_SendString("TC."); // Debug
     984:	88 e9       	ldi	r24, 0x98	; 152
     986:	91 e0       	ldi	r25, 0x01	; 1
     988:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <Usart_SendString>
     98c:	03 c0       	rjmp	.+6      	; 0x994 <Test_RunTestcase+0x22>
		} else if(CMD_TEST_FUNCTION == cmd){
			printf("Func: %s", functionName);
			functionIndex = getFunctionIndex(functionName, functions, functionsLength);
	        printf("index: %d", functionIndex);			
		}		
	}
     98e:	00 00       	nop
     990:	01 c0       	rjmp	.+2      	; 0x994 <Test_RunTestcase+0x22>
     992:	00 00       	nop
	uint8_t functionIndex = 0; /*  */
	uint8_t functionsLength = sizeof(functions)/sizeof(functions[0]);
	
	Usart_SendString("TC."); // Debug
	while(1) {
		cmd = Test_GetHostCommand();
     994:	0e 94 88 06 	call	0xd10	; 0xd10 <Test_GetHostCommand>
     998:	8b 83       	std	Y+3, r24	; 0x03
				
		/* Perform the test when the command is ":p" */				
		if (CMD_TEST_PARAMETER == cmd) {
     99a:	8b 81       	ldd	r24, Y+3	; 0x03
     99c:	80 37       	cpi	r24, 0x70	; 112
     99e:	d9 f4       	brne	.+54     	; 0x9d6 <Test_RunTestcase+0x64>
			if (0 != functionIndex){
     9a0:	89 81       	ldd	r24, Y+1	; 0x01
     9a2:	88 23       	and	r24, r24
     9a4:	a1 f3       	breq	.-24     	; 0x98e <Test_RunTestcase+0x1c>
	}
	
	/*
	 * @note Each case of the below processing must refer to data of "functions" array
	 */
	switch (functionIndex) {
     9a6:	89 81       	ldd	r24, Y+1	; 0x01
     9a8:	88 2f       	mov	r24, r24
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	82 30       	cpi	r24, 0x02	; 2
     9ae:	91 05       	cpc	r25, r1
     9b0:	09 f4       	brne	.+2      	; 0x9b4 <Test_RunTestcase+0x42>
     9b2:	55 c0       	rjmp	.+170    	; 0xa5e <Test_RunTestcase+0xec>
     9b4:	83 30       	cpi	r24, 0x03	; 3
     9b6:	91 05       	cpc	r25, r1
     9b8:	2c f4       	brge	.+10     	; 0x9c4 <Test_RunTestcase+0x52>
     9ba:	81 30       	cpi	r24, 0x01	; 1
     9bc:	91 05       	cpc	r25, r1
     9be:	09 f4       	brne	.+2      	; 0x9c2 <Test_RunTestcase+0x50>
     9c0:	42 c0       	rjmp	.+132    	; 0xa46 <Test_RunTestcase+0xd4>
			break;
		case 4:
			Test_Gpio_DigitalWrite(PARAM_1, PARAM_2, PARAM_3, PARAM_4);
			break;
		default:
		    break;
     9c2:	74 c0       	rjmp	.+232    	; 0xaac <Test_RunTestcase+0x13a>
	}
	
	/*
	 * @note Each case of the below processing must refer to data of "functions" array
	 */
	switch (functionIndex) {
     9c4:	83 30       	cpi	r24, 0x03	; 3
     9c6:	91 05       	cpc	r25, r1
     9c8:	09 f4       	brne	.+2      	; 0x9cc <Test_RunTestcase+0x5a>
     9ca:	54 c0       	rjmp	.+168    	; 0xa74 <Test_RunTestcase+0x102>
     9cc:	84 30       	cpi	r24, 0x04	; 4
     9ce:	91 05       	cpc	r25, r1
     9d0:	09 f4       	brne	.+2      	; 0x9d4 <Test_RunTestcase+0x62>
     9d2:	5e c0       	rjmp	.+188    	; 0xa90 <Test_RunTestcase+0x11e>
			break;
		case 4:
			Test_Gpio_DigitalWrite(PARAM_1, PARAM_2, PARAM_3, PARAM_4);
			break;
		default:
		    break;
     9d4:	6b c0       	rjmp	.+214    	; 0xaac <Test_RunTestcase+0x13a>
		/* Perform the test when the command is ":p" */				
		if (CMD_TEST_PARAMETER == cmd) {
			if (0 != functionIndex){
                break;
			}					 
		} else if(CMD_TEST_FUNCTION == cmd){
     9d6:	8b 81       	ldd	r24, Y+3	; 0x03
     9d8:	86 36       	cpi	r24, 0x66	; 102
     9da:	d9 f6       	brne	.-74     	; 0x992 <Test_RunTestcase+0x20>
			printf("Func: %s", functionName);
     9dc:	00 d0       	rcall	.+0      	; 0x9de <Test_RunTestcase+0x6c>
     9de:	00 d0       	rcall	.+0      	; 0x9e0 <Test_RunTestcase+0x6e>
     9e0:	8d b7       	in	r24, 0x3d	; 61
     9e2:	9e b7       	in	r25, 0x3e	; 62
     9e4:	01 96       	adiw	r24, 0x01	; 1
     9e6:	2c e9       	ldi	r18, 0x9C	; 156
     9e8:	31 e0       	ldi	r19, 0x01	; 1
     9ea:	fc 01       	movw	r30, r24
     9ec:	31 83       	std	Z+1, r19	; 0x01
     9ee:	20 83       	st	Z, r18
     9f0:	2f ea       	ldi	r18, 0xAF	; 175
     9f2:	31 e0       	ldi	r19, 0x01	; 1
     9f4:	fc 01       	movw	r30, r24
     9f6:	33 83       	std	Z+3, r19	; 0x03
     9f8:	22 83       	std	Z+2, r18	; 0x02
     9fa:	0e 94 ae 29 	call	0x535c	; 0x535c <printf>
     9fe:	0f 90       	pop	r0
     a00:	0f 90       	pop	r0
     a02:	0f 90       	pop	r0
     a04:	0f 90       	pop	r0
			functionIndex = getFunctionIndex(functionName, functions, functionsLength);
     a06:	8f ea       	ldi	r24, 0xAF	; 175
     a08:	91 e0       	ldi	r25, 0x01	; 1
     a0a:	2e e8       	ldi	r18, 0x8E	; 142
     a0c:	31 e0       	ldi	r19, 0x01	; 1
     a0e:	b9 01       	movw	r22, r18
     a10:	4a 81       	ldd	r20, Y+2	; 0x02
     a12:	0e 94 2f 03 	call	0x65e	; 0x65e <getFunctionIndex>
     a16:	89 83       	std	Y+1, r24	; 0x01
	        printf("index: %d", functionIndex);			
     a18:	89 81       	ldd	r24, Y+1	; 0x01
     a1a:	28 2f       	mov	r18, r24
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	00 d0       	rcall	.+0      	; 0xa20 <Test_RunTestcase+0xae>
     a20:	00 d0       	rcall	.+0      	; 0xa22 <Test_RunTestcase+0xb0>
     a22:	8d b7       	in	r24, 0x3d	; 61
     a24:	9e b7       	in	r25, 0x3e	; 62
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	45 ea       	ldi	r20, 0xA5	; 165
     a2a:	51 e0       	ldi	r21, 0x01	; 1
     a2c:	fc 01       	movw	r30, r24
     a2e:	51 83       	std	Z+1, r21	; 0x01
     a30:	40 83       	st	Z, r20
     a32:	fc 01       	movw	r30, r24
     a34:	33 83       	std	Z+3, r19	; 0x03
     a36:	22 83       	std	Z+2, r18	; 0x02
     a38:	0e 94 ae 29 	call	0x535c	; 0x535c <printf>
     a3c:	0f 90       	pop	r0
     a3e:	0f 90       	pop	r0
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
		}		
	}
     a44:	a7 cf       	rjmp	.-178    	; 0x994 <Test_RunTestcase+0x22>
	/*
	 * @note Each case of the below processing must refer to data of "functions" array
	 */
	switch (functionIndex) {
		case 1:			
			Test_Gpio_GetPortBase(PARAM_1, (uint8_t*)PARAM_2);
     a46:	40 91 4b 05 	lds	r20, 0x054B
     a4a:	80 91 4d 05 	lds	r24, 0x054D
     a4e:	88 2f       	mov	r24, r24
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	9c 01       	movw	r18, r24
     a54:	84 2f       	mov	r24, r20
     a56:	b9 01       	movw	r22, r18
     a58:	0e 94 5c 05 	call	0xab8	; 0xab8 <Test_Gpio_GetPortBase>
			break;
     a5c:	27 c0       	rjmp	.+78     	; 0xaac <Test_RunTestcase+0x13a>
		case 2:
			Test_Gpio_CommandPullUpResistorSetting(PARAM_1, PARAM_2, PARAM_3);
     a5e:	80 91 4b 05 	lds	r24, 0x054B
     a62:	20 91 4d 05 	lds	r18, 0x054D
     a66:	90 91 4f 05 	lds	r25, 0x054F
     a6a:	62 2f       	mov	r22, r18
     a6c:	49 2f       	mov	r20, r25
     a6e:	0e 94 83 05 	call	0xb06	; 0xb06 <Test_Gpio_CommandPullUpResistorSetting>
			break;
     a72:	1c c0       	rjmp	.+56     	; 0xaac <Test_RunTestcase+0x13a>
		case 3:
			Test_Gpio_PinMode(PARAM_1, PARAM_2, PARAM_3, PARAM_4);
     a74:	80 91 4b 05 	lds	r24, 0x054B
     a78:	30 91 4d 05 	lds	r19, 0x054D
     a7c:	20 91 4f 05 	lds	r18, 0x054F
     a80:	90 91 51 05 	lds	r25, 0x0551
     a84:	63 2f       	mov	r22, r19
     a86:	42 2f       	mov	r20, r18
     a88:	29 2f       	mov	r18, r25
     a8a:	0e 94 a6 05 	call	0xb4c	; 0xb4c <Test_Gpio_PinMode>
			break;
     a8e:	0e c0       	rjmp	.+28     	; 0xaac <Test_RunTestcase+0x13a>
		case 4:
			Test_Gpio_DigitalWrite(PARAM_1, PARAM_2, PARAM_3, PARAM_4);
     a90:	80 91 4b 05 	lds	r24, 0x054B
     a94:	30 91 4d 05 	lds	r19, 0x054D
     a98:	20 91 4f 05 	lds	r18, 0x054F
     a9c:	90 91 51 05 	lds	r25, 0x0551
     aa0:	63 2f       	mov	r22, r19
     aa2:	42 2f       	mov	r20, r18
     aa4:	29 2f       	mov	r18, r25
     aa6:	0e 94 df 05 	call	0xbbe	; 0xbbe <Test_Gpio_DigitalWrite>
			break;
     aaa:	00 00       	nop
		default:
		    break;
	};	
}
     aac:	0f 90       	pop	r0
     aae:	0f 90       	pop	r0
     ab0:	0f 90       	pop	r0
     ab2:	cf 91       	pop	r28
     ab4:	df 91       	pop	r29
     ab6:	08 95       	ret

00000ab8 <Test_Gpio_GetPortBase>:

void Test_Gpio_GetPortBase(Enum_Gpio_Port_Typedef port_enum, uint8_t* expected)
{
     ab8:	df 93       	push	r29
     aba:	cf 93       	push	r28
     abc:	cd b7       	in	r28, 0x3d	; 61
     abe:	de b7       	in	r29, 0x3e	; 62
     ac0:	29 97       	sbiw	r28, 0x09	; 9
     ac2:	0f b6       	in	r0, 0x3f	; 63
     ac4:	f8 94       	cli
     ac6:	de bf       	out	0x3e, r29	; 62
     ac8:	0f be       	out	0x3f, r0	; 63
     aca:	cd bf       	out	0x3d, r28	; 61
     acc:	8f 83       	std	Y+7, r24	; 0x07
     ace:	79 87       	std	Y+9, r23	; 0x09
     ad0:	68 87       	std	Y+8, r22	; 0x08
	/* Declare object to store returning value */
	Struct_Uint8PtrData_Typedef return_obj;
	uint8_t *result_ptr;
	
	/* Call the tested function */
	result_ptr = (uint8_t*)Gpio_GetPortBase(port_enum);
     ad2:	8f 81       	ldd	r24, Y+7	; 0x07
     ad4:	0e 94 65 00 	call	0xca	; 0xca <Gpio_GetPortBase>
     ad8:	9a 83       	std	Y+2, r25	; 0x02
     ada:	89 83       	std	Y+1, r24	; 0x01
	
	/* Compare return_obj with expected value */
	return_obj.actual = result_ptr;
     adc:	89 81       	ldd	r24, Y+1	; 0x01
     ade:	9a 81       	ldd	r25, Y+2	; 0x02
     ae0:	9c 83       	std	Y+4, r25	; 0x04
     ae2:	8b 83       	std	Y+3, r24	; 0x03
	return_obj.expected = expected;
     ae4:	88 85       	ldd	r24, Y+8	; 0x08
     ae6:	99 85       	ldd	r25, Y+9	; 0x09
     ae8:	9e 83       	std	Y+6, r25	; 0x06
     aea:	8d 83       	std	Y+5, r24	; 0x05
	compareOnUint8Ptr(&return_obj);
     aec:	ce 01       	movw	r24, r28
     aee:	03 96       	adiw	r24, 0x03	; 3
     af0:	0e 94 3d 04 	call	0x87a	; 0x87a <compareOnUint8Ptr>
}
     af4:	29 96       	adiw	r28, 0x09	; 9
     af6:	0f b6       	in	r0, 0x3f	; 63
     af8:	f8 94       	cli
     afa:	de bf       	out	0x3e, r29	; 62
     afc:	0f be       	out	0x3f, r0	; 63
     afe:	cd bf       	out	0x3d, r28	; 61
     b00:	cf 91       	pop	r28
     b02:	df 91       	pop	r29
     b04:	08 95       	ret

00000b06 <Test_Gpio_CommandPullUpResistorSetting>:

void Test_Gpio_CommandPullUpResistorSetting(Enum_Command_Typedef cmd_enum, uint8_t expected, uint8_t mask)
{
     b06:	df 93       	push	r29
     b08:	cf 93       	push	r28
     b0a:	00 d0       	rcall	.+0      	; 0xb0c <Test_Gpio_CommandPullUpResistorSetting+0x6>
     b0c:	00 d0       	rcall	.+0      	; 0xb0e <Test_Gpio_CommandPullUpResistorSetting+0x8>
     b0e:	00 d0       	rcall	.+0      	; 0xb10 <Test_Gpio_CommandPullUpResistorSetting+0xa>
     b10:	cd b7       	in	r28, 0x3d	; 61
     b12:	de b7       	in	r29, 0x3e	; 62
     b14:	8c 83       	std	Y+4, r24	; 0x04
     b16:	6d 83       	std	Y+5, r22	; 0x05
     b18:	4e 83       	std	Y+6, r20	; 0x06
	/* Declare object to check value of MCUCR */
	Struct_Uint8Data_Typedef global_var_1;
	
	/* Call the tested function */
	Gpio_CommandPullUpResistorSetting(cmd_enum);
     b1a:	8c 81       	ldd	r24, Y+4	; 0x04
     b1c:	0e 94 90 00 	call	0x120	; 0x120 <Gpio_CommandPullUpResistorSetting>
	
	/* Compare global_var_1 with expected value */
	global_var_1.actual = MCUCR;
     b20:	85 e5       	ldi	r24, 0x55	; 85
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	fc 01       	movw	r30, r24
     b26:	80 81       	ld	r24, Z
     b28:	89 83       	std	Y+1, r24	; 0x01
	global_var_1.expected = expected;
     b2a:	8d 81       	ldd	r24, Y+5	; 0x05
     b2c:	8a 83       	std	Y+2, r24	; 0x02
	global_var_1.mask = mask;
     b2e:	8e 81       	ldd	r24, Y+6	; 0x06
     b30:	8b 83       	std	Y+3, r24	; 0x03
	compareBitsOnUint8(&global_var_1);
     b32:	ce 01       	movw	r24, r28
     b34:	01 96       	adiw	r24, 0x01	; 1
     b36:	0e 94 72 03 	call	0x6e4	; 0x6e4 <compareBitsOnUint8>
}
     b3a:	26 96       	adiw	r28, 0x06	; 6
     b3c:	0f b6       	in	r0, 0x3f	; 63
     b3e:	f8 94       	cli
     b40:	de bf       	out	0x3e, r29	; 62
     b42:	0f be       	out	0x3f, r0	; 63
     b44:	cd bf       	out	0x3d, r28	; 61
     b46:	cf 91       	pop	r28
     b48:	df 91       	pop	r29
     b4a:	08 95       	ret

00000b4c <Test_Gpio_PinMode>:


void Test_Gpio_PinMode(Enum_Gpio_ArduinoPin_Typedef arduinoPin_enum, Enum_Gpio_DDRxDirection_Typedef direction_enum, uint8_t expected, uint8_t mask)
{
     b4c:	df 93       	push	r29
     b4e:	cf 93       	push	r28
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	2a 97       	sbiw	r28, 0x0a	; 10
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
     b60:	8f 83       	std	Y+7, r24	; 0x07
     b62:	68 87       	std	Y+8, r22	; 0x08
     b64:	49 87       	std	Y+9, r20	; 0x09
     b66:	2a 87       	std	Y+10, r18	; 0x0a
	/* Declare object to check value of gpiox_ptr->DDRx_uint8 */
	Struct_Uint8Data_Typedef global_var_1;
	
	/* Test case precondition configuration */
	Struct_Gpio_Typedef *gpiox_ptr = NULL;
     b68:	1a 82       	std	Y+2, r1	; 0x02
     b6a:	19 82       	std	Y+1, r1	; 0x01
	Enum_Gpio_Port_Typedef port_enum = Pins_array[arduinoPin_enum].port;
     b6c:	8f 81       	ldd	r24, Y+7	; 0x07
     b6e:	88 2f       	mov	r24, r24
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	88 0f       	add	r24, r24
     b74:	99 1f       	adc	r25, r25
     b76:	80 50       	subi	r24, 0x00	; 0
     b78:	9f 4f       	sbci	r25, 0xFF	; 255
     b7a:	fc 01       	movw	r30, r24
     b7c:	80 81       	ld	r24, Z
     b7e:	8b 83       	std	Y+3, r24	; 0x03
	gpiox_ptr = Gpio_GetPortBase(port_enum);
     b80:	8b 81       	ldd	r24, Y+3	; 0x03
     b82:	0e 94 65 00 	call	0xca	; 0xca <Gpio_GetPortBase>
     b86:	9a 83       	std	Y+2, r25	; 0x02
     b88:	89 83       	std	Y+1, r24	; 0x01
	
	/* Call the tested function */
	Gpio_PinMode(arduinoPin_enum, direction_enum);
     b8a:	8f 81       	ldd	r24, Y+7	; 0x07
     b8c:	68 85       	ldd	r22, Y+8	; 0x08
     b8e:	0e 94 b0 00 	call	0x160	; 0x160 <Gpio_PinMode>
	
	/* Compare global_var_1 with expected value */
	global_var_1.actual = gpiox_ptr->DDRx_uint8;
     b92:	89 81       	ldd	r24, Y+1	; 0x01
     b94:	9a 81       	ldd	r25, Y+2	; 0x02
     b96:	fc 01       	movw	r30, r24
     b98:	81 81       	ldd	r24, Z+1	; 0x01
     b9a:	8c 83       	std	Y+4, r24	; 0x04
	global_var_1.expected = expected;
     b9c:	89 85       	ldd	r24, Y+9	; 0x09
     b9e:	8d 83       	std	Y+5, r24	; 0x05
	global_var_1.mask = mask;
     ba0:	8a 85       	ldd	r24, Y+10	; 0x0a
     ba2:	8e 83       	std	Y+6, r24	; 0x06
	compareBitsOnUint8(&global_var_1);
     ba4:	ce 01       	movw	r24, r28
     ba6:	04 96       	adiw	r24, 0x04	; 4
     ba8:	0e 94 72 03 	call	0x6e4	; 0x6e4 <compareBitsOnUint8>
}
     bac:	2a 96       	adiw	r28, 0x0a	; 10
     bae:	0f b6       	in	r0, 0x3f	; 63
     bb0:	f8 94       	cli
     bb2:	de bf       	out	0x3e, r29	; 62
     bb4:	0f be       	out	0x3f, r0	; 63
     bb6:	cd bf       	out	0x3d, r28	; 61
     bb8:	cf 91       	pop	r28
     bba:	df 91       	pop	r29
     bbc:	08 95       	ret

00000bbe <Test_Gpio_DigitalWrite>:

void Test_Gpio_DigitalWrite(Enum_Gpio_ArduinoPin_Typedef arduinoPin_enum, Enum_IOValue_Typedef value_enum, uint8_t expected, uint8_t mask)
{
     bbe:	df 93       	push	r29
     bc0:	cf 93       	push	r28
     bc2:	cd b7       	in	r28, 0x3d	; 61
     bc4:	de b7       	in	r29, 0x3e	; 62
     bc6:	2a 97       	sbiw	r28, 0x0a	; 10
     bc8:	0f b6       	in	r0, 0x3f	; 63
     bca:	f8 94       	cli
     bcc:	de bf       	out	0x3e, r29	; 62
     bce:	0f be       	out	0x3f, r0	; 63
     bd0:	cd bf       	out	0x3d, r28	; 61
     bd2:	8f 83       	std	Y+7, r24	; 0x07
     bd4:	68 87       	std	Y+8, r22	; 0x08
     bd6:	49 87       	std	Y+9, r20	; 0x09
     bd8:	2a 87       	std	Y+10, r18	; 0x0a
	/* Declare object to check value of gpiox_ptr->PORTx_uint8 */
	Struct_Uint8Data_Typedef global_var_1;
	
	/* Test case precondition configuration */
	Struct_Gpio_Typedef *gpiox_ptr = NULL;
     bda:	1a 82       	std	Y+2, r1	; 0x02
     bdc:	19 82       	std	Y+1, r1	; 0x01
	Enum_Gpio_Port_Typedef port_enum = Pins_array[arduinoPin_enum].port;
     bde:	8f 81       	ldd	r24, Y+7	; 0x07
     be0:	88 2f       	mov	r24, r24
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	88 0f       	add	r24, r24
     be6:	99 1f       	adc	r25, r25
     be8:	80 50       	subi	r24, 0x00	; 0
     bea:	9f 4f       	sbci	r25, 0xFF	; 255
     bec:	fc 01       	movw	r30, r24
     bee:	80 81       	ld	r24, Z
     bf0:	8b 83       	std	Y+3, r24	; 0x03
	gpiox_ptr = Gpio_GetPortBase(port_enum);
     bf2:	8b 81       	ldd	r24, Y+3	; 0x03
     bf4:	0e 94 65 00 	call	0xca	; 0xca <Gpio_GetPortBase>
     bf8:	9a 83       	std	Y+2, r25	; 0x02
     bfa:	89 83       	std	Y+1, r24	; 0x01
	
	/* Call the tested function */
	Gpio_DigitalWrite(arduinoPin_enum, value_enum);
     bfc:	8f 81       	ldd	r24, Y+7	; 0x07
     bfe:	68 85       	ldd	r22, Y+8	; 0x08
     c00:	0e 94 0d 01 	call	0x21a	; 0x21a <Gpio_DigitalWrite>
	
	/* Compare global_var_1 with expected value */
	global_var_1.actual = gpiox_ptr->PORTx_uint8;
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	9a 81       	ldd	r25, Y+2	; 0x02
     c08:	fc 01       	movw	r30, r24
     c0a:	82 81       	ldd	r24, Z+2	; 0x02
     c0c:	8c 83       	std	Y+4, r24	; 0x04
	global_var_1.expected = expected;
     c0e:	89 85       	ldd	r24, Y+9	; 0x09
     c10:	8d 83       	std	Y+5, r24	; 0x05
	global_var_1.mask = mask;
     c12:	8a 85       	ldd	r24, Y+10	; 0x0a
     c14:	8e 83       	std	Y+6, r24	; 0x06
	compareBitsOnUint8(&global_var_1);
     c16:	ce 01       	movw	r24, r28
     c18:	04 96       	adiw	r24, 0x04	; 4
     c1a:	0e 94 72 03 	call	0x6e4	; 0x6e4 <compareBitsOnUint8>
}
     c1e:	2a 96       	adiw	r28, 0x0a	; 10
     c20:	0f b6       	in	r0, 0x3f	; 63
     c22:	f8 94       	cli
     c24:	de bf       	out	0x3e, r29	; 62
     c26:	0f be       	out	0x3f, r0	; 63
     c28:	cd bf       	out	0x3d, r28	; 61
     c2a:	cf 91       	pop	r28
     c2c:	df 91       	pop	r29
     c2e:	08 95       	ret

00000c30 <setUp>:
FILE Usart_stream = FDEV_SETUP_STREAM((int (*)(char, FILE *)) Usart_SendChar, NULL, _FDEV_SETUP_RW);

/*******************************************************************************
 * 6. Function Definitions
 ******************************************************************************/
void setUp(void) {  
     c30:	df 93       	push	r29
     c32:	cf 93       	push	r28
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62
    /* Thing to do before running test */
}
     c38:	cf 91       	pop	r28
     c3a:	df 91       	pop	r29
     c3c:	08 95       	ret

00000c3e <tearDown>:

void tearDown(void) {
     c3e:	df 93       	push	r29
     c40:	cf 93       	push	r28
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
    /* Thing to do after running test */
}
     c46:	cf 91       	pop	r28
     c48:	df 91       	pop	r29
     c4a:	08 95       	ret

00000c4c <Test_RunTest>:

void Test_RunTest(void){
     c4c:	df 93       	push	r29
     c4e:	cf 93       	push	r28
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
    Test_Init();
     c54:	0e 94 33 06 	call	0xc66	; 0xc66 <Test_Init>
    Test_Loop();
     c58:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <Test_Loop>
    Test_Conclude();
     c5c:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <Test_Conclude>
}
     c60:	cf 91       	pop	r28
     c62:	df 91       	pop	r29
     c64:	08 95       	ret

00000c66 <Test_Init>:
 * @note To redirect STDIO via usart, these things must be done.
 *       - Add "-Wl,-u,vfprintf -lprintf_flt -lm" flags to linker. 
 *       - Add "libprintf_flt.a" and "libm.a" to linker static libraries. 
 *       Adding "-r" flag for archiver will enable linker static libraries.
 */
void Test_Init(void) {
     c66:	df 93       	push	r29
     c68:	cf 93       	push	r28
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
    cli(); /* Disable all interrupts */
     c6e:	f8 94       	cli
    Usart_InitUSART(&(UsartRedirectConfig_array[0]));
     c70:	8e ea       	ldi	r24, 0xAE	; 174
     c72:	92 e0       	ldi	r25, 0x02	; 2
     c74:	0e 94 6d 01 	call	0x2da	; 0x2da <Usart_InitUSART>
    Usart_SetBaudrate(Usart_9600bps);
     c78:	60 e8       	ldi	r22, 0x80	; 128
     c7a:	75 e2       	ldi	r23, 0x25	; 37
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	0e 94 23 02 	call	0x446	; 0x446 <Usart_SetBaudrate>
    Usart_CommandTransmitter(Enable);
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	0e 94 8f 02 	call	0x51e	; 0x51e <Usart_CommandTransmitter>
    Usart_CommandReceiver(Enable);
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	0e 94 af 02 	call	0x55e	; 0x55e <Usart_CommandReceiver>
    stdout = &Usart_stream;
     c90:	82 eb       	ldi	r24, 0xB2	; 178
     c92:	92 e0       	ldi	r25, 0x02	; 2
     c94:	90 93 82 06 	sts	0x0682, r25
     c98:	80 93 81 06 	sts	0x0681, r24
    sei(); /* Enable all interrupts */
     c9c:	78 94       	sei
    
    Usart_SendString("Start testing");
     c9e:	80 ec       	ldi	r24, 0xC0	; 192
     ca0:	92 e0       	ldi	r25, 0x02	; 2
     ca2:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <Usart_SendString>
    UNITY_BEGIN();
     ca6:	8e ec       	ldi	r24, 0xCE	; 206
     ca8:	92 e0       	ldi	r25, 0x02	; 2
     caa:	0e 94 c0 25 	call	0x4b80	; 0x4b80 <UnityBegin>
}
     cae:	cf 91       	pop	r28
     cb0:	df 91       	pop	r29
     cb2:	08 95       	ret

00000cb4 <Test_Loop>:

void Test_Loop(void){
     cb4:	df 93       	push	r29
     cb6:	cf 93       	push	r28
     cb8:	0f 92       	push	r0
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
     cbe:	01 c0       	rjmp	.+2      	; 0xcc2 <Test_Loop+0xe>
			 * Run a test case 
			 */
            buffer_index = 0;
            RUN_TEST(Test_RunTestcase);
        }
    }
     cc0:	00 00       	nop

void Test_Loop(void){
    uint8_t cmd;

    while(1) {
        cmd = Test_GetHostCommand();
     cc2:	0e 94 88 06 	call	0xd10	; 0xd10 <Test_GetHostCommand>
     cc6:	89 83       	std	Y+1, r24	; 0x01
        
        if (CMD_QUIT_TESTING == cmd) {
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	81 37       	cpi	r24, 0x71	; 113
     ccc:	79 f0       	breq	.+30     	; 0xcec <Test_Loop+0x38>
			/* 
			 * Quit the test loop 
			 */
            break; 
        } else if (CMD_START_TESTING == cmd){
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	83 37       	cpi	r24, 0x73	; 115
     cd2:	b1 f7       	brne	.-20     	; 0xcc0 <Test_Loop+0xc>
			/* 
			 * Run a test case 
			 */
            buffer_index = 0;
     cd4:	10 92 42 05 	sts	0x0542, r1
            RUN_TEST(Test_RunTestcase);
     cd8:	89 eb       	ldi	r24, 0xB9	; 185
     cda:	94 e0       	ldi	r25, 0x04	; 4
     cdc:	2e ee       	ldi	r18, 0xEE	; 238
     cde:	32 e0       	ldi	r19, 0x02	; 2
     ce0:	b9 01       	movw	r22, r18
     ce2:	42 e7       	ldi	r20, 0x72	; 114
     ce4:	50 e0       	ldi	r21, 0x00	; 0
     ce6:	0e 94 65 25 	call	0x4aca	; 0x4aca <UnityDefaultTestRun>
        }
    }
     cea:	eb cf       	rjmp	.-42     	; 0xcc2 <Test_Loop+0xe>
}
     cec:	00 00       	nop
     cee:	0f 90       	pop	r0
     cf0:	cf 91       	pop	r28
     cf2:	df 91       	pop	r29
     cf4:	08 95       	ret

00000cf6 <Test_Conclude>:

void Test_Conclude(void){
     cf6:	df 93       	push	r29
     cf8:	cf 93       	push	r28
     cfa:	cd b7       	in	r28, 0x3d	; 61
     cfc:	de b7       	in	r29, 0x3e	; 62
    UNITY_END();
     cfe:	0e 94 0e 26 	call	0x4c1c	; 0x4c1c <UnityEnd>
    Usart_SendString("End testing");
     d02:	8f ef       	ldi	r24, 0xFF	; 255
     d04:	92 e0       	ldi	r25, 0x02	; 2
     d06:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <Usart_SendString>
}
     d0a:	cf 91       	pop	r28
     d0c:	df 91       	pop	r29
     d0e:	08 95       	ret

00000d10 <Test_GetHostCommand>:

uint8_t Test_GetHostCommand(void){
     d10:	df 93       	push	r29
     d12:	cf 93       	push	r28
     d14:	00 d0       	rcall	.+0      	; 0xd16 <Test_GetHostCommand+0x6>
     d16:	0f 92       	push	r0
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
    uint8_t cmd;
    if(true == endCommand){
     d1c:	80 91 43 05 	lds	r24, 0x0543
     d20:	88 23       	and	r24, r24
     d22:	89 f1       	breq	.+98     	; 0xd86 <Test_GetHostCommand+0x76>
        endCommand = false;
     d24:	10 92 43 05 	sts	0x0543, r1
        uint8_t read_index = 0;
     d28:	1a 82       	std	Y+2, r1	; 0x02
        uint8_t data;
        
		/* Command format is  ":[cmd_character][...]." => get the [1] element of buffer array */
        cmd = CMD_NAME;			
     d2a:	80 91 49 05 	lds	r24, 0x0549
     d2e:	89 83       	std	Y+1, r24	; 0x01
		
        /* Print out received data */
        while(read_index < buffer_index){
     d30:	23 c0       	rjmp	.+70     	; 0xd78 <Test_GetHostCommand+0x68>
            data = buffer[read_index];
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
     d34:	88 2f       	mov	r24, r24
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	88 5b       	subi	r24, 0xB8	; 184
     d3a:	9a 4f       	sbci	r25, 0xFA	; 250
     d3c:	fc 01       	movw	r30, r24
     d3e:	80 81       	ld	r24, Z
     d40:	8b 83       	std	Y+3, r24	; 0x03
            Usart_SendChar(data, 0);
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	60 e0       	ldi	r22, 0x00	; 0
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	0e 94 cf 02 	call	0x59e	; 0x59e <Usart_SendChar>
			
			/* Store function name if host send the function command*/
			if((CMD_TEST_FUNCTION == cmd) && (read_index >= FUNCTION_NAME_INDEX) && (CMD_END_CHARACTER != data)){
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	86 36       	cpi	r24, 0x66	; 102
     d50:	81 f4       	brne	.+32     	; 0xd72 <Test_GetHostCommand+0x62>
     d52:	8a 81       	ldd	r24, Y+2	; 0x02
     d54:	83 30       	cpi	r24, 0x03	; 3
     d56:	68 f0       	brcs	.+26     	; 0xd72 <Test_GetHostCommand+0x62>
     d58:	8b 81       	ldd	r24, Y+3	; 0x03
     d5a:	8e 32       	cpi	r24, 0x2E	; 46
     d5c:	51 f0       	breq	.+20     	; 0xd72 <Test_GetHostCommand+0x62>
				/* Append the received character to function name when host send the ":f" command */
			    strncat(functionName, &data, 1);
     d5e:	8f ea       	ldi	r24, 0xAF	; 175
     d60:	91 e0       	ldi	r25, 0x01	; 1
     d62:	9e 01       	movw	r18, r28
     d64:	2d 5f       	subi	r18, 0xFD	; 253
     d66:	3f 4f       	sbci	r19, 0xFF	; 255
     d68:	b9 01       	movw	r22, r18
     d6a:	41 e0       	ldi	r20, 0x01	; 1
     d6c:	50 e0       	ldi	r21, 0x00	; 0
     d6e:	0e 94 72 29 	call	0x52e4	; 0x52e4 <strncat>
		    }	
		
            read_index++;
     d72:	8a 81       	ldd	r24, Y+2	; 0x02
     d74:	8f 5f       	subi	r24, 0xFF	; 255
     d76:	8a 83       	std	Y+2, r24	; 0x02
        
		/* Command format is  ":[cmd_character][...]." => get the [1] element of buffer array */
        cmd = CMD_NAME;			
		
        /* Print out received data */
        while(read_index < buffer_index){
     d78:	80 91 42 05 	lds	r24, 0x0542
     d7c:	9a 81       	ldd	r25, Y+2	; 0x02
     d7e:	98 17       	cp	r25, r24
     d80:	c0 f2       	brcs	.-80     	; 0xd32 <Test_GetHostCommand+0x22>
		
            read_index++;
        }
        
        /* Reset buffer index */
        buffer_index = 0;
     d82:	10 92 42 05 	sts	0x0542, r1
    } /* End of if(true == endCommand){ */
    return cmd;
     d86:	89 81       	ldd	r24, Y+1	; 0x01
}
     d88:	0f 90       	pop	r0
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
     d8e:	cf 91       	pop	r28
     d90:	df 91       	pop	r29
     d92:	08 95       	ret

00000d94 <__vector_18>:

/**
 * USART reception complete interrupt handler
 */
ISR(USART_RX_vect)
{
     d94:	1f 92       	push	r1
     d96:	0f 92       	push	r0
     d98:	0f b6       	in	r0, 0x3f	; 63
     d9a:	0f 92       	push	r0
     d9c:	11 24       	eor	r1, r1
     d9e:	2f 93       	push	r18
     da0:	8f 93       	push	r24
     da2:	9f 93       	push	r25
     da4:	ef 93       	push	r30
     da6:	ff 93       	push	r31
     da8:	df 93       	push	r29
     daa:	cf 93       	push	r28
     dac:	0f 92       	push	r0
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
    while (!(UCSR0A & (1 << RXC0)));	
     db2:	00 00       	nop
     db4:	80 ec       	ldi	r24, 0xC0	; 192
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	fc 01       	movw	r30, r24
     dba:	80 81       	ld	r24, Z
     dbc:	88 23       	and	r24, r24
     dbe:	d4 f7       	brge	.-12     	; 0xdb4 <__vector_18+0x20>
    uint8_t data = (uint8_t)UDR0;
     dc0:	86 ec       	ldi	r24, 0xC6	; 198
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	fc 01       	movw	r30, r24
     dc6:	80 81       	ld	r24, Z
     dc8:	89 83       	std	Y+1, r24	; 0x01
	if ('.' == data){
     dca:	89 81       	ldd	r24, Y+1	; 0x01
     dcc:	8e 32       	cpi	r24, 0x2E	; 46
     dce:	19 f4       	brne	.+6      	; 0xdd6 <__vector_18+0x42>
		endCommand = true;
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	80 93 43 05 	sts	0x0543, r24
	}
	
    buffer[buffer_index] = data;
     dd6:	80 91 42 05 	lds	r24, 0x0542
     dda:	88 2f       	mov	r24, r24
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	88 5b       	subi	r24, 0xB8	; 184
     de0:	9a 4f       	sbci	r25, 0xFA	; 250
     de2:	29 81       	ldd	r18, Y+1	; 0x01
     de4:	fc 01       	movw	r30, r24
     de6:	20 83       	st	Z, r18
    buffer_index++;
     de8:	80 91 42 05 	lds	r24, 0x0542
     dec:	8f 5f       	subi	r24, 0xFF	; 255
     dee:	80 93 42 05 	sts	0x0542, r24
}
     df2:	0f 90       	pop	r0
     df4:	cf 91       	pop	r28
     df6:	df 91       	pop	r29
     df8:	ff 91       	pop	r31
     dfa:	ef 91       	pop	r30
     dfc:	9f 91       	pop	r25
     dfe:	8f 91       	pop	r24
     e00:	2f 91       	pop	r18
     e02:	0f 90       	pop	r0
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	0f 90       	pop	r0
     e08:	1f 90       	pop	r1
     e0a:	18 95       	reti

00000e0c <UnityPrintChar>:
 *-----------------------------------------------*/

/*-----------------------------------------------*/
/* Local helper function to print characters. */
static void UnityPrintChar(const char* pch)
{
     e0c:	df 93       	push	r29
     e0e:	cf 93       	push	r28
     e10:	00 d0       	rcall	.+0      	; 0xe12 <UnityPrintChar+0x6>
     e12:	cd b7       	in	r28, 0x3d	; 61
     e14:	de b7       	in	r29, 0x3e	; 62
     e16:	9a 83       	std	Y+2, r25	; 0x02
     e18:	89 83       	std	Y+1, r24	; 0x01
    /* printable characters plus CR & LF are printed */
    if ((*pch <= 126) && (*pch >= 32))
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
     e1c:	9a 81       	ldd	r25, Y+2	; 0x02
     e1e:	fc 01       	movw	r30, r24
     e20:	80 81       	ld	r24, Z
     e22:	8f 37       	cpi	r24, 0x7F	; 127
     e24:	a0 f4       	brcc	.+40     	; 0xe4e <UnityPrintChar+0x42>
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	9a 81       	ldd	r25, Y+2	; 0x02
     e2a:	fc 01       	movw	r30, r24
     e2c:	80 81       	ld	r24, Z
     e2e:	80 32       	cpi	r24, 0x20	; 32
     e30:	70 f0       	brcs	.+28     	; 0xe4e <UnityPrintChar+0x42>
    {
        UNITY_OUTPUT_CHAR(*pch);
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	9a 81       	ldd	r25, Y+2	; 0x02
     e36:	fc 01       	movw	r30, r24
     e38:	80 81       	ld	r24, Z
     e3a:	88 2f       	mov	r24, r24
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	20 91 81 06 	lds	r18, 0x0681
     e42:	30 91 82 06 	lds	r19, 0x0682
     e46:	b9 01       	movw	r22, r18
     e48:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
     e4c:	51 c0       	rjmp	.+162    	; 0xef0 <UnityPrintChar+0xe4>
    }
    /* write escaped carriage returns */
    else if (*pch == 13)
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	9a 81       	ldd	r25, Y+2	; 0x02
     e52:	fc 01       	movw	r30, r24
     e54:	80 81       	ld	r24, Z
     e56:	8d 30       	cpi	r24, 0x0D	; 13
     e58:	99 f4       	brne	.+38     	; 0xe80 <UnityPrintChar+0x74>
    {
        UNITY_OUTPUT_CHAR('\\');
     e5a:	20 91 81 06 	lds	r18, 0x0681
     e5e:	30 91 82 06 	lds	r19, 0x0682
     e62:	8c e5       	ldi	r24, 0x5C	; 92
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	b9 01       	movw	r22, r18
     e68:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
        UNITY_OUTPUT_CHAR('r');
     e6c:	20 91 81 06 	lds	r18, 0x0681
     e70:	30 91 82 06 	lds	r19, 0x0682
     e74:	82 e7       	ldi	r24, 0x72	; 114
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	b9 01       	movw	r22, r18
     e7a:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
     e7e:	38 c0       	rjmp	.+112    	; 0xef0 <UnityPrintChar+0xe4>
    }
    /* write escaped line feeds */
    else if (*pch == 10)
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	9a 81       	ldd	r25, Y+2	; 0x02
     e84:	fc 01       	movw	r30, r24
     e86:	80 81       	ld	r24, Z
     e88:	8a 30       	cpi	r24, 0x0A	; 10
     e8a:	99 f4       	brne	.+38     	; 0xeb2 <UnityPrintChar+0xa6>
    {
        UNITY_OUTPUT_CHAR('\\');
     e8c:	20 91 81 06 	lds	r18, 0x0681
     e90:	30 91 82 06 	lds	r19, 0x0682
     e94:	8c e5       	ldi	r24, 0x5C	; 92
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	b9 01       	movw	r22, r18
     e9a:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
        UNITY_OUTPUT_CHAR('n');
     e9e:	20 91 81 06 	lds	r18, 0x0681
     ea2:	30 91 82 06 	lds	r19, 0x0682
     ea6:	8e e6       	ldi	r24, 0x6E	; 110
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	b9 01       	movw	r22, r18
     eac:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
     eb0:	1f c0       	rjmp	.+62     	; 0xef0 <UnityPrintChar+0xe4>
    }
    /* unprintable characters are shown as codes */
    else
    {
        UNITY_OUTPUT_CHAR('\\');
     eb2:	20 91 81 06 	lds	r18, 0x0681
     eb6:	30 91 82 06 	lds	r19, 0x0682
     eba:	8c e5       	ldi	r24, 0x5C	; 92
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	b9 01       	movw	r22, r18
     ec0:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
        UNITY_OUTPUT_CHAR('x');
     ec4:	20 91 81 06 	lds	r18, 0x0681
     ec8:	30 91 82 06 	lds	r19, 0x0682
     ecc:	88 e7       	ldi	r24, 0x78	; 120
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	b9 01       	movw	r22, r18
     ed2:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
        UnityPrintNumberHex((UNITY_UINT)*pch, 2);
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	9a 81       	ldd	r25, Y+2	; 0x02
     eda:	fc 01       	movw	r30, r24
     edc:	80 81       	ld	r24, Z
     ede:	88 2f       	mov	r24, r24
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	a0 e0       	ldi	r26, 0x00	; 0
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	bc 01       	movw	r22, r24
     ee8:	cd 01       	movw	r24, r26
     eea:	42 e0       	ldi	r20, 0x02	; 2
     eec:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <UnityPrintNumberHex>
    }
}
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
     ef4:	cf 91       	pop	r28
     ef6:	df 91       	pop	r29
     ef8:	08 95       	ret

00000efa <UnityPrint>:
}
#endif

/*-----------------------------------------------*/
void UnityPrint(const char* string)
{
     efa:	df 93       	push	r29
     efc:	cf 93       	push	r28
     efe:	00 d0       	rcall	.+0      	; 0xf00 <UnityPrint+0x6>
     f00:	00 d0       	rcall	.+0      	; 0xf02 <UnityPrint+0x8>
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
     f06:	9c 83       	std	Y+4, r25	; 0x04
     f08:	8b 83       	std	Y+3, r24	; 0x03
    const char* pch = string;
     f0a:	8b 81       	ldd	r24, Y+3	; 0x03
     f0c:	9c 81       	ldd	r25, Y+4	; 0x04
     f0e:	9a 83       	std	Y+2, r25	; 0x02
     f10:	89 83       	std	Y+1, r24	; 0x01

    if (pch != NULL)
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	9a 81       	ldd	r25, Y+2	; 0x02
     f16:	00 97       	sbiw	r24, 0x00	; 0
     f18:	81 f0       	breq	.+32     	; 0xf3a <UnityPrint+0x40>
    {
        while (*pch)
     f1a:	09 c0       	rjmp	.+18     	; 0xf2e <UnityPrint+0x34>
            {
                pch += UnityPrintAnsiEscapeString(pch);
                continue;
            }
#endif
            UnityPrintChar(pch);
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	9a 81       	ldd	r25, Y+2	; 0x02
     f20:	0e 94 06 07 	call	0xe0c	; 0xe0c <UnityPrintChar>
            pch++;
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	9a 81       	ldd	r25, Y+2	; 0x02
     f28:	01 96       	adiw	r24, 0x01	; 1
     f2a:	9a 83       	std	Y+2, r25	; 0x02
     f2c:	89 83       	std	Y+1, r24	; 0x01
{
    const char* pch = string;

    if (pch != NULL)
    {
        while (*pch)
     f2e:	89 81       	ldd	r24, Y+1	; 0x01
     f30:	9a 81       	ldd	r25, Y+2	; 0x02
     f32:	fc 01       	movw	r30, r24
     f34:	80 81       	ld	r24, Z
     f36:	88 23       	and	r24, r24
     f38:	89 f7       	brne	.-30     	; 0xf1c <UnityPrint+0x22>
#endif
            UnityPrintChar(pch);
            pch++;
        }
    }
}
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <UnityPrintLen>:
}
#endif /* ! UNITY_INCLUDE_PRINT_FORMATTED */

/*-----------------------------------------------*/
void UnityPrintLen(const char* string, const UNITY_UINT32 length)
{
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
     f50:	28 97       	sbiw	r28, 0x08	; 8
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	f8 94       	cli
     f56:	de bf       	out	0x3e, r29	; 62
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	cd bf       	out	0x3d, r28	; 61
     f5c:	9c 83       	std	Y+4, r25	; 0x04
     f5e:	8b 83       	std	Y+3, r24	; 0x03
     f60:	4d 83       	std	Y+5, r20	; 0x05
     f62:	5e 83       	std	Y+6, r21	; 0x06
     f64:	6f 83       	std	Y+7, r22	; 0x07
     f66:	78 87       	std	Y+8, r23	; 0x08
    const char* pch = string;
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
     f6a:	9c 81       	ldd	r25, Y+4	; 0x04
     f6c:	9a 83       	std	Y+2, r25	; 0x02
     f6e:	89 83       	std	Y+1, r24	; 0x01

    if (pch != NULL)
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	9a 81       	ldd	r25, Y+2	; 0x02
     f74:	00 97       	sbiw	r24, 0x00	; 0
     f76:	09 f4       	brne	.+2      	; 0xf7a <UnityPrintLen+0x32>
     f78:	8e c0       	rjmp	.+284    	; 0x1096 <UnityPrintLen+0x14e>
    {
        while (*pch && ((UNITY_UINT32)(pch - string) < length))
     f7a:	70 c0       	rjmp	.+224    	; 0x105c <UnityPrintLen+0x114>
        {
            /* printable characters plus CR & LF are printed */
            if ((*pch <= 126) && (*pch >= 32))
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	9a 81       	ldd	r25, Y+2	; 0x02
     f80:	fc 01       	movw	r30, r24
     f82:	80 81       	ld	r24, Z
     f84:	8f 37       	cpi	r24, 0x7F	; 127
     f86:	a0 f4       	brcc	.+40     	; 0xfb0 <UnityPrintLen+0x68>
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	9a 81       	ldd	r25, Y+2	; 0x02
     f8c:	fc 01       	movw	r30, r24
     f8e:	80 81       	ld	r24, Z
     f90:	80 32       	cpi	r24, 0x20	; 32
     f92:	70 f0       	brcs	.+28     	; 0xfb0 <UnityPrintLen+0x68>
            {
                UNITY_OUTPUT_CHAR(*pch);
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	9a 81       	ldd	r25, Y+2	; 0x02
     f98:	fc 01       	movw	r30, r24
     f9a:	80 81       	ld	r24, Z
     f9c:	88 2f       	mov	r24, r24
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	20 91 81 06 	lds	r18, 0x0681
     fa4:	30 91 82 06 	lds	r19, 0x0682
     fa8:	b9 01       	movw	r22, r18
     faa:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
     fae:	51 c0       	rjmp	.+162    	; 0x1052 <UnityPrintLen+0x10a>
            }
            /* write escaped carriage returns */
            else if (*pch == 13)
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	9a 81       	ldd	r25, Y+2	; 0x02
     fb4:	fc 01       	movw	r30, r24
     fb6:	80 81       	ld	r24, Z
     fb8:	8d 30       	cpi	r24, 0x0D	; 13
     fba:	99 f4       	brne	.+38     	; 0xfe2 <UnityPrintLen+0x9a>
            {
                UNITY_OUTPUT_CHAR('\\');
     fbc:	20 91 81 06 	lds	r18, 0x0681
     fc0:	30 91 82 06 	lds	r19, 0x0682
     fc4:	8c e5       	ldi	r24, 0x5C	; 92
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	b9 01       	movw	r22, r18
     fca:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
                UNITY_OUTPUT_CHAR('r');
     fce:	20 91 81 06 	lds	r18, 0x0681
     fd2:	30 91 82 06 	lds	r19, 0x0682
     fd6:	82 e7       	ldi	r24, 0x72	; 114
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	b9 01       	movw	r22, r18
     fdc:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
     fe0:	38 c0       	rjmp	.+112    	; 0x1052 <UnityPrintLen+0x10a>
            }
            /* write escaped line feeds */
            else if (*pch == 10)
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	9a 81       	ldd	r25, Y+2	; 0x02
     fe6:	fc 01       	movw	r30, r24
     fe8:	80 81       	ld	r24, Z
     fea:	8a 30       	cpi	r24, 0x0A	; 10
     fec:	99 f4       	brne	.+38     	; 0x1014 <UnityPrintLen+0xcc>
            {
                UNITY_OUTPUT_CHAR('\\');
     fee:	20 91 81 06 	lds	r18, 0x0681
     ff2:	30 91 82 06 	lds	r19, 0x0682
     ff6:	8c e5       	ldi	r24, 0x5C	; 92
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	b9 01       	movw	r22, r18
     ffc:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
                UNITY_OUTPUT_CHAR('n');
    1000:	20 91 81 06 	lds	r18, 0x0681
    1004:	30 91 82 06 	lds	r19, 0x0682
    1008:	8e e6       	ldi	r24, 0x6E	; 110
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	b9 01       	movw	r22, r18
    100e:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
    1012:	1f c0       	rjmp	.+62     	; 0x1052 <UnityPrintLen+0x10a>
            }
            /* unprintable characters are shown as codes */
            else
            {
                UNITY_OUTPUT_CHAR('\\');
    1014:	20 91 81 06 	lds	r18, 0x0681
    1018:	30 91 82 06 	lds	r19, 0x0682
    101c:	8c e5       	ldi	r24, 0x5C	; 92
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	b9 01       	movw	r22, r18
    1022:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
                UNITY_OUTPUT_CHAR('x');
    1026:	20 91 81 06 	lds	r18, 0x0681
    102a:	30 91 82 06 	lds	r19, 0x0682
    102e:	88 e7       	ldi	r24, 0x78	; 120
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	b9 01       	movw	r22, r18
    1034:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
                UnityPrintNumberHex((UNITY_UINT)*pch, 2);
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	9a 81       	ldd	r25, Y+2	; 0x02
    103c:	fc 01       	movw	r30, r24
    103e:	80 81       	ld	r24, Z
    1040:	88 2f       	mov	r24, r24
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	a0 e0       	ldi	r26, 0x00	; 0
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	bc 01       	movw	r22, r24
    104a:	cd 01       	movw	r24, r26
    104c:	42 e0       	ldi	r20, 0x02	; 2
    104e:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <UnityPrintNumberHex>
            }
            pch++;
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	9a 81       	ldd	r25, Y+2	; 0x02
    1056:	01 96       	adiw	r24, 0x01	; 1
    1058:	9a 83       	std	Y+2, r25	; 0x02
    105a:	89 83       	std	Y+1, r24	; 0x01
{
    const char* pch = string;

    if (pch != NULL)
    {
        while (*pch && ((UNITY_UINT32)(pch - string) < length))
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	9a 81       	ldd	r25, Y+2	; 0x02
    1060:	fc 01       	movw	r30, r24
    1062:	80 81       	ld	r24, Z
    1064:	88 23       	and	r24, r24
    1066:	b9 f0       	breq	.+46     	; 0x1096 <UnityPrintLen+0x14e>
    1068:	29 81       	ldd	r18, Y+1	; 0x01
    106a:	3a 81       	ldd	r19, Y+2	; 0x02
    106c:	8b 81       	ldd	r24, Y+3	; 0x03
    106e:	9c 81       	ldd	r25, Y+4	; 0x04
    1070:	a9 01       	movw	r20, r18
    1072:	48 1b       	sub	r20, r24
    1074:	59 0b       	sbc	r21, r25
    1076:	ca 01       	movw	r24, r20
    1078:	9c 01       	movw	r18, r24
    107a:	44 27       	eor	r20, r20
    107c:	37 fd       	sbrc	r19, 7
    107e:	40 95       	com	r20
    1080:	54 2f       	mov	r21, r20
    1082:	8d 81       	ldd	r24, Y+5	; 0x05
    1084:	9e 81       	ldd	r25, Y+6	; 0x06
    1086:	af 81       	ldd	r26, Y+7	; 0x07
    1088:	b8 85       	ldd	r27, Y+8	; 0x08
    108a:	28 17       	cp	r18, r24
    108c:	39 07       	cpc	r19, r25
    108e:	4a 07       	cpc	r20, r26
    1090:	5b 07       	cpc	r21, r27
    1092:	08 f4       	brcc	.+2      	; 0x1096 <UnityPrintLen+0x14e>
    1094:	73 cf       	rjmp	.-282    	; 0xf7c <UnityPrintLen+0x34>
                UnityPrintNumberHex((UNITY_UINT)*pch, 2);
            }
            pch++;
        }
    }
}
    1096:	28 96       	adiw	r28, 0x08	; 8
    1098:	0f b6       	in	r0, 0x3f	; 63
    109a:	f8 94       	cli
    109c:	de bf       	out	0x3e, r29	; 62
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	cd bf       	out	0x3d, r28	; 61
    10a2:	cf 91       	pop	r28
    10a4:	df 91       	pop	r29
    10a6:	08 95       	ret

000010a8 <UnityPrintNumberByStyle>:

/*-----------------------------------------------*/
void UnityPrintNumberByStyle(const UNITY_INT number, const UNITY_DISPLAY_STYLE_T style)
{
    10a8:	df 93       	push	r29
    10aa:	cf 93       	push	r28
    10ac:	00 d0       	rcall	.+0      	; 0x10ae <UnityPrintNumberByStyle+0x6>
    10ae:	00 d0       	rcall	.+0      	; 0x10b0 <UnityPrintNumberByStyle+0x8>
    10b0:	0f 92       	push	r0
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
    10b6:	69 83       	std	Y+1, r22	; 0x01
    10b8:	7a 83       	std	Y+2, r23	; 0x02
    10ba:	8b 83       	std	Y+3, r24	; 0x03
    10bc:	9c 83       	std	Y+4, r25	; 0x04
    10be:	4d 83       	std	Y+5, r20	; 0x05
    if ((style & UNITY_DISPLAY_RANGE_INT) == UNITY_DISPLAY_RANGE_INT)
    10c0:	8d 81       	ldd	r24, Y+5	; 0x05
    10c2:	88 2f       	mov	r24, r24
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	80 71       	andi	r24, 0x10	; 16
    10c8:	90 70       	andi	r25, 0x00	; 0
    10ca:	00 97       	sbiw	r24, 0x00	; 0
    10cc:	49 f0       	breq	.+18     	; 0x10e0 <UnityPrintNumberByStyle+0x38>
    {
        UnityPrintNumber(number);
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	9a 81       	ldd	r25, Y+2	; 0x02
    10d2:	ab 81       	ldd	r26, Y+3	; 0x03
    10d4:	bc 81       	ldd	r27, Y+4	; 0x04
    10d6:	bc 01       	movw	r22, r24
    10d8:	cd 01       	movw	r24, r26
    10da:	0e 94 a6 08 	call	0x114c	; 0x114c <UnityPrintNumber>
    10de:	2e c0       	rjmp	.+92     	; 0x113c <UnityPrintNumberByStyle+0x94>
    }
    else if ((style & UNITY_DISPLAY_RANGE_UINT) == UNITY_DISPLAY_RANGE_UINT)
    10e0:	8d 81       	ldd	r24, Y+5	; 0x05
    10e2:	88 2f       	mov	r24, r24
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	80 72       	andi	r24, 0x20	; 32
    10e8:	90 70       	andi	r25, 0x00	; 0
    10ea:	00 97       	sbiw	r24, 0x00	; 0
    10ec:	49 f0       	breq	.+18     	; 0x1100 <UnityPrintNumberByStyle+0x58>
    {
        UnityPrintNumberUnsigned((UNITY_UINT)number);
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	9a 81       	ldd	r25, Y+2	; 0x02
    10f2:	ab 81       	ldd	r26, Y+3	; 0x03
    10f4:	bc 81       	ldd	r27, Y+4	; 0x04
    10f6:	bc 01       	movw	r22, r24
    10f8:	cd 01       	movw	r24, r26
    10fa:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <UnityPrintNumberUnsigned>
    10fe:	1e c0       	rjmp	.+60     	; 0x113c <UnityPrintNumberByStyle+0x94>
    }
    else
    {
        UNITY_OUTPUT_CHAR('0');
    1100:	20 91 81 06 	lds	r18, 0x0681
    1104:	30 91 82 06 	lds	r19, 0x0682
    1108:	80 e3       	ldi	r24, 0x30	; 48
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	b9 01       	movw	r22, r18
    110e:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
        UNITY_OUTPUT_CHAR('x');
    1112:	20 91 81 06 	lds	r18, 0x0681
    1116:	30 91 82 06 	lds	r19, 0x0682
    111a:	88 e7       	ldi	r24, 0x78	; 120
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	b9 01       	movw	r22, r18
    1120:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
        UnityPrintNumberHex((UNITY_UINT)number, (char)((style & 0xF) * 2));
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	9a 81       	ldd	r25, Y+2	; 0x02
    1128:	ab 81       	ldd	r26, Y+3	; 0x03
    112a:	bc 81       	ldd	r27, Y+4	; 0x04
    112c:	2d 81       	ldd	r18, Y+5	; 0x05
    112e:	2f 70       	andi	r18, 0x0F	; 15
    1130:	22 0f       	add	r18, r18
    1132:	bc 01       	movw	r22, r24
    1134:	cd 01       	movw	r24, r26
    1136:	42 2f       	mov	r20, r18
    1138:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <UnityPrintNumberHex>
    }
}
    113c:	0f 90       	pop	r0
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	cf 91       	pop	r28
    1148:	df 91       	pop	r29
    114a:	08 95       	ret

0000114c <UnityPrintNumber>:

/*-----------------------------------------------*/
void UnityPrintNumber(const UNITY_INT number_to_print)
{
    114c:	df 93       	push	r29
    114e:	cf 93       	push	r28
    1150:	cd b7       	in	r28, 0x3d	; 61
    1152:	de b7       	in	r29, 0x3e	; 62
    1154:	28 97       	sbiw	r28, 0x08	; 8
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	f8 94       	cli
    115a:	de bf       	out	0x3e, r29	; 62
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	cd bf       	out	0x3d, r28	; 61
    1160:	6d 83       	std	Y+5, r22	; 0x05
    1162:	7e 83       	std	Y+6, r23	; 0x06
    1164:	8f 83       	std	Y+7, r24	; 0x07
    1166:	98 87       	std	Y+8, r25	; 0x08
    UNITY_UINT number = (UNITY_UINT)number_to_print;
    1168:	8d 81       	ldd	r24, Y+5	; 0x05
    116a:	9e 81       	ldd	r25, Y+6	; 0x06
    116c:	af 81       	ldd	r26, Y+7	; 0x07
    116e:	b8 85       	ldd	r27, Y+8	; 0x08
    1170:	89 83       	std	Y+1, r24	; 0x01
    1172:	9a 83       	std	Y+2, r25	; 0x02
    1174:	ab 83       	std	Y+3, r26	; 0x03
    1176:	bc 83       	std	Y+4, r27	; 0x04

    if (number_to_print < 0)
    1178:	8d 81       	ldd	r24, Y+5	; 0x05
    117a:	9e 81       	ldd	r25, Y+6	; 0x06
    117c:	af 81       	ldd	r26, Y+7	; 0x07
    117e:	b8 85       	ldd	r27, Y+8	; 0x08
    1180:	bb 23       	and	r27, r27
    1182:	c4 f4       	brge	.+48     	; 0x11b4 <UnityPrintNumber+0x68>
    {
        /* A negative number, including MIN negative */
        UNITY_OUTPUT_CHAR('-');
    1184:	20 91 81 06 	lds	r18, 0x0681
    1188:	30 91 82 06 	lds	r19, 0x0682
    118c:	8d e2       	ldi	r24, 0x2D	; 45
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	b9 01       	movw	r22, r18
    1192:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
        number = (~number) + 1;
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	9a 81       	ldd	r25, Y+2	; 0x02
    119a:	ab 81       	ldd	r26, Y+3	; 0x03
    119c:	bc 81       	ldd	r27, Y+4	; 0x04
    119e:	b0 95       	com	r27
    11a0:	a0 95       	com	r26
    11a2:	90 95       	com	r25
    11a4:	81 95       	neg	r24
    11a6:	9f 4f       	sbci	r25, 0xFF	; 255
    11a8:	af 4f       	sbci	r26, 0xFF	; 255
    11aa:	bf 4f       	sbci	r27, 0xFF	; 255
    11ac:	89 83       	std	Y+1, r24	; 0x01
    11ae:	9a 83       	std	Y+2, r25	; 0x02
    11b0:	ab 83       	std	Y+3, r26	; 0x03
    11b2:	bc 83       	std	Y+4, r27	; 0x04
    }
    UnityPrintNumberUnsigned(number);
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	9a 81       	ldd	r25, Y+2	; 0x02
    11b8:	ab 81       	ldd	r26, Y+3	; 0x03
    11ba:	bc 81       	ldd	r27, Y+4	; 0x04
    11bc:	bc 01       	movw	r22, r24
    11be:	cd 01       	movw	r24, r26
    11c0:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <UnityPrintNumberUnsigned>
}
    11c4:	28 96       	adiw	r28, 0x08	; 8
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	f8 94       	cli
    11ca:	de bf       	out	0x3e, r29	; 62
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	cd bf       	out	0x3d, r28	; 61
    11d0:	cf 91       	pop	r28
    11d2:	df 91       	pop	r29
    11d4:	08 95       	ret

000011d6 <UnityPrintNumberUnsigned>:

/*-----------------------------------------------
 * basically do an itoa using as little ram as possible */
void UnityPrintNumberUnsigned(const UNITY_UINT number)
{
    11d6:	df 93       	push	r29
    11d8:	cf 93       	push	r28
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
    11de:	28 97       	sbiw	r28, 0x08	; 8
    11e0:	0f b6       	in	r0, 0x3f	; 63
    11e2:	f8 94       	cli
    11e4:	de bf       	out	0x3e, r29	; 62
    11e6:	0f be       	out	0x3f, r0	; 63
    11e8:	cd bf       	out	0x3d, r28	; 61
    11ea:	6d 83       	std	Y+5, r22	; 0x05
    11ec:	7e 83       	std	Y+6, r23	; 0x06
    11ee:	8f 83       	std	Y+7, r24	; 0x07
    11f0:	98 87       	std	Y+8, r25	; 0x08
    UNITY_UINT divisor = 1;
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	a0 e0       	ldi	r26, 0x00	; 0
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	89 83       	std	Y+1, r24	; 0x01
    11fc:	9a 83       	std	Y+2, r25	; 0x02
    11fe:	ab 83       	std	Y+3, r26	; 0x03
    1200:	bc 83       	std	Y+4, r27	; 0x04

    /* figure out initial divisor */
    while (number / divisor > 9)
    1202:	12 c0       	rjmp	.+36     	; 0x1228 <UnityPrintNumberUnsigned+0x52>
    {
        divisor *= 10;
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	9a 81       	ldd	r25, Y+2	; 0x02
    1208:	ab 81       	ldd	r26, Y+3	; 0x03
    120a:	bc 81       	ldd	r27, Y+4	; 0x04
    120c:	2a e0       	ldi	r18, 0x0A	; 10
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	40 e0       	ldi	r20, 0x00	; 0
    1212:	50 e0       	ldi	r21, 0x00	; 0
    1214:	bc 01       	movw	r22, r24
    1216:	cd 01       	movw	r24, r26
    1218:	0e 94 a5 28 	call	0x514a	; 0x514a <__mulsi3>
    121c:	dc 01       	movw	r26, r24
    121e:	cb 01       	movw	r24, r22
    1220:	89 83       	std	Y+1, r24	; 0x01
    1222:	9a 83       	std	Y+2, r25	; 0x02
    1224:	ab 83       	std	Y+3, r26	; 0x03
    1226:	bc 83       	std	Y+4, r27	; 0x04
void UnityPrintNumberUnsigned(const UNITY_UINT number)
{
    UNITY_UINT divisor = 1;

    /* figure out initial divisor */
    while (number / divisor > 9)
    1228:	8d 81       	ldd	r24, Y+5	; 0x05
    122a:	9e 81       	ldd	r25, Y+6	; 0x06
    122c:	af 81       	ldd	r26, Y+7	; 0x07
    122e:	b8 85       	ldd	r27, Y+8	; 0x08
    1230:	29 81       	ldd	r18, Y+1	; 0x01
    1232:	3a 81       	ldd	r19, Y+2	; 0x02
    1234:	4b 81       	ldd	r20, Y+3	; 0x03
    1236:	5c 81       	ldd	r21, Y+4	; 0x04
    1238:	bc 01       	movw	r22, r24
    123a:	cd 01       	movw	r24, r26
    123c:	0e 94 d7 28 	call	0x51ae	; 0x51ae <__udivmodsi4>
    1240:	da 01       	movw	r26, r20
    1242:	c9 01       	movw	r24, r18
    1244:	8a 30       	cpi	r24, 0x0A	; 10
    1246:	91 05       	cpc	r25, r1
    1248:	a1 05       	cpc	r26, r1
    124a:	b1 05       	cpc	r27, r1
    124c:	d8 f6       	brcc	.-74     	; 0x1204 <UnityPrintNumberUnsigned+0x2e>
    }

    /* now mod and print, then divide divisor */
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
    124e:	8d 81       	ldd	r24, Y+5	; 0x05
    1250:	9e 81       	ldd	r25, Y+6	; 0x06
    1252:	af 81       	ldd	r26, Y+7	; 0x07
    1254:	b8 85       	ldd	r27, Y+8	; 0x08
    1256:	29 81       	ldd	r18, Y+1	; 0x01
    1258:	3a 81       	ldd	r19, Y+2	; 0x02
    125a:	4b 81       	ldd	r20, Y+3	; 0x03
    125c:	5c 81       	ldd	r21, Y+4	; 0x04
    125e:	bc 01       	movw	r22, r24
    1260:	cd 01       	movw	r24, r26
    1262:	0e 94 d7 28 	call	0x51ae	; 0x51ae <__udivmodsi4>
    1266:	da 01       	movw	r26, r20
    1268:	c9 01       	movw	r24, r18
    126a:	2a e0       	ldi	r18, 0x0A	; 10
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	40 e0       	ldi	r20, 0x00	; 0
    1270:	50 e0       	ldi	r21, 0x00	; 0
    1272:	bc 01       	movw	r22, r24
    1274:	cd 01       	movw	r24, r26
    1276:	0e 94 d7 28 	call	0x51ae	; 0x51ae <__udivmodsi4>
    127a:	dc 01       	movw	r26, r24
    127c:	cb 01       	movw	r24, r22
    127e:	80 5d       	subi	r24, 0xD0	; 208
    1280:	88 2f       	mov	r24, r24
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	20 91 81 06 	lds	r18, 0x0681
    1288:	30 91 82 06 	lds	r19, 0x0682
    128c:	b9 01       	movw	r22, r18
    128e:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
        divisor /= 10;
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	9a 81       	ldd	r25, Y+2	; 0x02
    1296:	ab 81       	ldd	r26, Y+3	; 0x03
    1298:	bc 81       	ldd	r27, Y+4	; 0x04
    129a:	2a e0       	ldi	r18, 0x0A	; 10
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	40 e0       	ldi	r20, 0x00	; 0
    12a0:	50 e0       	ldi	r21, 0x00	; 0
    12a2:	bc 01       	movw	r22, r24
    12a4:	cd 01       	movw	r24, r26
    12a6:	0e 94 d7 28 	call	0x51ae	; 0x51ae <__udivmodsi4>
    12aa:	29 83       	std	Y+1, r18	; 0x01
    12ac:	3a 83       	std	Y+2, r19	; 0x02
    12ae:	4b 83       	std	Y+3, r20	; 0x03
    12b0:	5c 83       	std	Y+4, r21	; 0x04
    } while (divisor > 0);
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	9a 81       	ldd	r25, Y+2	; 0x02
    12b6:	ab 81       	ldd	r26, Y+3	; 0x03
    12b8:	bc 81       	ldd	r27, Y+4	; 0x04
    12ba:	00 97       	sbiw	r24, 0x00	; 0
    12bc:	a1 05       	cpc	r26, r1
    12be:	b1 05       	cpc	r27, r1
    12c0:	31 f6       	brne	.-116    	; 0x124e <UnityPrintNumberUnsigned+0x78>
}
    12c2:	28 96       	adiw	r28, 0x08	; 8
    12c4:	0f b6       	in	r0, 0x3f	; 63
    12c6:	f8 94       	cli
    12c8:	de bf       	out	0x3e, r29	; 62
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	cd bf       	out	0x3d, r28	; 61
    12ce:	cf 91       	pop	r28
    12d0:	df 91       	pop	r29
    12d2:	08 95       	ret

000012d4 <UnityPrintNumberHex>:

/*-----------------------------------------------*/
void UnityPrintNumberHex(const UNITY_UINT number, const char nibbles_to_print)
{
    12d4:	df 93       	push	r29
    12d6:	cf 93       	push	r28
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
    12dc:	28 97       	sbiw	r28, 0x08	; 8
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	f8 94       	cli
    12e2:	de bf       	out	0x3e, r29	; 62
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	cd bf       	out	0x3d, r28	; 61
    12e8:	6c 83       	std	Y+4, r22	; 0x04
    12ea:	7d 83       	std	Y+5, r23	; 0x05
    12ec:	8e 83       	std	Y+6, r24	; 0x06
    12ee:	9f 83       	std	Y+7, r25	; 0x07
    12f0:	48 87       	std	Y+8, r20	; 0x08
    int nibble;
    char nibbles = nibbles_to_print;
    12f2:	88 85       	ldd	r24, Y+8	; 0x08
    12f4:	89 83       	std	Y+1, r24	; 0x01

    if ((unsigned)nibbles > UNITY_MAX_NIBBLES)
    12f6:	89 81       	ldd	r24, Y+1	; 0x01
    12f8:	89 30       	cpi	r24, 0x09	; 9
    12fa:	d0 f1       	brcs	.+116    	; 0x1370 <UnityPrintNumberHex+0x9c>
    {
        nibbles = UNITY_MAX_NIBBLES;
    12fc:	88 e0       	ldi	r24, 0x08	; 8
    12fe:	89 83       	std	Y+1, r24	; 0x01
    }

    while (nibbles > 0)
    1300:	37 c0       	rjmp	.+110    	; 0x1370 <UnityPrintNumberHex+0x9c>
    {
        nibbles--;
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	81 50       	subi	r24, 0x01	; 1
    1306:	89 83       	std	Y+1, r24	; 0x01
        nibble = (int)(number >> (nibbles * 4)) & 0x0F;
    1308:	89 81       	ldd	r24, Y+1	; 0x01
    130a:	88 2f       	mov	r24, r24
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	9c 01       	movw	r18, r24
    1310:	22 0f       	add	r18, r18
    1312:	33 1f       	adc	r19, r19
    1314:	22 0f       	add	r18, r18
    1316:	33 1f       	adc	r19, r19
    1318:	8c 81       	ldd	r24, Y+4	; 0x04
    131a:	9d 81       	ldd	r25, Y+5	; 0x05
    131c:	ae 81       	ldd	r26, Y+6	; 0x06
    131e:	bf 81       	ldd	r27, Y+7	; 0x07
    1320:	02 2e       	mov	r0, r18
    1322:	04 c0       	rjmp	.+8      	; 0x132c <UnityPrintNumberHex+0x58>
    1324:	b6 95       	lsr	r27
    1326:	a7 95       	ror	r26
    1328:	97 95       	ror	r25
    132a:	87 95       	ror	r24
    132c:	0a 94       	dec	r0
    132e:	d2 f7       	brpl	.-12     	; 0x1324 <UnityPrintNumberHex+0x50>
    1330:	8f 70       	andi	r24, 0x0F	; 15
    1332:	90 70       	andi	r25, 0x00	; 0
    1334:	9b 83       	std	Y+3, r25	; 0x03
    1336:	8a 83       	std	Y+2, r24	; 0x02
        if (nibble <= 9)
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	9b 81       	ldd	r25, Y+3	; 0x03
    133c:	8a 30       	cpi	r24, 0x0A	; 10
    133e:	91 05       	cpc	r25, r1
    1340:	64 f4       	brge	.+24     	; 0x135a <UnityPrintNumberHex+0x86>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	80 5d       	subi	r24, 0xD0	; 208
    1346:	88 2f       	mov	r24, r24
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	20 91 81 06 	lds	r18, 0x0681
    134e:	30 91 82 06 	lds	r19, 0x0682
    1352:	b9 01       	movw	r22, r18
    1354:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
    1358:	0b c0       	rjmp	.+22     	; 0x1370 <UnityPrintNumberHex+0x9c>
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	89 5c       	subi	r24, 0xC9	; 201
    135e:	88 2f       	mov	r24, r24
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	20 91 81 06 	lds	r18, 0x0681
    1366:	30 91 82 06 	lds	r19, 0x0682
    136a:	b9 01       	movw	r22, r18
    136c:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
    if ((unsigned)nibbles > UNITY_MAX_NIBBLES)
    {
        nibbles = UNITY_MAX_NIBBLES;
    }

    while (nibbles > 0)
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	88 23       	and	r24, r24
    1374:	31 f6       	brne	.-116    	; 0x1302 <UnityPrintNumberHex+0x2e>
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
        }
    }
}
    1376:	28 96       	adiw	r28, 0x08	; 8
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	f8 94       	cli
    137c:	de bf       	out	0x3e, r29	; 62
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	cd bf       	out	0x3d, r28	; 61
    1382:	cf 91       	pop	r28
    1384:	df 91       	pop	r29
    1386:	08 95       	ret

00001388 <UnityPrintMask>:

/*-----------------------------------------------*/
void UnityPrintMask(const UNITY_UINT mask, const UNITY_UINT number)
{
    1388:	df 93       	push	r29
    138a:	cf 93       	push	r28
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
    1390:	60 97       	sbiw	r28, 0x10	; 16
    1392:	0f b6       	in	r0, 0x3f	; 63
    1394:	f8 94       	cli
    1396:	de bf       	out	0x3e, r29	; 62
    1398:	0f be       	out	0x3f, r0	; 63
    139a:	cd bf       	out	0x3d, r28	; 61
    139c:	69 87       	std	Y+9, r22	; 0x09
    139e:	7a 87       	std	Y+10, r23	; 0x0a
    13a0:	8b 87       	std	Y+11, r24	; 0x0b
    13a2:	9c 87       	std	Y+12, r25	; 0x0c
    13a4:	2d 87       	std	Y+13, r18	; 0x0d
    13a6:	3e 87       	std	Y+14, r19	; 0x0e
    13a8:	4f 87       	std	Y+15, r20	; 0x0f
    13aa:	58 8b       	std	Y+16, r21	; 0x10
    UNITY_UINT current_bit = (UNITY_UINT)1 << (UNITY_INT_WIDTH - 1);
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	90 e8       	ldi	r25, 0x80	; 128
    13b0:	a0 e0       	ldi	r26, 0x00	; 0
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	89 83       	std	Y+1, r24	; 0x01
    13b6:	9a 83       	std	Y+2, r25	; 0x02
    13b8:	ab 83       	std	Y+3, r26	; 0x03
    13ba:	bc 83       	std	Y+4, r27	; 0x04
    UNITY_INT32 i;

    for (i = 0; i < UNITY_INT_WIDTH; i++)
    13bc:	1d 82       	std	Y+5, r1	; 0x05
    13be:	1e 82       	std	Y+6, r1	; 0x06
    13c0:	1f 82       	std	Y+7, r1	; 0x07
    13c2:	18 86       	std	Y+8, r1	; 0x08
    13c4:	54 c0       	rjmp	.+168    	; 0x146e <UnityPrintMask+0xe6>
    {
        if (current_bit & mask)
    13c6:	29 81       	ldd	r18, Y+1	; 0x01
    13c8:	3a 81       	ldd	r19, Y+2	; 0x02
    13ca:	4b 81       	ldd	r20, Y+3	; 0x03
    13cc:	5c 81       	ldd	r21, Y+4	; 0x04
    13ce:	89 85       	ldd	r24, Y+9	; 0x09
    13d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d2:	ab 85       	ldd	r26, Y+11	; 0x0b
    13d4:	bc 85       	ldd	r27, Y+12	; 0x0c
    13d6:	82 23       	and	r24, r18
    13d8:	93 23       	and	r25, r19
    13da:	a4 23       	and	r26, r20
    13dc:	b5 23       	and	r27, r21
    13de:	00 97       	sbiw	r24, 0x00	; 0
    13e0:	a1 05       	cpc	r26, r1
    13e2:	b1 05       	cpc	r27, r1
    13e4:	21 f1       	breq	.+72     	; 0x142e <UnityPrintMask+0xa6>
        {
            if (current_bit & number)
    13e6:	29 81       	ldd	r18, Y+1	; 0x01
    13e8:	3a 81       	ldd	r19, Y+2	; 0x02
    13ea:	4b 81       	ldd	r20, Y+3	; 0x03
    13ec:	5c 81       	ldd	r21, Y+4	; 0x04
    13ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    13f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    13f2:	af 85       	ldd	r26, Y+15	; 0x0f
    13f4:	b8 89       	ldd	r27, Y+16	; 0x10
    13f6:	82 23       	and	r24, r18
    13f8:	93 23       	and	r25, r19
    13fa:	a4 23       	and	r26, r20
    13fc:	b5 23       	and	r27, r21
    13fe:	00 97       	sbiw	r24, 0x00	; 0
    1400:	a1 05       	cpc	r26, r1
    1402:	b1 05       	cpc	r27, r1
    1404:	51 f0       	breq	.+20     	; 0x141a <UnityPrintMask+0x92>
            {
                UNITY_OUTPUT_CHAR('1');
    1406:	20 91 81 06 	lds	r18, 0x0681
    140a:	30 91 82 06 	lds	r19, 0x0682
    140e:	81 e3       	ldi	r24, 0x31	; 49
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	b9 01       	movw	r22, r18
    1414:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
    1418:	13 c0       	rjmp	.+38     	; 0x1440 <UnityPrintMask+0xb8>
            }
            else
            {
                UNITY_OUTPUT_CHAR('0');
    141a:	20 91 81 06 	lds	r18, 0x0681
    141e:	30 91 82 06 	lds	r19, 0x0682
    1422:	80 e3       	ldi	r24, 0x30	; 48
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	b9 01       	movw	r22, r18
    1428:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
    142c:	09 c0       	rjmp	.+18     	; 0x1440 <UnityPrintMask+0xb8>
            }
        }
        else
        {
            UNITY_OUTPUT_CHAR('X');
    142e:	20 91 81 06 	lds	r18, 0x0681
    1432:	30 91 82 06 	lds	r19, 0x0682
    1436:	88 e5       	ldi	r24, 0x58	; 88
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	b9 01       	movw	r22, r18
    143c:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
        }
        current_bit = current_bit >> 1;
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	9a 81       	ldd	r25, Y+2	; 0x02
    1444:	ab 81       	ldd	r26, Y+3	; 0x03
    1446:	bc 81       	ldd	r27, Y+4	; 0x04
    1448:	b6 95       	lsr	r27
    144a:	a7 95       	ror	r26
    144c:	97 95       	ror	r25
    144e:	87 95       	ror	r24
    1450:	89 83       	std	Y+1, r24	; 0x01
    1452:	9a 83       	std	Y+2, r25	; 0x02
    1454:	ab 83       	std	Y+3, r26	; 0x03
    1456:	bc 83       	std	Y+4, r27	; 0x04
void UnityPrintMask(const UNITY_UINT mask, const UNITY_UINT number)
{
    UNITY_UINT current_bit = (UNITY_UINT)1 << (UNITY_INT_WIDTH - 1);
    UNITY_INT32 i;

    for (i = 0; i < UNITY_INT_WIDTH; i++)
    1458:	8d 81       	ldd	r24, Y+5	; 0x05
    145a:	9e 81       	ldd	r25, Y+6	; 0x06
    145c:	af 81       	ldd	r26, Y+7	; 0x07
    145e:	b8 85       	ldd	r27, Y+8	; 0x08
    1460:	01 96       	adiw	r24, 0x01	; 1
    1462:	a1 1d       	adc	r26, r1
    1464:	b1 1d       	adc	r27, r1
    1466:	8d 83       	std	Y+5, r24	; 0x05
    1468:	9e 83       	std	Y+6, r25	; 0x06
    146a:	af 83       	std	Y+7, r26	; 0x07
    146c:	b8 87       	std	Y+8, r27	; 0x08
    146e:	8d 81       	ldd	r24, Y+5	; 0x05
    1470:	9e 81       	ldd	r25, Y+6	; 0x06
    1472:	af 81       	ldd	r26, Y+7	; 0x07
    1474:	b8 85       	ldd	r27, Y+8	; 0x08
    1476:	80 31       	cpi	r24, 0x10	; 16
    1478:	91 05       	cpc	r25, r1
    147a:	a1 05       	cpc	r26, r1
    147c:	b1 05       	cpc	r27, r1
    147e:	0c f4       	brge	.+2      	; 0x1482 <UnityPrintMask+0xfa>
    1480:	a2 cf       	rjmp	.-188    	; 0x13c6 <UnityPrintMask+0x3e>
        {
            UNITY_OUTPUT_CHAR('X');
        }
        current_bit = current_bit >> 1;
    }
}
    1482:	60 96       	adiw	r28, 0x10	; 16
    1484:	0f b6       	in	r0, 0x3f	; 63
    1486:	f8 94       	cli
    1488:	de bf       	out	0x3e, r29	; 62
    148a:	0f be       	out	0x3f, r0	; 63
    148c:	cd bf       	out	0x3d, r28	; 61
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	08 95       	ret

00001494 <UnityPrintFloat>:
 * double-precision machine.  The 7th digit won't always be totally correct
 * in single-precision operation (for that level of accuracy, a more
 * complicated algorithm would be needed).
 */
void UnityPrintFloat(const UNITY_DOUBLE input_number)
{
    1494:	df 92       	push	r13
    1496:	ef 92       	push	r14
    1498:	ff 92       	push	r15
    149a:	0f 93       	push	r16
    149c:	1f 93       	push	r17
    149e:	df 93       	push	r29
    14a0:	cf 93       	push	r28
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
    14a6:	e2 97       	sbiw	r28, 0x32	; 50
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	f8 94       	cli
    14ac:	de bf       	out	0x3e, r29	; 62
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	cd bf       	out	0x3d, r28	; 61
    14b2:	6f a7       	std	Y+47, r22	; 0x2f
    14b4:	78 ab       	std	Y+48, r23	; 0x30
    14b6:	89 ab       	std	Y+49, r24	; 0x31
    14b8:	9a ab       	std	Y+50, r25	; 0x32
    static const int sig_digits = 7;
    static const UNITY_INT32 min_scaled = 1000000;
    static const UNITY_INT32 max_scaled = 10000000;
#endif

    UNITY_DOUBLE number = input_number;
    14ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    14bc:	98 a9       	ldd	r25, Y+48	; 0x30
    14be:	a9 a9       	ldd	r26, Y+49	; 0x31
    14c0:	ba a9       	ldd	r27, Y+50	; 0x32
    14c2:	89 83       	std	Y+1, r24	; 0x01
    14c4:	9a 83       	std	Y+2, r25	; 0x02
    14c6:	ab 83       	std	Y+3, r26	; 0x03
    14c8:	bc 83       	std	Y+4, r27	; 0x04

    /* print minus sign (including for negative zero) */
    if ((number < 0.0f) || ((number == 0.0f) && ((1.0f / number) < 0.0f)))
    14ca:	11 e0       	ldi	r17, 0x01	; 1
    14cc:	69 81       	ldd	r22, Y+1	; 0x01
    14ce:	7a 81       	ldd	r23, Y+2	; 0x02
    14d0:	8b 81       	ldd	r24, Y+3	; 0x03
    14d2:	9c 81       	ldd	r25, Y+4	; 0x04
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	a9 01       	movw	r20, r18
    14da:	0e 94 ef 26 	call	0x4dde	; 0x4dde <__cmpsf2>
    14de:	88 23       	and	r24, r24
    14e0:	0c f0       	brlt	.+2      	; 0x14e4 <UnityPrintFloat+0x50>
    14e2:	10 e0       	ldi	r17, 0x00	; 0
    14e4:	11 23       	and	r17, r17
    14e6:	21 f5       	brne	.+72     	; 0x1530 <UnityPrintFloat+0x9c>
    14e8:	69 81       	ldd	r22, Y+1	; 0x01
    14ea:	7a 81       	ldd	r23, Y+2	; 0x02
    14ec:	8b 81       	ldd	r24, Y+3	; 0x03
    14ee:	9c 81       	ldd	r25, Y+4	; 0x04
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	a9 01       	movw	r20, r18
    14f6:	0e 94 ef 26 	call	0x4dde	; 0x4dde <__cmpsf2>
    14fa:	88 23       	and	r24, r24
    14fc:	59 f5       	brne	.+86     	; 0x1554 <UnityPrintFloat+0xc0>
    14fe:	60 e0       	ldi	r22, 0x00	; 0
    1500:	70 e0       	ldi	r23, 0x00	; 0
    1502:	80 e8       	ldi	r24, 0x80	; 128
    1504:	9f e3       	ldi	r25, 0x3F	; 63
    1506:	29 81       	ldd	r18, Y+1	; 0x01
    1508:	3a 81       	ldd	r19, Y+2	; 0x02
    150a:	4b 81       	ldd	r20, Y+3	; 0x03
    150c:	5c 81       	ldd	r21, Y+4	; 0x04
    150e:	0e 94 f3 26 	call	0x4de6	; 0x4de6 <__divsf3>
    1512:	dc 01       	movw	r26, r24
    1514:	cb 01       	movw	r24, r22
    1516:	11 e0       	ldi	r17, 0x01	; 1
    1518:	bc 01       	movw	r22, r24
    151a:	cd 01       	movw	r24, r26
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	a9 01       	movw	r20, r18
    1522:	0e 94 ef 26 	call	0x4dde	; 0x4dde <__cmpsf2>
    1526:	88 23       	and	r24, r24
    1528:	0c f0       	brlt	.+2      	; 0x152c <UnityPrintFloat+0x98>
    152a:	10 e0       	ldi	r17, 0x00	; 0
    152c:	11 23       	and	r17, r17
    152e:	91 f0       	breq	.+36     	; 0x1554 <UnityPrintFloat+0xc0>
    {
        UNITY_OUTPUT_CHAR('-');
    1530:	20 91 81 06 	lds	r18, 0x0681
    1534:	30 91 82 06 	lds	r19, 0x0682
    1538:	8d e2       	ldi	r24, 0x2D	; 45
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	b9 01       	movw	r22, r18
    153e:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
        number = -number;
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	9a 81       	ldd	r25, Y+2	; 0x02
    1546:	ab 81       	ldd	r26, Y+3	; 0x03
    1548:	bc 81       	ldd	r27, Y+4	; 0x04
    154a:	b0 58       	subi	r27, 0x80	; 128
    154c:	89 83       	std	Y+1, r24	; 0x01
    154e:	9a 83       	std	Y+2, r25	; 0x02
    1550:	ab 83       	std	Y+3, r26	; 0x03
    1552:	bc 83       	std	Y+4, r27	; 0x04
    }

    /* handle zero, NaN, and +/- infinity */
    if (number == 0.0f)
    1554:	69 81       	ldd	r22, Y+1	; 0x01
    1556:	7a 81       	ldd	r23, Y+2	; 0x02
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	9c 81       	ldd	r25, Y+4	; 0x04
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	a9 01       	movw	r20, r18
    1562:	0e 94 ef 26 	call	0x4dde	; 0x4dde <__cmpsf2>
    1566:	88 23       	and	r24, r24
    1568:	29 f4       	brne	.+10     	; 0x1574 <UnityPrintFloat+0xe0>
    {
        UnityPrint("0");
    156a:	81 e2       	ldi	r24, 0x21	; 33
    156c:	95 e0       	ldi	r25, 0x05	; 5
    156e:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
    1572:	d4 c3       	rjmp	.+1960   	; 0x1d1c <UnityPrintFloat+0x888>
    }
    else if (isnan(number))
    1574:	69 81       	ldd	r22, Y+1	; 0x01
    1576:	7a 81       	ldd	r23, Y+2	; 0x02
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	9c 81       	ldd	r25, Y+4	; 0x04
    157c:	29 81       	ldd	r18, Y+1	; 0x01
    157e:	3a 81       	ldd	r19, Y+2	; 0x02
    1580:	4b 81       	ldd	r20, Y+3	; 0x03
    1582:	5c 81       	ldd	r21, Y+4	; 0x04
    1584:	0e 94 ef 26 	call	0x4dde	; 0x4dde <__cmpsf2>
    1588:	88 23       	and	r24, r24
    158a:	29 f0       	breq	.+10     	; 0x1596 <UnityPrintFloat+0x102>
    {
        UnityPrint("nan");
    158c:	83 e2       	ldi	r24, 0x23	; 35
    158e:	95 e0       	ldi	r25, 0x05	; 5
    1590:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
    1594:	c3 c3       	rjmp	.+1926   	; 0x1d1c <UnityPrintFloat+0x888>
    }
    else if (isinf(number))
    1596:	69 81       	ldd	r22, Y+1	; 0x01
    1598:	7a 81       	ldd	r23, Y+2	; 0x02
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	9c 81       	ldd	r25, Y+4	; 0x04
    159e:	29 81       	ldd	r18, Y+1	; 0x01
    15a0:	3a 81       	ldd	r19, Y+2	; 0x02
    15a2:	4b 81       	ldd	r20, Y+3	; 0x03
    15a4:	5c 81       	ldd	r21, Y+4	; 0x04
    15a6:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <__subsf3>
    15aa:	dc 01       	movw	r26, r24
    15ac:	cb 01       	movw	r24, r22
    15ae:	7c 01       	movw	r14, r24
    15b0:	8d 01       	movw	r16, r26
    15b2:	69 81       	ldd	r22, Y+1	; 0x01
    15b4:	7a 81       	ldd	r23, Y+2	; 0x02
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ba:	29 81       	ldd	r18, Y+1	; 0x01
    15bc:	3a 81       	ldd	r19, Y+2	; 0x02
    15be:	4b 81       	ldd	r20, Y+3	; 0x03
    15c0:	5c 81       	ldd	r21, Y+4	; 0x04
    15c2:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <__subsf3>
    15c6:	dc 01       	movw	r26, r24
    15c8:	cb 01       	movw	r24, r22
    15ca:	9c 01       	movw	r18, r24
    15cc:	ad 01       	movw	r20, r26
    15ce:	c8 01       	movw	r24, r16
    15d0:	b7 01       	movw	r22, r14
    15d2:	0e 94 ef 26 	call	0x4dde	; 0x4dde <__cmpsf2>
    15d6:	88 23       	and	r24, r24
    15d8:	b9 f0       	breq	.+46     	; 0x1608 <UnityPrintFloat+0x174>
    15da:	11 e0       	ldi	r17, 0x01	; 1
    15dc:	69 81       	ldd	r22, Y+1	; 0x01
    15de:	7a 81       	ldd	r23, Y+2	; 0x02
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	9c 81       	ldd	r25, Y+4	; 0x04
    15e4:	29 81       	ldd	r18, Y+1	; 0x01
    15e6:	3a 81       	ldd	r19, Y+2	; 0x02
    15e8:	4b 81       	ldd	r20, Y+3	; 0x03
    15ea:	5c 81       	ldd	r21, Y+4	; 0x04
    15ec:	0e 94 ef 26 	call	0x4dde	; 0x4dde <__cmpsf2>
    15f0:	88 23       	and	r24, r24
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <UnityPrintFloat+0x162>
    15f4:	10 e0       	ldi	r17, 0x00	; 0
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	81 27       	eor	r24, r17
    15fa:	88 23       	and	r24, r24
    15fc:	29 f0       	breq	.+10     	; 0x1608 <UnityPrintFloat+0x174>
    {
        UnityPrint("inf");
    15fe:	87 e2       	ldi	r24, 0x27	; 39
    1600:	95 e0       	ldi	r25, 0x05	; 5
    1602:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
    1606:	8a c3       	rjmp	.+1812   	; 0x1d1c <UnityPrintFloat+0x888>
    }
    else
    {
        UNITY_INT32 n_int = 0, n;
    1608:	1d 82       	std	Y+5, r1	; 0x05
    160a:	1e 82       	std	Y+6, r1	; 0x06
    160c:	1f 82       	std	Y+7, r1	; 0x07
    160e:	18 86       	std	Y+8, r1	; 0x08
        int exponent = 0;
    1610:	1e 86       	std	Y+14, r1	; 0x0e
    1612:	1d 86       	std	Y+13, r1	; 0x0d
        int decimals, digits;
        char buf[16] = {0};
    1614:	20 e1       	ldi	r18, 0x10	; 16
    1616:	ce 01       	movw	r24, r28
    1618:	4f 96       	adiw	r24, 0x1f	; 31
    161a:	fc 01       	movw	r30, r24
    161c:	32 2f       	mov	r19, r18
    161e:	11 92       	st	Z+, r1
    1620:	3a 95       	dec	r19
    1622:	e9 f7       	brne	.-6      	; 0x161e <UnityPrintFloat+0x18a>
         * start with a factor/divisor of 10^10, which is the largest
         * power of 10 that can be represented exactly.  Finally, compute
         * (exactly) the remaining power of 10 and perform one more
         * multiplication or division.
         */
        if (number < 1.0f)
    1624:	11 e0       	ldi	r17, 0x01	; 1
    1626:	69 81       	ldd	r22, Y+1	; 0x01
    1628:	7a 81       	ldd	r23, Y+2	; 0x02
    162a:	8b 81       	ldd	r24, Y+3	; 0x03
    162c:	9c 81       	ldd	r25, Y+4	; 0x04
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	40 e8       	ldi	r20, 0x80	; 128
    1634:	5f e3       	ldi	r21, 0x3F	; 63
    1636:	0e 94 ef 26 	call	0x4dde	; 0x4dde <__cmpsf2>
    163a:	88 23       	and	r24, r24
    163c:	0c f0       	brlt	.+2      	; 0x1640 <UnityPrintFloat+0x1ac>
    163e:	10 e0       	ldi	r17, 0x00	; 0
    1640:	11 23       	and	r17, r17
    1642:	09 f4       	brne	.+2      	; 0x1646 <UnityPrintFloat+0x1b2>
    1644:	92 c0       	rjmp	.+292    	; 0x176a <UnityPrintFloat+0x2d6>
        {
            UNITY_DOUBLE factor = 1.0f;
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	a0 e8       	ldi	r26, 0x80	; 128
    164c:	bf e3       	ldi	r27, 0x3F	; 63
    164e:	8b 8b       	std	Y+19, r24	; 0x13
    1650:	9c 8b       	std	Y+20, r25	; 0x14
    1652:	ad 8b       	std	Y+21, r26	; 0x15
    1654:	be 8b       	std	Y+22, r27	; 0x16

            while (number < (UNITY_DOUBLE)max_scaled / 1e10f)  { number *= 1e10f; exponent -= 10; }
    1656:	15 c0       	rjmp	.+42     	; 0x1682 <UnityPrintFloat+0x1ee>
    1658:	69 81       	ldd	r22, Y+1	; 0x01
    165a:	7a 81       	ldd	r23, Y+2	; 0x02
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	9c 81       	ldd	r25, Y+4	; 0x04
    1660:	29 ef       	ldi	r18, 0xF9	; 249
    1662:	32 e0       	ldi	r19, 0x02	; 2
    1664:	45 e1       	ldi	r20, 0x15	; 21
    1666:	50 e5       	ldi	r21, 0x50	; 80
    1668:	0e 94 42 28 	call	0x5084	; 0x5084 <__mulsf3>
    166c:	dc 01       	movw	r26, r24
    166e:	cb 01       	movw	r24, r22
    1670:	89 83       	std	Y+1, r24	; 0x01
    1672:	9a 83       	std	Y+2, r25	; 0x02
    1674:	ab 83       	std	Y+3, r26	; 0x03
    1676:	bc 83       	std	Y+4, r27	; 0x04
    1678:	8d 85       	ldd	r24, Y+13	; 0x0d
    167a:	9e 85       	ldd	r25, Y+14	; 0x0e
    167c:	0a 97       	sbiw	r24, 0x0a	; 10
    167e:	9e 87       	std	Y+14, r25	; 0x0e
    1680:	8d 87       	std	Y+13, r24	; 0x0d
    1682:	80 91 38 05 	lds	r24, 0x0538
    1686:	90 91 39 05 	lds	r25, 0x0539
    168a:	a0 91 3a 05 	lds	r26, 0x053A
    168e:	b0 91 3b 05 	lds	r27, 0x053B
    1692:	bc 01       	movw	r22, r24
    1694:	cd 01       	movw	r24, r26
    1696:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <__floatsisf>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	bc 01       	movw	r22, r24
    16a0:	cd 01       	movw	r24, r26
    16a2:	29 ef       	ldi	r18, 0xF9	; 249
    16a4:	32 e0       	ldi	r19, 0x02	; 2
    16a6:	45 e1       	ldi	r20, 0x15	; 21
    16a8:	50 e5       	ldi	r21, 0x50	; 80
    16aa:	0e 94 f3 26 	call	0x4de6	; 0x4de6 <__divsf3>
    16ae:	dc 01       	movw	r26, r24
    16b0:	cb 01       	movw	r24, r22
    16b2:	11 e0       	ldi	r17, 0x01	; 1
    16b4:	bc 01       	movw	r22, r24
    16b6:	cd 01       	movw	r24, r26
    16b8:	29 81       	ldd	r18, Y+1	; 0x01
    16ba:	3a 81       	ldd	r19, Y+2	; 0x02
    16bc:	4b 81       	ldd	r20, Y+3	; 0x03
    16be:	5c 81       	ldd	r21, Y+4	; 0x04
    16c0:	0e 94 3e 28 	call	0x507c	; 0x507c <__gesf2>
    16c4:	18 16       	cp	r1, r24
    16c6:	0c f0       	brlt	.+2      	; 0x16ca <UnityPrintFloat+0x236>
    16c8:	10 e0       	ldi	r17, 0x00	; 0
    16ca:	11 23       	and	r17, r17
    16cc:	29 f6       	brne	.-118    	; 0x1658 <UnityPrintFloat+0x1c4>
            while (number * factor < (UNITY_DOUBLE)min_scaled) { factor *= 10.0f; exponent--; }
    16ce:	15 c0       	rjmp	.+42     	; 0x16fa <UnityPrintFloat+0x266>
    16d0:	6b 89       	ldd	r22, Y+19	; 0x13
    16d2:	7c 89       	ldd	r23, Y+20	; 0x14
    16d4:	8d 89       	ldd	r24, Y+21	; 0x15
    16d6:	9e 89       	ldd	r25, Y+22	; 0x16
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	40 e2       	ldi	r20, 0x20	; 32
    16de:	51 e4       	ldi	r21, 0x41	; 65
    16e0:	0e 94 42 28 	call	0x5084	; 0x5084 <__mulsf3>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	8b 8b       	std	Y+19, r24	; 0x13
    16ea:	9c 8b       	std	Y+20, r25	; 0x14
    16ec:	ad 8b       	std	Y+21, r26	; 0x15
    16ee:	be 8b       	std	Y+22, r27	; 0x16
    16f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f4:	01 97       	sbiw	r24, 0x01	; 1
    16f6:	9e 87       	std	Y+14, r25	; 0x0e
    16f8:	8d 87       	std	Y+13, r24	; 0x0d
    16fa:	69 81       	ldd	r22, Y+1	; 0x01
    16fc:	7a 81       	ldd	r23, Y+2	; 0x02
    16fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1700:	9c 81       	ldd	r25, Y+4	; 0x04
    1702:	2b 89       	ldd	r18, Y+19	; 0x13
    1704:	3c 89       	ldd	r19, Y+20	; 0x14
    1706:	4d 89       	ldd	r20, Y+21	; 0x15
    1708:	5e 89       	ldd	r21, Y+22	; 0x16
    170a:	0e 94 42 28 	call	0x5084	; 0x5084 <__mulsf3>
    170e:	dc 01       	movw	r26, r24
    1710:	cb 01       	movw	r24, r22
    1712:	7c 01       	movw	r14, r24
    1714:	8d 01       	movw	r16, r26
    1716:	80 91 3c 05 	lds	r24, 0x053C
    171a:	90 91 3d 05 	lds	r25, 0x053D
    171e:	a0 91 3e 05 	lds	r26, 0x053E
    1722:	b0 91 3f 05 	lds	r27, 0x053F
    1726:	bc 01       	movw	r22, r24
    1728:	cd 01       	movw	r24, r26
    172a:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <__floatsisf>
    172e:	9b 01       	movw	r18, r22
    1730:	ac 01       	movw	r20, r24
    1732:	dd 24       	eor	r13, r13
    1734:	d3 94       	inc	r13
    1736:	c8 01       	movw	r24, r16
    1738:	b7 01       	movw	r22, r14
    173a:	0e 94 ef 26 	call	0x4dde	; 0x4dde <__cmpsf2>
    173e:	88 23       	and	r24, r24
    1740:	0c f0       	brlt	.+2      	; 0x1744 <UnityPrintFloat+0x2b0>
    1742:	dd 24       	eor	r13, r13
    1744:	dd 20       	and	r13, r13
    1746:	21 f6       	brne	.-120    	; 0x16d0 <UnityPrintFloat+0x23c>

            number *= factor;
    1748:	69 81       	ldd	r22, Y+1	; 0x01
    174a:	7a 81       	ldd	r23, Y+2	; 0x02
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	9c 81       	ldd	r25, Y+4	; 0x04
    1750:	2b 89       	ldd	r18, Y+19	; 0x13
    1752:	3c 89       	ldd	r19, Y+20	; 0x14
    1754:	4d 89       	ldd	r20, Y+21	; 0x15
    1756:	5e 89       	ldd	r21, Y+22	; 0x16
    1758:	0e 94 42 28 	call	0x5084	; 0x5084 <__mulsf3>
    175c:	dc 01       	movw	r26, r24
    175e:	cb 01       	movw	r24, r22
    1760:	89 83       	std	Y+1, r24	; 0x01
    1762:	9a 83       	std	Y+2, r25	; 0x02
    1764:	ab 83       	std	Y+3, r26	; 0x03
    1766:	bc 83       	std	Y+4, r27	; 0x04
    1768:	20 c1       	rjmp	.+576    	; 0x19aa <UnityPrintFloat+0x516>
        }
        else if (number > (UNITY_DOUBLE)max_scaled)
    176a:	80 91 38 05 	lds	r24, 0x0538
    176e:	90 91 39 05 	lds	r25, 0x0539
    1772:	a0 91 3a 05 	lds	r26, 0x053A
    1776:	b0 91 3b 05 	lds	r27, 0x053B
    177a:	bc 01       	movw	r22, r24
    177c:	cd 01       	movw	r24, r26
    177e:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <__floatsisf>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	11 e0       	ldi	r17, 0x01	; 1
    1788:	bc 01       	movw	r22, r24
    178a:	cd 01       	movw	r24, r26
    178c:	29 81       	ldd	r18, Y+1	; 0x01
    178e:	3a 81       	ldd	r19, Y+2	; 0x02
    1790:	4b 81       	ldd	r20, Y+3	; 0x03
    1792:	5c 81       	ldd	r21, Y+4	; 0x04
    1794:	0e 94 ef 26 	call	0x4dde	; 0x4dde <__cmpsf2>
    1798:	88 23       	and	r24, r24
    179a:	0c f0       	brlt	.+2      	; 0x179e <UnityPrintFloat+0x30a>
    179c:	10 e0       	ldi	r17, 0x00	; 0
    179e:	11 23       	and	r17, r17
    17a0:	09 f4       	brne	.+2      	; 0x17a4 <UnityPrintFloat+0x310>
    17a2:	92 c0       	rjmp	.+292    	; 0x18c8 <UnityPrintFloat+0x434>
        {
            UNITY_DOUBLE divisor = 1.0f;
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	a0 e8       	ldi	r26, 0x80	; 128
    17aa:	bf e3       	ldi	r27, 0x3F	; 63
    17ac:	8f 8b       	std	Y+23, r24	; 0x17
    17ae:	98 8f       	std	Y+24, r25	; 0x18
    17b0:	a9 8f       	std	Y+25, r26	; 0x19
    17b2:	ba 8f       	std	Y+26, r27	; 0x1a

            while (number > (UNITY_DOUBLE)min_scaled * 1e10f)   { number  /= 1e10f; exponent += 10; }
    17b4:	15 c0       	rjmp	.+42     	; 0x17e0 <UnityPrintFloat+0x34c>
    17b6:	69 81       	ldd	r22, Y+1	; 0x01
    17b8:	7a 81       	ldd	r23, Y+2	; 0x02
    17ba:	8b 81       	ldd	r24, Y+3	; 0x03
    17bc:	9c 81       	ldd	r25, Y+4	; 0x04
    17be:	29 ef       	ldi	r18, 0xF9	; 249
    17c0:	32 e0       	ldi	r19, 0x02	; 2
    17c2:	45 e1       	ldi	r20, 0x15	; 21
    17c4:	50 e5       	ldi	r21, 0x50	; 80
    17c6:	0e 94 f3 26 	call	0x4de6	; 0x4de6 <__divsf3>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	89 83       	std	Y+1, r24	; 0x01
    17d0:	9a 83       	std	Y+2, r25	; 0x02
    17d2:	ab 83       	std	Y+3, r26	; 0x03
    17d4:	bc 83       	std	Y+4, r27	; 0x04
    17d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    17d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    17da:	0a 96       	adiw	r24, 0x0a	; 10
    17dc:	9e 87       	std	Y+14, r25	; 0x0e
    17de:	8d 87       	std	Y+13, r24	; 0x0d
    17e0:	80 91 3c 05 	lds	r24, 0x053C
    17e4:	90 91 3d 05 	lds	r25, 0x053D
    17e8:	a0 91 3e 05 	lds	r26, 0x053E
    17ec:	b0 91 3f 05 	lds	r27, 0x053F
    17f0:	bc 01       	movw	r22, r24
    17f2:	cd 01       	movw	r24, r26
    17f4:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <__floatsisf>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	bc 01       	movw	r22, r24
    17fe:	cd 01       	movw	r24, r26
    1800:	29 ef       	ldi	r18, 0xF9	; 249
    1802:	32 e0       	ldi	r19, 0x02	; 2
    1804:	45 e1       	ldi	r20, 0x15	; 21
    1806:	50 e5       	ldi	r21, 0x50	; 80
    1808:	0e 94 42 28 	call	0x5084	; 0x5084 <__mulsf3>
    180c:	dc 01       	movw	r26, r24
    180e:	cb 01       	movw	r24, r22
    1810:	11 e0       	ldi	r17, 0x01	; 1
    1812:	bc 01       	movw	r22, r24
    1814:	cd 01       	movw	r24, r26
    1816:	29 81       	ldd	r18, Y+1	; 0x01
    1818:	3a 81       	ldd	r19, Y+2	; 0x02
    181a:	4b 81       	ldd	r20, Y+3	; 0x03
    181c:	5c 81       	ldd	r21, Y+4	; 0x04
    181e:	0e 94 ef 26 	call	0x4dde	; 0x4dde <__cmpsf2>
    1822:	88 23       	and	r24, r24
    1824:	0c f0       	brlt	.+2      	; 0x1828 <UnityPrintFloat+0x394>
    1826:	10 e0       	ldi	r17, 0x00	; 0
    1828:	11 23       	and	r17, r17
    182a:	29 f6       	brne	.-118    	; 0x17b6 <UnityPrintFloat+0x322>
            while (number / divisor > (UNITY_DOUBLE)max_scaled) { divisor *= 10.0f; exponent++; }
    182c:	15 c0       	rjmp	.+42     	; 0x1858 <UnityPrintFloat+0x3c4>
    182e:	6f 89       	ldd	r22, Y+23	; 0x17
    1830:	78 8d       	ldd	r23, Y+24	; 0x18
    1832:	89 8d       	ldd	r24, Y+25	; 0x19
    1834:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	40 e2       	ldi	r20, 0x20	; 32
    183c:	51 e4       	ldi	r21, 0x41	; 65
    183e:	0e 94 42 28 	call	0x5084	; 0x5084 <__mulsf3>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	8f 8b       	std	Y+23, r24	; 0x17
    1848:	98 8f       	std	Y+24, r25	; 0x18
    184a:	a9 8f       	std	Y+25, r26	; 0x19
    184c:	ba 8f       	std	Y+26, r27	; 0x1a
    184e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1850:	9e 85       	ldd	r25, Y+14	; 0x0e
    1852:	01 96       	adiw	r24, 0x01	; 1
    1854:	9e 87       	std	Y+14, r25	; 0x0e
    1856:	8d 87       	std	Y+13, r24	; 0x0d
    1858:	69 81       	ldd	r22, Y+1	; 0x01
    185a:	7a 81       	ldd	r23, Y+2	; 0x02
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	9c 81       	ldd	r25, Y+4	; 0x04
    1860:	2f 89       	ldd	r18, Y+23	; 0x17
    1862:	38 8d       	ldd	r19, Y+24	; 0x18
    1864:	49 8d       	ldd	r20, Y+25	; 0x19
    1866:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1868:	0e 94 f3 26 	call	0x4de6	; 0x4de6 <__divsf3>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	7c 01       	movw	r14, r24
    1872:	8d 01       	movw	r16, r26
    1874:	80 91 38 05 	lds	r24, 0x0538
    1878:	90 91 39 05 	lds	r25, 0x0539
    187c:	a0 91 3a 05 	lds	r26, 0x053A
    1880:	b0 91 3b 05 	lds	r27, 0x053B
    1884:	bc 01       	movw	r22, r24
    1886:	cd 01       	movw	r24, r26
    1888:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <__floatsisf>
    188c:	9b 01       	movw	r18, r22
    188e:	ac 01       	movw	r20, r24
    1890:	dd 24       	eor	r13, r13
    1892:	d3 94       	inc	r13
    1894:	c8 01       	movw	r24, r16
    1896:	b7 01       	movw	r22, r14
    1898:	0e 94 3e 28 	call	0x507c	; 0x507c <__gesf2>
    189c:	18 16       	cp	r1, r24
    189e:	0c f0       	brlt	.+2      	; 0x18a2 <UnityPrintFloat+0x40e>
    18a0:	dd 24       	eor	r13, r13
    18a2:	dd 20       	and	r13, r13
    18a4:	21 f6       	brne	.-120    	; 0x182e <UnityPrintFloat+0x39a>

            number /= divisor;
    18a6:	69 81       	ldd	r22, Y+1	; 0x01
    18a8:	7a 81       	ldd	r23, Y+2	; 0x02
    18aa:	8b 81       	ldd	r24, Y+3	; 0x03
    18ac:	9c 81       	ldd	r25, Y+4	; 0x04
    18ae:	2f 89       	ldd	r18, Y+23	; 0x17
    18b0:	38 8d       	ldd	r19, Y+24	; 0x18
    18b2:	49 8d       	ldd	r20, Y+25	; 0x19
    18b4:	5a 8d       	ldd	r21, Y+26	; 0x1a
    18b6:	0e 94 f3 26 	call	0x4de6	; 0x4de6 <__divsf3>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	89 83       	std	Y+1, r24	; 0x01
    18c0:	9a 83       	std	Y+2, r25	; 0x02
    18c2:	ab 83       	std	Y+3, r26	; 0x03
    18c4:	bc 83       	std	Y+4, r27	; 0x04
    18c6:	71 c0       	rjmp	.+226    	; 0x19aa <UnityPrintFloat+0x516>
            /*
             * In this range, we can split off the integer part before
             * doing any multiplications.  This reduces rounding error by
             * freeing up significant bits in the fractional part.
             */
            UNITY_DOUBLE factor = 1.0f;
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	a0 e8       	ldi	r26, 0x80	; 128
    18ce:	bf e3       	ldi	r27, 0x3F	; 63
    18d0:	8b 8f       	std	Y+27, r24	; 0x1b
    18d2:	9c 8f       	std	Y+28, r25	; 0x1c
    18d4:	ad 8f       	std	Y+29, r26	; 0x1d
    18d6:	be 8f       	std	Y+30, r27	; 0x1e
            n_int = (UNITY_INT32)number;
    18d8:	69 81       	ldd	r22, Y+1	; 0x01
    18da:	7a 81       	ldd	r23, Y+2	; 0x02
    18dc:	8b 81       	ldd	r24, Y+3	; 0x03
    18de:	9c 81       	ldd	r25, Y+4	; 0x04
    18e0:	0e 94 5b 27 	call	0x4eb6	; 0x4eb6 <__fixsfsi>
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	8d 83       	std	Y+5, r24	; 0x05
    18ea:	9e 83       	std	Y+6, r25	; 0x06
    18ec:	af 83       	std	Y+7, r26	; 0x07
    18ee:	b8 87       	std	Y+8, r27	; 0x08
            number -= (UNITY_DOUBLE)n_int;
    18f0:	6d 81       	ldd	r22, Y+5	; 0x05
    18f2:	7e 81       	ldd	r23, Y+6	; 0x06
    18f4:	8f 81       	ldd	r24, Y+7	; 0x07
    18f6:	98 85       	ldd	r25, Y+8	; 0x08
    18f8:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <__floatsisf>
    18fc:	9b 01       	movw	r18, r22
    18fe:	ac 01       	movw	r20, r24
    1900:	69 81       	ldd	r22, Y+1	; 0x01
    1902:	7a 81       	ldd	r23, Y+2	; 0x02
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	9c 81       	ldd	r25, Y+4	; 0x04
    1908:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <__subsf3>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	89 83       	std	Y+1, r24	; 0x01
    1912:	9a 83       	std	Y+2, r25	; 0x02
    1914:	ab 83       	std	Y+3, r26	; 0x03
    1916:	bc 83       	std	Y+4, r27	; 0x04

            while (n_int < min_scaled) { n_int *= 10; factor *= 10.0f; exponent--; }
    1918:	27 c0       	rjmp	.+78     	; 0x1968 <UnityPrintFloat+0x4d4>
    191a:	8d 81       	ldd	r24, Y+5	; 0x05
    191c:	9e 81       	ldd	r25, Y+6	; 0x06
    191e:	af 81       	ldd	r26, Y+7	; 0x07
    1920:	b8 85       	ldd	r27, Y+8	; 0x08
    1922:	2a e0       	ldi	r18, 0x0A	; 10
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	40 e0       	ldi	r20, 0x00	; 0
    1928:	50 e0       	ldi	r21, 0x00	; 0
    192a:	bc 01       	movw	r22, r24
    192c:	cd 01       	movw	r24, r26
    192e:	0e 94 a5 28 	call	0x514a	; 0x514a <__mulsi3>
    1932:	dc 01       	movw	r26, r24
    1934:	cb 01       	movw	r24, r22
    1936:	8d 83       	std	Y+5, r24	; 0x05
    1938:	9e 83       	std	Y+6, r25	; 0x06
    193a:	af 83       	std	Y+7, r26	; 0x07
    193c:	b8 87       	std	Y+8, r27	; 0x08
    193e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1940:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1942:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1944:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	40 e2       	ldi	r20, 0x20	; 32
    194c:	51 e4       	ldi	r21, 0x41	; 65
    194e:	0e 94 42 28 	call	0x5084	; 0x5084 <__mulsf3>
    1952:	dc 01       	movw	r26, r24
    1954:	cb 01       	movw	r24, r22
    1956:	8b 8f       	std	Y+27, r24	; 0x1b
    1958:	9c 8f       	std	Y+28, r25	; 0x1c
    195a:	ad 8f       	std	Y+29, r26	; 0x1d
    195c:	be 8f       	std	Y+30, r27	; 0x1e
    195e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1960:	9e 85       	ldd	r25, Y+14	; 0x0e
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	9e 87       	std	Y+14, r25	; 0x0e
    1966:	8d 87       	std	Y+13, r24	; 0x0d
    1968:	80 91 3c 05 	lds	r24, 0x053C
    196c:	90 91 3d 05 	lds	r25, 0x053D
    1970:	a0 91 3e 05 	lds	r26, 0x053E
    1974:	b0 91 3f 05 	lds	r27, 0x053F
    1978:	2d 81       	ldd	r18, Y+5	; 0x05
    197a:	3e 81       	ldd	r19, Y+6	; 0x06
    197c:	4f 81       	ldd	r20, Y+7	; 0x07
    197e:	58 85       	ldd	r21, Y+8	; 0x08
    1980:	28 17       	cp	r18, r24
    1982:	39 07       	cpc	r19, r25
    1984:	4a 07       	cpc	r20, r26
    1986:	5b 07       	cpc	r21, r27
    1988:	44 f2       	brlt	.-112    	; 0x191a <UnityPrintFloat+0x486>

            number *= factor;
    198a:	69 81       	ldd	r22, Y+1	; 0x01
    198c:	7a 81       	ldd	r23, Y+2	; 0x02
    198e:	8b 81       	ldd	r24, Y+3	; 0x03
    1990:	9c 81       	ldd	r25, Y+4	; 0x04
    1992:	2b 8d       	ldd	r18, Y+27	; 0x1b
    1994:	3c 8d       	ldd	r19, Y+28	; 0x1c
    1996:	4d 8d       	ldd	r20, Y+29	; 0x1d
    1998:	5e 8d       	ldd	r21, Y+30	; 0x1e
    199a:	0e 94 42 28 	call	0x5084	; 0x5084 <__mulsf3>
    199e:	dc 01       	movw	r26, r24
    19a0:	cb 01       	movw	r24, r22
    19a2:	89 83       	std	Y+1, r24	; 0x01
    19a4:	9a 83       	std	Y+2, r25	; 0x02
    19a6:	ab 83       	std	Y+3, r26	; 0x03
    19a8:	bc 83       	std	Y+4, r27	; 0x04
        }

        /* round to nearest integer */
        n = ((UNITY_INT32)(number + number) + 1) / 2;
    19aa:	29 81       	ldd	r18, Y+1	; 0x01
    19ac:	3a 81       	ldd	r19, Y+2	; 0x02
    19ae:	4b 81       	ldd	r20, Y+3	; 0x03
    19b0:	5c 81       	ldd	r21, Y+4	; 0x04
    19b2:	ca 01       	movw	r24, r20
    19b4:	b9 01       	movw	r22, r18
    19b6:	0e 94 8b 26 	call	0x4d16	; 0x4d16 <__addsf3>
    19ba:	dc 01       	movw	r26, r24
    19bc:	cb 01       	movw	r24, r22
    19be:	bc 01       	movw	r22, r24
    19c0:	cd 01       	movw	r24, r26
    19c2:	0e 94 5b 27 	call	0x4eb6	; 0x4eb6 <__fixsfsi>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	01 96       	adiw	r24, 0x01	; 1
    19cc:	a1 1d       	adc	r26, r1
    19ce:	b1 1d       	adc	r27, r1
    19d0:	22 e0       	ldi	r18, 0x02	; 2
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	40 e0       	ldi	r20, 0x00	; 0
    19d6:	50 e0       	ldi	r21, 0x00	; 0
    19d8:	bc 01       	movw	r22, r24
    19da:	cd 01       	movw	r24, r26
    19dc:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__divmodsi4>
    19e0:	29 87       	std	Y+9, r18	; 0x09
    19e2:	3a 87       	std	Y+10, r19	; 0x0a
    19e4:	4b 87       	std	Y+11, r20	; 0x0b
    19e6:	5c 87       	std	Y+12, r21	; 0x0c

#ifndef UNITY_ROUND_TIES_AWAY_FROM_ZERO
        /* round to even if exactly between two integers */
        if ((n & 1) && (((UNITY_DOUBLE)n - number) == 0.5f))
    19e8:	89 85       	ldd	r24, Y+9	; 0x09
    19ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ec:	81 70       	andi	r24, 0x01	; 1
    19ee:	90 70       	andi	r25, 0x00	; 0
    19f0:	88 23       	and	r24, r24
    19f2:	39 f1       	breq	.+78     	; 0x1a42 <UnityPrintFloat+0x5ae>
    19f4:	69 85       	ldd	r22, Y+9	; 0x09
    19f6:	7a 85       	ldd	r23, Y+10	; 0x0a
    19f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    19fa:	9c 85       	ldd	r25, Y+12	; 0x0c
    19fc:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <__floatsisf>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	bc 01       	movw	r22, r24
    1a06:	cd 01       	movw	r24, r26
    1a08:	29 81       	ldd	r18, Y+1	; 0x01
    1a0a:	3a 81       	ldd	r19, Y+2	; 0x02
    1a0c:	4b 81       	ldd	r20, Y+3	; 0x03
    1a0e:	5c 81       	ldd	r21, Y+4	; 0x04
    1a10:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <__subsf3>
    1a14:	dc 01       	movw	r26, r24
    1a16:	cb 01       	movw	r24, r22
    1a18:	bc 01       	movw	r22, r24
    1a1a:	cd 01       	movw	r24, r26
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	40 e0       	ldi	r20, 0x00	; 0
    1a22:	5f e3       	ldi	r21, 0x3F	; 63
    1a24:	0e 94 ef 26 	call	0x4dde	; 0x4dde <__cmpsf2>
    1a28:	88 23       	and	r24, r24
    1a2a:	59 f4       	brne	.+22     	; 0x1a42 <UnityPrintFloat+0x5ae>
            n--;
    1a2c:	89 85       	ldd	r24, Y+9	; 0x09
    1a2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a30:	ab 85       	ldd	r26, Y+11	; 0x0b
    1a32:	bc 85       	ldd	r27, Y+12	; 0x0c
    1a34:	01 97       	sbiw	r24, 0x01	; 1
    1a36:	a1 09       	sbc	r26, r1
    1a38:	b1 09       	sbc	r27, r1
    1a3a:	89 87       	std	Y+9, r24	; 0x09
    1a3c:	9a 87       	std	Y+10, r25	; 0x0a
    1a3e:	ab 87       	std	Y+11, r26	; 0x0b
    1a40:	bc 87       	std	Y+12, r27	; 0x0c
#endif

        n += n_int;
    1a42:	29 85       	ldd	r18, Y+9	; 0x09
    1a44:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a46:	4b 85       	ldd	r20, Y+11	; 0x0b
    1a48:	5c 85       	ldd	r21, Y+12	; 0x0c
    1a4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a4e:	af 81       	ldd	r26, Y+7	; 0x07
    1a50:	b8 85       	ldd	r27, Y+8	; 0x08
    1a52:	82 0f       	add	r24, r18
    1a54:	93 1f       	adc	r25, r19
    1a56:	a4 1f       	adc	r26, r20
    1a58:	b5 1f       	adc	r27, r21
    1a5a:	89 87       	std	Y+9, r24	; 0x09
    1a5c:	9a 87       	std	Y+10, r25	; 0x0a
    1a5e:	ab 87       	std	Y+11, r26	; 0x0b
    1a60:	bc 87       	std	Y+12, r27	; 0x0c

        if (n >= max_scaled)
    1a62:	80 91 38 05 	lds	r24, 0x0538
    1a66:	90 91 39 05 	lds	r25, 0x0539
    1a6a:	a0 91 3a 05 	lds	r26, 0x053A
    1a6e:	b0 91 3b 05 	lds	r27, 0x053B
    1a72:	29 85       	ldd	r18, Y+9	; 0x09
    1a74:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a76:	4b 85       	ldd	r20, Y+11	; 0x0b
    1a78:	5c 85       	ldd	r21, Y+12	; 0x0c
    1a7a:	28 17       	cp	r18, r24
    1a7c:	39 07       	cpc	r19, r25
    1a7e:	4a 07       	cpc	r20, r26
    1a80:	5b 07       	cpc	r21, r27
    1a82:	8c f0       	brlt	.+34     	; 0x1aa6 <UnityPrintFloat+0x612>
        {
            n = min_scaled;
    1a84:	80 91 3c 05 	lds	r24, 0x053C
    1a88:	90 91 3d 05 	lds	r25, 0x053D
    1a8c:	a0 91 3e 05 	lds	r26, 0x053E
    1a90:	b0 91 3f 05 	lds	r27, 0x053F
    1a94:	89 87       	std	Y+9, r24	; 0x09
    1a96:	9a 87       	std	Y+10, r25	; 0x0a
    1a98:	ab 87       	std	Y+11, r26	; 0x0b
    1a9a:	bc 87       	std	Y+12, r27	; 0x0c
            exponent++;
    1a9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aa0:	01 96       	adiw	r24, 0x01	; 1
    1aa2:	9e 87       	std	Y+14, r25	; 0x0e
    1aa4:	8d 87       	std	Y+13, r24	; 0x0d
        }

        /* determine where to place decimal point */
        decimals = ((exponent <= 0) && (exponent >= -(sig_digits + 3))) ? (-exponent) : (sig_digits - 1);
    1aa6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aa8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aaa:	18 16       	cp	r1, r24
    1aac:	19 06       	cpc	r1, r25
    1aae:	9c f0       	brlt	.+38     	; 0x1ad6 <UnityPrintFloat+0x642>
    1ab0:	80 91 40 05 	lds	r24, 0x0540
    1ab4:	90 91 41 05 	lds	r25, 0x0541
    1ab8:	2d ef       	ldi	r18, 0xFD	; 253
    1aba:	3f ef       	ldi	r19, 0xFF	; 255
    1abc:	28 1b       	sub	r18, r24
    1abe:	39 0b       	sbc	r19, r25
    1ac0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ac2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ac4:	82 17       	cp	r24, r18
    1ac6:	93 07       	cpc	r25, r19
    1ac8:	34 f0       	brlt	.+12     	; 0x1ad6 <UnityPrintFloat+0x642>
    1aca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1acc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ace:	90 95       	com	r25
    1ad0:	81 95       	neg	r24
    1ad2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad4:	05 c0       	rjmp	.+10     	; 0x1ae0 <UnityPrintFloat+0x64c>
    1ad6:	80 91 40 05 	lds	r24, 0x0540
    1ada:	90 91 41 05 	lds	r25, 0x0541
    1ade:	01 97       	sbiw	r24, 0x01	; 1
    1ae0:	98 8b       	std	Y+16, r25	; 0x10
    1ae2:	8f 87       	std	Y+15, r24	; 0x0f
        exponent += decimals;
    1ae4:	2d 85       	ldd	r18, Y+13	; 0x0d
    1ae6:	3e 85       	ldd	r19, Y+14	; 0x0e
    1ae8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aea:	98 89       	ldd	r25, Y+16	; 0x10
    1aec:	82 0f       	add	r24, r18
    1aee:	93 1f       	adc	r25, r19
    1af0:	9e 87       	std	Y+14, r25	; 0x0e
    1af2:	8d 87       	std	Y+13, r24	; 0x0d

        /* truncate trailing zeroes after decimal point */
        while ((decimals > 0) && ((n % 10) == 0))
    1af4:	15 c0       	rjmp	.+42     	; 0x1b20 <UnityPrintFloat+0x68c>
        {
            n /= 10;
    1af6:	89 85       	ldd	r24, Y+9	; 0x09
    1af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afa:	ab 85       	ldd	r26, Y+11	; 0x0b
    1afc:	bc 85       	ldd	r27, Y+12	; 0x0c
    1afe:	2a e0       	ldi	r18, 0x0A	; 10
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	40 e0       	ldi	r20, 0x00	; 0
    1b04:	50 e0       	ldi	r21, 0x00	; 0
    1b06:	bc 01       	movw	r22, r24
    1b08:	cd 01       	movw	r24, r26
    1b0a:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__divmodsi4>
    1b0e:	29 87       	std	Y+9, r18	; 0x09
    1b10:	3a 87       	std	Y+10, r19	; 0x0a
    1b12:	4b 87       	std	Y+11, r20	; 0x0b
    1b14:	5c 87       	std	Y+12, r21	; 0x0c
            decimals--;
    1b16:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b18:	98 89       	ldd	r25, Y+16	; 0x10
    1b1a:	01 97       	sbiw	r24, 0x01	; 1
    1b1c:	98 8b       	std	Y+16, r25	; 0x10
    1b1e:	8f 87       	std	Y+15, r24	; 0x0f
        /* determine where to place decimal point */
        decimals = ((exponent <= 0) && (exponent >= -(sig_digits + 3))) ? (-exponent) : (sig_digits - 1);
        exponent += decimals;

        /* truncate trailing zeroes after decimal point */
        while ((decimals > 0) && ((n % 10) == 0))
    1b20:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b22:	98 89       	ldd	r25, Y+16	; 0x10
    1b24:	18 16       	cp	r1, r24
    1b26:	19 06       	cpc	r1, r25
    1b28:	94 f4       	brge	.+36     	; 0x1b4e <UnityPrintFloat+0x6ba>
    1b2a:	89 85       	ldd	r24, Y+9	; 0x09
    1b2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b2e:	ab 85       	ldd	r26, Y+11	; 0x0b
    1b30:	bc 85       	ldd	r27, Y+12	; 0x0c
    1b32:	2a e0       	ldi	r18, 0x0A	; 10
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	40 e0       	ldi	r20, 0x00	; 0
    1b38:	50 e0       	ldi	r21, 0x00	; 0
    1b3a:	bc 01       	movw	r22, r24
    1b3c:	cd 01       	movw	r24, r26
    1b3e:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__divmodsi4>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	00 97       	sbiw	r24, 0x00	; 0
    1b48:	a1 05       	cpc	r26, r1
    1b4a:	b1 05       	cpc	r27, r1
    1b4c:	a1 f2       	breq	.-88     	; 0x1af6 <UnityPrintFloat+0x662>
            n /= 10;
            decimals--;
        }

        /* build up buffer in reverse order */
        digits = 0;
    1b4e:	1a 8a       	std	Y+18, r1	; 0x12
    1b50:	19 8a       	std	Y+17, r1	; 0x11
        while ((n != 0) || (digits < (decimals + 1)))
    1b52:	2e c0       	rjmp	.+92     	; 0x1bb0 <UnityPrintFloat+0x71c>
        {
            buf[digits++] = (char)('0' + n % 10);
    1b54:	89 85       	ldd	r24, Y+9	; 0x09
    1b56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b58:	ab 85       	ldd	r26, Y+11	; 0x0b
    1b5a:	bc 85       	ldd	r27, Y+12	; 0x0c
    1b5c:	2a e0       	ldi	r18, 0x0A	; 10
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	40 e0       	ldi	r20, 0x00	; 0
    1b62:	50 e0       	ldi	r21, 0x00	; 0
    1b64:	bc 01       	movw	r22, r24
    1b66:	cd 01       	movw	r24, r26
    1b68:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__divmodsi4>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	48 2f       	mov	r20, r24
    1b72:	40 5d       	subi	r20, 0xD0	; 208
    1b74:	9e 01       	movw	r18, r28
    1b76:	21 5e       	subi	r18, 0xE1	; 225
    1b78:	3f 4f       	sbci	r19, 0xFF	; 255
    1b7a:	89 89       	ldd	r24, Y+17	; 0x11
    1b7c:	9a 89       	ldd	r25, Y+18	; 0x12
    1b7e:	82 0f       	add	r24, r18
    1b80:	93 1f       	adc	r25, r19
    1b82:	fc 01       	movw	r30, r24
    1b84:	40 83       	st	Z, r20
    1b86:	89 89       	ldd	r24, Y+17	; 0x11
    1b88:	9a 89       	ldd	r25, Y+18	; 0x12
    1b8a:	01 96       	adiw	r24, 0x01	; 1
    1b8c:	9a 8b       	std	Y+18, r25	; 0x12
    1b8e:	89 8b       	std	Y+17, r24	; 0x11
            n /= 10;
    1b90:	89 85       	ldd	r24, Y+9	; 0x09
    1b92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b94:	ab 85       	ldd	r26, Y+11	; 0x0b
    1b96:	bc 85       	ldd	r27, Y+12	; 0x0c
    1b98:	2a e0       	ldi	r18, 0x0A	; 10
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	40 e0       	ldi	r20, 0x00	; 0
    1b9e:	50 e0       	ldi	r21, 0x00	; 0
    1ba0:	bc 01       	movw	r22, r24
    1ba2:	cd 01       	movw	r24, r26
    1ba4:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__divmodsi4>
    1ba8:	29 87       	std	Y+9, r18	; 0x09
    1baa:	3a 87       	std	Y+10, r19	; 0x0a
    1bac:	4b 87       	std	Y+11, r20	; 0x0b
    1bae:	5c 87       	std	Y+12, r21	; 0x0c
            decimals--;
        }

        /* build up buffer in reverse order */
        digits = 0;
        while ((n != 0) || (digits < (decimals + 1)))
    1bb0:	89 85       	ldd	r24, Y+9	; 0x09
    1bb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb4:	ab 85       	ldd	r26, Y+11	; 0x0b
    1bb6:	bc 85       	ldd	r27, Y+12	; 0x0c
    1bb8:	00 97       	sbiw	r24, 0x00	; 0
    1bba:	a1 05       	cpc	r26, r1
    1bbc:	b1 05       	cpc	r27, r1
    1bbe:	51 f6       	brne	.-108    	; 0x1b54 <UnityPrintFloat+0x6c0>
    1bc0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bc2:	98 89       	ldd	r25, Y+16	; 0x10
    1bc4:	9c 01       	movw	r18, r24
    1bc6:	2f 5f       	subi	r18, 0xFF	; 255
    1bc8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bca:	89 89       	ldd	r24, Y+17	; 0x11
    1bcc:	9a 89       	ldd	r25, Y+18	; 0x12
    1bce:	82 17       	cp	r24, r18
    1bd0:	93 07       	cpc	r25, r19
    1bd2:	0c f4       	brge	.+2      	; 0x1bd6 <UnityPrintFloat+0x742>
    1bd4:	bf cf       	rjmp	.-130    	; 0x1b54 <UnityPrintFloat+0x6c0>
        {
            buf[digits++] = (char)('0' + n % 10);
            n /= 10;
        }
        while (digits > 0)
    1bd6:	27 c0       	rjmp	.+78     	; 0x1c26 <UnityPrintFloat+0x792>
        {
            if (digits == decimals) { UNITY_OUTPUT_CHAR('.'); }
    1bd8:	29 89       	ldd	r18, Y+17	; 0x11
    1bda:	3a 89       	ldd	r19, Y+18	; 0x12
    1bdc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bde:	98 89       	ldd	r25, Y+16	; 0x10
    1be0:	28 17       	cp	r18, r24
    1be2:	39 07       	cpc	r19, r25
    1be4:	49 f4       	brne	.+18     	; 0x1bf8 <UnityPrintFloat+0x764>
    1be6:	20 91 81 06 	lds	r18, 0x0681
    1bea:	30 91 82 06 	lds	r19, 0x0682
    1bee:	8e e2       	ldi	r24, 0x2E	; 46
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	b9 01       	movw	r22, r18
    1bf4:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
            UNITY_OUTPUT_CHAR(buf[--digits]);
    1bf8:	89 89       	ldd	r24, Y+17	; 0x11
    1bfa:	9a 89       	ldd	r25, Y+18	; 0x12
    1bfc:	01 97       	sbiw	r24, 0x01	; 1
    1bfe:	9a 8b       	std	Y+18, r25	; 0x12
    1c00:	89 8b       	std	Y+17, r24	; 0x11
    1c02:	9e 01       	movw	r18, r28
    1c04:	21 5e       	subi	r18, 0xE1	; 225
    1c06:	3f 4f       	sbci	r19, 0xFF	; 255
    1c08:	89 89       	ldd	r24, Y+17	; 0x11
    1c0a:	9a 89       	ldd	r25, Y+18	; 0x12
    1c0c:	82 0f       	add	r24, r18
    1c0e:	93 1f       	adc	r25, r19
    1c10:	fc 01       	movw	r30, r24
    1c12:	80 81       	ld	r24, Z
    1c14:	88 2f       	mov	r24, r24
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	20 91 81 06 	lds	r18, 0x0681
    1c1c:	30 91 82 06 	lds	r19, 0x0682
    1c20:	b9 01       	movw	r22, r18
    1c22:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
        while ((n != 0) || (digits < (decimals + 1)))
        {
            buf[digits++] = (char)('0' + n % 10);
            n /= 10;
        }
        while (digits > 0)
    1c26:	89 89       	ldd	r24, Y+17	; 0x11
    1c28:	9a 89       	ldd	r25, Y+18	; 0x12
    1c2a:	18 16       	cp	r1, r24
    1c2c:	19 06       	cpc	r1, r25
    1c2e:	a4 f2       	brlt	.-88     	; 0x1bd8 <UnityPrintFloat+0x744>
            if (digits == decimals) { UNITY_OUTPUT_CHAR('.'); }
            UNITY_OUTPUT_CHAR(buf[--digits]);
        }

        /* print exponent if needed */
        if (exponent != 0)
    1c30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c32:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c34:	00 97       	sbiw	r24, 0x00	; 0
    1c36:	09 f4       	brne	.+2      	; 0x1c3a <UnityPrintFloat+0x7a6>
    1c38:	71 c0       	rjmp	.+226    	; 0x1d1c <UnityPrintFloat+0x888>
        {
            UNITY_OUTPUT_CHAR('e');
    1c3a:	20 91 81 06 	lds	r18, 0x0681
    1c3e:	30 91 82 06 	lds	r19, 0x0682
    1c42:	85 e6       	ldi	r24, 0x65	; 101
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	b9 01       	movw	r22, r18
    1c48:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>

            if (exponent < 0)
    1c4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c50:	99 23       	and	r25, r25
    1c52:	8c f4       	brge	.+34     	; 0x1c76 <UnityPrintFloat+0x7e2>
            {
                UNITY_OUTPUT_CHAR('-');
    1c54:	20 91 81 06 	lds	r18, 0x0681
    1c58:	30 91 82 06 	lds	r19, 0x0682
    1c5c:	8d e2       	ldi	r24, 0x2D	; 45
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	b9 01       	movw	r22, r18
    1c62:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
                exponent = -exponent;
    1c66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c6a:	90 95       	com	r25
    1c6c:	81 95       	neg	r24
    1c6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c70:	9e 87       	std	Y+14, r25	; 0x0e
    1c72:	8d 87       	std	Y+13, r24	; 0x0d
    1c74:	09 c0       	rjmp	.+18     	; 0x1c88 <UnityPrintFloat+0x7f4>
            }
            else
            {
                UNITY_OUTPUT_CHAR('+');
    1c76:	20 91 81 06 	lds	r18, 0x0681
    1c7a:	30 91 82 06 	lds	r19, 0x0682
    1c7e:	8b e2       	ldi	r24, 0x2B	; 43
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	b9 01       	movw	r22, r18
    1c84:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
            }

            digits = 0;
    1c88:	1a 8a       	std	Y+18, r1	; 0x12
    1c8a:	19 8a       	std	Y+17, r1	; 0x11
            while ((exponent != 0) || (digits < 2))
    1c8c:	21 c0       	rjmp	.+66     	; 0x1cd0 <UnityPrintFloat+0x83c>
            {
                buf[digits++] = (char)('0' + exponent % 10);
    1c8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c92:	2a e0       	ldi	r18, 0x0A	; 10
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	b9 01       	movw	r22, r18
    1c98:	0e 94 c4 28 	call	0x5188	; 0x5188 <__divmodhi4>
    1c9c:	48 2f       	mov	r20, r24
    1c9e:	40 5d       	subi	r20, 0xD0	; 208
    1ca0:	9e 01       	movw	r18, r28
    1ca2:	21 5e       	subi	r18, 0xE1	; 225
    1ca4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca6:	89 89       	ldd	r24, Y+17	; 0x11
    1ca8:	9a 89       	ldd	r25, Y+18	; 0x12
    1caa:	82 0f       	add	r24, r18
    1cac:	93 1f       	adc	r25, r19
    1cae:	fc 01       	movw	r30, r24
    1cb0:	40 83       	st	Z, r20
    1cb2:	89 89       	ldd	r24, Y+17	; 0x11
    1cb4:	9a 89       	ldd	r25, Y+18	; 0x12
    1cb6:	01 96       	adiw	r24, 0x01	; 1
    1cb8:	9a 8b       	std	Y+18, r25	; 0x12
    1cba:	89 8b       	std	Y+17, r24	; 0x11
                exponent /= 10;
    1cbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cc0:	2a e0       	ldi	r18, 0x0A	; 10
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	b9 01       	movw	r22, r18
    1cc6:	0e 94 c4 28 	call	0x5188	; 0x5188 <__divmodhi4>
    1cca:	9b 01       	movw	r18, r22
    1ccc:	3e 87       	std	Y+14, r19	; 0x0e
    1cce:	2d 87       	std	Y+13, r18	; 0x0d
            {
                UNITY_OUTPUT_CHAR('+');
            }

            digits = 0;
            while ((exponent != 0) || (digits < 2))
    1cd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cd4:	00 97       	sbiw	r24, 0x00	; 0
    1cd6:	d9 f6       	brne	.-74     	; 0x1c8e <UnityPrintFloat+0x7fa>
    1cd8:	89 89       	ldd	r24, Y+17	; 0x11
    1cda:	9a 89       	ldd	r25, Y+18	; 0x12
    1cdc:	82 30       	cpi	r24, 0x02	; 2
    1cde:	91 05       	cpc	r25, r1
    1ce0:	b4 f2       	brlt	.-84     	; 0x1c8e <UnityPrintFloat+0x7fa>
            {
                buf[digits++] = (char)('0' + exponent % 10);
                exponent /= 10;
            }
            while (digits > 0)
    1ce2:	17 c0       	rjmp	.+46     	; 0x1d12 <UnityPrintFloat+0x87e>
            {
                UNITY_OUTPUT_CHAR(buf[--digits]);
    1ce4:	89 89       	ldd	r24, Y+17	; 0x11
    1ce6:	9a 89       	ldd	r25, Y+18	; 0x12
    1ce8:	01 97       	sbiw	r24, 0x01	; 1
    1cea:	9a 8b       	std	Y+18, r25	; 0x12
    1cec:	89 8b       	std	Y+17, r24	; 0x11
    1cee:	9e 01       	movw	r18, r28
    1cf0:	21 5e       	subi	r18, 0xE1	; 225
    1cf2:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf4:	89 89       	ldd	r24, Y+17	; 0x11
    1cf6:	9a 89       	ldd	r25, Y+18	; 0x12
    1cf8:	82 0f       	add	r24, r18
    1cfa:	93 1f       	adc	r25, r19
    1cfc:	fc 01       	movw	r30, r24
    1cfe:	80 81       	ld	r24, Z
    1d00:	88 2f       	mov	r24, r24
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	20 91 81 06 	lds	r18, 0x0681
    1d08:	30 91 82 06 	lds	r19, 0x0682
    1d0c:	b9 01       	movw	r22, r18
    1d0e:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
            while ((exponent != 0) || (digits < 2))
            {
                buf[digits++] = (char)('0' + exponent % 10);
                exponent /= 10;
            }
            while (digits > 0)
    1d12:	89 89       	ldd	r24, Y+17	; 0x11
    1d14:	9a 89       	ldd	r25, Y+18	; 0x12
    1d16:	18 16       	cp	r1, r24
    1d18:	19 06       	cpc	r1, r25
    1d1a:	24 f3       	brlt	.-56     	; 0x1ce4 <UnityPrintFloat+0x850>
            {
                UNITY_OUTPUT_CHAR(buf[--digits]);
            }
        }
    }
}
    1d1c:	e2 96       	adiw	r28, 0x32	; 50
    1d1e:	0f b6       	in	r0, 0x3f	; 63
    1d20:	f8 94       	cli
    1d22:	de bf       	out	0x3e, r29	; 62
    1d24:	0f be       	out	0x3f, r0	; 63
    1d26:	cd bf       	out	0x3d, r28	; 61
    1d28:	cf 91       	pop	r28
    1d2a:	df 91       	pop	r29
    1d2c:	1f 91       	pop	r17
    1d2e:	0f 91       	pop	r16
    1d30:	ff 90       	pop	r15
    1d32:	ef 90       	pop	r14
    1d34:	df 90       	pop	r13
    1d36:	08 95       	ret

00001d38 <UnityTestResultsBegin>:
#endif /* ! UNITY_EXCLUDE_FLOAT_PRINT */

/*-----------------------------------------------*/
static void UnityTestResultsBegin(const char* file, const UNITY_LINE_TYPE line)
{
    1d38:	df 93       	push	r29
    1d3a:	cf 93       	push	r28
    1d3c:	00 d0       	rcall	.+0      	; 0x1d3e <UnityTestResultsBegin+0x6>
    1d3e:	00 d0       	rcall	.+0      	; 0x1d40 <UnityTestResultsBegin+0x8>
    1d40:	00 d0       	rcall	.+0      	; 0x1d42 <UnityTestResultsBegin+0xa>
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
    1d46:	9a 83       	std	Y+2, r25	; 0x02
    1d48:	89 83       	std	Y+1, r24	; 0x01
    1d4a:	4b 83       	std	Y+3, r20	; 0x03
    1d4c:	5c 83       	std	Y+4, r21	; 0x04
    1d4e:	6d 83       	std	Y+5, r22	; 0x05
    1d50:	7e 83       	std	Y+6, r23	; 0x06
    UnityPrint(file);
    1d52:	89 81       	ldd	r24, Y+1	; 0x01
    1d54:	9a 81       	ldd	r25, Y+2	; 0x02
    1d56:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
    UNITY_OUTPUT_CHAR(':');
    1d5a:	20 91 81 06 	lds	r18, 0x0681
    1d5e:	30 91 82 06 	lds	r19, 0x0682
    1d62:	8a e3       	ldi	r24, 0x3A	; 58
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	b9 01       	movw	r22, r18
    1d68:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
    UnityPrintNumber((UNITY_INT)line);
    1d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d70:	ad 81       	ldd	r26, Y+5	; 0x05
    1d72:	be 81       	ldd	r27, Y+6	; 0x06
    1d74:	bc 01       	movw	r22, r24
    1d76:	cd 01       	movw	r24, r26
    1d78:	0e 94 a6 08 	call	0x114c	; 0x114c <UnityPrintNumber>
    UNITY_OUTPUT_CHAR(':');
    1d7c:	20 91 81 06 	lds	r18, 0x0681
    1d80:	30 91 82 06 	lds	r19, 0x0682
    1d84:	8a e3       	ldi	r24, 0x3A	; 58
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	b9 01       	movw	r22, r18
    1d8a:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
    UnityPrint(Unity.CurrentTestName);
    1d8e:	80 91 4a 06 	lds	r24, 0x064A
    1d92:	90 91 4b 06 	lds	r25, 0x064B
    1d96:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
    UNITY_OUTPUT_CHAR(':');
    1d9a:	20 91 81 06 	lds	r18, 0x0681
    1d9e:	30 91 82 06 	lds	r19, 0x0682
    1da2:	8a e3       	ldi	r24, 0x3A	; 58
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	b9 01       	movw	r22, r18
    1da8:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
}
    1dac:	26 96       	adiw	r28, 0x06	; 6
    1dae:	0f b6       	in	r0, 0x3f	; 63
    1db0:	f8 94       	cli
    1db2:	de bf       	out	0x3e, r29	; 62
    1db4:	0f be       	out	0x3f, r0	; 63
    1db6:	cd bf       	out	0x3d, r28	; 61
    1db8:	cf 91       	pop	r28
    1dba:	df 91       	pop	r29
    1dbc:	08 95       	ret

00001dbe <UnityTestResultsFailBegin>:

/*-----------------------------------------------*/
static void UnityTestResultsFailBegin(const UNITY_LINE_TYPE line)
{
    1dbe:	df 93       	push	r29
    1dc0:	cf 93       	push	r28
    1dc2:	00 d0       	rcall	.+0      	; 0x1dc4 <UnityTestResultsFailBegin+0x6>
    1dc4:	00 d0       	rcall	.+0      	; 0x1dc6 <UnityTestResultsFailBegin+0x8>
    1dc6:	cd b7       	in	r28, 0x3d	; 61
    1dc8:	de b7       	in	r29, 0x3e	; 62
    1dca:	69 83       	std	Y+1, r22	; 0x01
    1dcc:	7a 83       	std	Y+2, r23	; 0x02
    1dce:	8b 83       	std	Y+3, r24	; 0x03
    1dd0:	9c 83       	std	Y+4, r25	; 0x04
    UnityTestResultsBegin(Unity.TestFile, line);
    1dd2:	80 91 48 06 	lds	r24, 0x0648
    1dd6:	90 91 49 06 	lds	r25, 0x0649
    1dda:	29 81       	ldd	r18, Y+1	; 0x01
    1ddc:	3a 81       	ldd	r19, Y+2	; 0x02
    1dde:	4b 81       	ldd	r20, Y+3	; 0x03
    1de0:	5c 81       	ldd	r21, Y+4	; 0x04
    1de2:	ba 01       	movw	r22, r20
    1de4:	a9 01       	movw	r20, r18
    1de6:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <UnityTestResultsBegin>
    UnityPrint(UnityStrFail);
    1dea:	83 e1       	ldi	r24, 0x13	; 19
    1dec:	93 e0       	ldi	r25, 0x03	; 3
    1dee:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
    UNITY_OUTPUT_CHAR(':');
    1df2:	20 91 81 06 	lds	r18, 0x0681
    1df6:	30 91 82 06 	lds	r19, 0x0682
    1dfa:	8a e3       	ldi	r24, 0x3A	; 58
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	b9 01       	movw	r22, r18
    1e00:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
}
    1e04:	0f 90       	pop	r0
    1e06:	0f 90       	pop	r0
    1e08:	0f 90       	pop	r0
    1e0a:	0f 90       	pop	r0
    1e0c:	cf 91       	pop	r28
    1e0e:	df 91       	pop	r29
    1e10:	08 95       	ret

00001e12 <UnityConcludeTest>:

/*-----------------------------------------------*/
void UnityConcludeTest(void)
{
    1e12:	df 93       	push	r29
    1e14:	cf 93       	push	r28
    1e16:	cd b7       	in	r28, 0x3d	; 61
    1e18:	de b7       	in	r29, 0x3e	; 62
    if (Unity.CurrentTestIgnored)
    1e1a:	80 91 64 06 	lds	r24, 0x0664
    1e1e:	90 91 65 06 	lds	r25, 0x0665
    1e22:	a0 91 66 06 	lds	r26, 0x0666
    1e26:	b0 91 67 06 	lds	r27, 0x0667
    1e2a:	00 97       	sbiw	r24, 0x00	; 0
    1e2c:	a1 05       	cpc	r26, r1
    1e2e:	b1 05       	cpc	r27, r1
    1e30:	a1 f0       	breq	.+40     	; 0x1e5a <UnityConcludeTest+0x48>
    {
        Unity.TestIgnores++;
    1e32:	80 91 5c 06 	lds	r24, 0x065C
    1e36:	90 91 5d 06 	lds	r25, 0x065D
    1e3a:	a0 91 5e 06 	lds	r26, 0x065E
    1e3e:	b0 91 5f 06 	lds	r27, 0x065F
    1e42:	01 96       	adiw	r24, 0x01	; 1
    1e44:	a1 1d       	adc	r26, r1
    1e46:	b1 1d       	adc	r27, r1
    1e48:	80 93 5c 06 	sts	0x065C, r24
    1e4c:	90 93 5d 06 	sts	0x065D, r25
    1e50:	a0 93 5e 06 	sts	0x065E, r26
    1e54:	b0 93 5f 06 	sts	0x065F, r27
    1e58:	34 c0       	rjmp	.+104    	; 0x1ec2 <UnityConcludeTest+0xb0>
    }
    else if (!Unity.CurrentTestFailed)
    1e5a:	80 91 60 06 	lds	r24, 0x0660
    1e5e:	90 91 61 06 	lds	r25, 0x0661
    1e62:	a0 91 62 06 	lds	r26, 0x0662
    1e66:	b0 91 63 06 	lds	r27, 0x0663
    1e6a:	00 97       	sbiw	r24, 0x00	; 0
    1e6c:	a1 05       	cpc	r26, r1
    1e6e:	b1 05       	cpc	r27, r1
    1e70:	a9 f4       	brne	.+42     	; 0x1e9c <UnityConcludeTest+0x8a>
    {
        UnityTestResultsBegin(Unity.TestFile, Unity.CurrentTestLineNumber);
    1e72:	80 91 48 06 	lds	r24, 0x0648
    1e76:	90 91 49 06 	lds	r25, 0x0649
    1e7a:	20 91 50 06 	lds	r18, 0x0650
    1e7e:	30 91 51 06 	lds	r19, 0x0651
    1e82:	40 91 52 06 	lds	r20, 0x0652
    1e86:	50 91 53 06 	lds	r21, 0x0653
    1e8a:	ba 01       	movw	r22, r20
    1e8c:	a9 01       	movw	r20, r18
    1e8e:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <UnityTestResultsBegin>
        UnityPrint(UnityStrPass);
    1e92:	8e e0       	ldi	r24, 0x0E	; 14
    1e94:	93 e0       	ldi	r25, 0x03	; 3
    1e96:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
    1e9a:	13 c0       	rjmp	.+38     	; 0x1ec2 <UnityConcludeTest+0xb0>
    }
    else
    {
        Unity.TestFailures++;
    1e9c:	80 91 58 06 	lds	r24, 0x0658
    1ea0:	90 91 59 06 	lds	r25, 0x0659
    1ea4:	a0 91 5a 06 	lds	r26, 0x065A
    1ea8:	b0 91 5b 06 	lds	r27, 0x065B
    1eac:	01 96       	adiw	r24, 0x01	; 1
    1eae:	a1 1d       	adc	r26, r1
    1eb0:	b1 1d       	adc	r27, r1
    1eb2:	80 93 58 06 	sts	0x0658, r24
    1eb6:	90 93 59 06 	sts	0x0659, r25
    1eba:	a0 93 5a 06 	sts	0x065A, r26
    1ebe:	b0 93 5b 06 	sts	0x065B, r27
    }

    Unity.CurrentTestFailed = 0;
    1ec2:	10 92 60 06 	sts	0x0660, r1
    1ec6:	10 92 61 06 	sts	0x0661, r1
    1eca:	10 92 62 06 	sts	0x0662, r1
    1ece:	10 92 63 06 	sts	0x0663, r1
    Unity.CurrentTestIgnored = 0;
    1ed2:	10 92 64 06 	sts	0x0664, r1
    1ed6:	10 92 65 06 	sts	0x0665, r1
    1eda:	10 92 66 06 	sts	0x0666, r1
    1ede:	10 92 67 06 	sts	0x0667, r1
    UNITY_PRINT_EXEC_TIME();
    UNITY_PRINT_EOL();
    1ee2:	20 91 81 06 	lds	r18, 0x0681
    1ee6:	30 91 82 06 	lds	r19, 0x0682
    1eea:	8a e0       	ldi	r24, 0x0A	; 10
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	b9 01       	movw	r22, r18
    1ef0:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
    UNITY_FLUSH_CALL();
}
    1ef4:	cf 91       	pop	r28
    1ef6:	df 91       	pop	r29
    1ef8:	08 95       	ret

00001efa <UnityAddMsgIfSpecified>:

/*-----------------------------------------------*/
static void UnityAddMsgIfSpecified(const char* msg)
{
    1efa:	df 93       	push	r29
    1efc:	cf 93       	push	r28
    1efe:	00 d0       	rcall	.+0      	; 0x1f00 <UnityAddMsgIfSpecified+0x6>
    1f00:	cd b7       	in	r28, 0x3d	; 61
    1f02:	de b7       	in	r29, 0x3e	; 62
    1f04:	9a 83       	std	Y+2, r25	; 0x02
    1f06:	89 83       	std	Y+1, r24	; 0x01
    if (msg)
    1f08:	89 81       	ldd	r24, Y+1	; 0x01
    1f0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0c:	00 97       	sbiw	r24, 0x00	; 0
    1f0e:	61 f1       	breq	.+88     	; 0x1f68 <UnityAddMsgIfSpecified+0x6e>
    {
        UnityPrint(UnityStrSpacer);
    1f10:	84 e2       	ldi	r24, 0x24	; 36
    1f12:	93 e0       	ldi	r25, 0x03	; 3
    1f14:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
#ifndef UNITY_EXCLUDE_DETAILS
        if (Unity.CurrentDetail1)
    1f18:	80 91 4c 06 	lds	r24, 0x064C
    1f1c:	90 91 4d 06 	lds	r25, 0x064D
    1f20:	00 97       	sbiw	r24, 0x00	; 0
    1f22:	f1 f0       	breq	.+60     	; 0x1f60 <UnityAddMsgIfSpecified+0x66>
        {
            UnityPrint(UnityStrDetail1Name);
    1f24:	8c e0       	ldi	r24, 0x0C	; 12
    1f26:	95 e0       	ldi	r25, 0x05	; 5
    1f28:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
            UnityPrint(Unity.CurrentDetail1);
    1f2c:	80 91 4c 06 	lds	r24, 0x064C
    1f30:	90 91 4d 06 	lds	r25, 0x064D
    1f34:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
            if (Unity.CurrentDetail2)
    1f38:	80 91 4e 06 	lds	r24, 0x064E
    1f3c:	90 91 4f 06 	lds	r25, 0x064F
    1f40:	00 97       	sbiw	r24, 0x00	; 0
    1f42:	51 f0       	breq	.+20     	; 0x1f58 <UnityAddMsgIfSpecified+0x5e>
            {
                UnityPrint(UnityStrDetail2Name);
    1f44:	86 e1       	ldi	r24, 0x16	; 22
    1f46:	95 e0       	ldi	r25, 0x05	; 5
    1f48:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
                UnityPrint(Unity.CurrentDetail2);
    1f4c:	80 91 4e 06 	lds	r24, 0x064E
    1f50:	90 91 4f 06 	lds	r25, 0x064F
    1f54:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
            }
            UnityPrint(UnityStrSpacer);
    1f58:	84 e2       	ldi	r24, 0x24	; 36
    1f5a:	93 e0       	ldi	r25, 0x03	; 3
    1f5c:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
        }
#endif
        UnityPrint(msg);
    1f60:	89 81       	ldd	r24, Y+1	; 0x01
    1f62:	9a 81       	ldd	r25, Y+2	; 0x02
    1f64:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
    }
}
    1f68:	0f 90       	pop	r0
    1f6a:	0f 90       	pop	r0
    1f6c:	cf 91       	pop	r28
    1f6e:	df 91       	pop	r29
    1f70:	08 95       	ret

00001f72 <UnityPrintExpectedAndActualStrings>:

/*-----------------------------------------------*/
static void UnityPrintExpectedAndActualStrings(const char* expected, const char* actual)
{
    1f72:	df 93       	push	r29
    1f74:	cf 93       	push	r28
    1f76:	00 d0       	rcall	.+0      	; 0x1f78 <UnityPrintExpectedAndActualStrings+0x6>
    1f78:	00 d0       	rcall	.+0      	; 0x1f7a <UnityPrintExpectedAndActualStrings+0x8>
    1f7a:	cd b7       	in	r28, 0x3d	; 61
    1f7c:	de b7       	in	r29, 0x3e	; 62
    1f7e:	9a 83       	std	Y+2, r25	; 0x02
    1f80:	89 83       	std	Y+1, r24	; 0x01
    1f82:	7c 83       	std	Y+4, r23	; 0x04
    1f84:	6b 83       	std	Y+3, r22	; 0x03
    UnityPrint(UnityStrExpected);
    1f86:	87 e2       	ldi	r24, 0x27	; 39
    1f88:	93 e0       	ldi	r25, 0x03	; 3
    1f8a:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
    if (expected != NULL)
    1f8e:	89 81       	ldd	r24, Y+1	; 0x01
    1f90:	9a 81       	ldd	r25, Y+2	; 0x02
    1f92:	00 97       	sbiw	r24, 0x00	; 0
    1f94:	b9 f0       	breq	.+46     	; 0x1fc4 <UnityPrintExpectedAndActualStrings+0x52>
    {
        UNITY_OUTPUT_CHAR('\'');
    1f96:	20 91 81 06 	lds	r18, 0x0681
    1f9a:	30 91 82 06 	lds	r19, 0x0682
    1f9e:	87 e2       	ldi	r24, 0x27	; 39
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	b9 01       	movw	r22, r18
    1fa4:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
        UnityPrint(expected);
    1fa8:	89 81       	ldd	r24, Y+1	; 0x01
    1faa:	9a 81       	ldd	r25, Y+2	; 0x02
    1fac:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
        UNITY_OUTPUT_CHAR('\'');
    1fb0:	20 91 81 06 	lds	r18, 0x0681
    1fb4:	30 91 82 06 	lds	r19, 0x0682
    1fb8:	87 e2       	ldi	r24, 0x27	; 39
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	b9 01       	movw	r22, r18
    1fbe:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
    1fc2:	04 c0       	rjmp	.+8      	; 0x1fcc <UnityPrintExpectedAndActualStrings+0x5a>
    }
    else
    {
        UnityPrint(UnityStrNull);
    1fc4:	8f e1       	ldi	r24, 0x1F	; 31
    1fc6:	93 e0       	ldi	r25, 0x03	; 3
    1fc8:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
    }
    UnityPrint(UnityStrWas);
    1fcc:	82 e3       	ldi	r24, 0x32	; 50
    1fce:	93 e0       	ldi	r25, 0x03	; 3
    1fd0:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
    if (actual != NULL)
    1fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd8:	00 97       	sbiw	r24, 0x00	; 0
    1fda:	b9 f0       	breq	.+46     	; 0x200a <UnityPrintExpectedAndActualStrings+0x98>
    {
        UNITY_OUTPUT_CHAR('\'');
    1fdc:	20 91 81 06 	lds	r18, 0x0681
    1fe0:	30 91 82 06 	lds	r19, 0x0682
    1fe4:	87 e2       	ldi	r24, 0x27	; 39
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	b9 01       	movw	r22, r18
    1fea:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
        UnityPrint(actual);
    1fee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff2:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
        UNITY_OUTPUT_CHAR('\'');
    1ff6:	20 91 81 06 	lds	r18, 0x0681
    1ffa:	30 91 82 06 	lds	r19, 0x0682
    1ffe:	87 e2       	ldi	r24, 0x27	; 39
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	b9 01       	movw	r22, r18
    2004:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
    2008:	04 c0       	rjmp	.+8      	; 0x2012 <UnityPrintExpectedAndActualStrings+0xa0>
    }
    else
    {
        UnityPrint(UnityStrNull);
    200a:	8f e1       	ldi	r24, 0x1F	; 31
    200c:	93 e0       	ldi	r25, 0x03	; 3
    200e:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
    }
}
    2012:	0f 90       	pop	r0
    2014:	0f 90       	pop	r0
    2016:	0f 90       	pop	r0
    2018:	0f 90       	pop	r0
    201a:	cf 91       	pop	r28
    201c:	df 91       	pop	r29
    201e:	08 95       	ret

00002020 <UnityPrintExpectedAndActualStringsLen>:

/*-----------------------------------------------*/
static void UnityPrintExpectedAndActualStringsLen(const char* expected,
                                                  const char* actual,
                                                  const UNITY_UINT32 length)
{
    2020:	df 93       	push	r29
    2022:	cf 93       	push	r28
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62
    2028:	28 97       	sbiw	r28, 0x08	; 8
    202a:	0f b6       	in	r0, 0x3f	; 63
    202c:	f8 94       	cli
    202e:	de bf       	out	0x3e, r29	; 62
    2030:	0f be       	out	0x3f, r0	; 63
    2032:	cd bf       	out	0x3d, r28	; 61
    2034:	9a 83       	std	Y+2, r25	; 0x02
    2036:	89 83       	std	Y+1, r24	; 0x01
    2038:	7c 83       	std	Y+4, r23	; 0x04
    203a:	6b 83       	std	Y+3, r22	; 0x03
    203c:	2d 83       	std	Y+5, r18	; 0x05
    203e:	3e 83       	std	Y+6, r19	; 0x06
    2040:	4f 83       	std	Y+7, r20	; 0x07
    2042:	58 87       	std	Y+8, r21	; 0x08
    UnityPrint(UnityStrExpected);
    2044:	87 e2       	ldi	r24, 0x27	; 39
    2046:	93 e0       	ldi	r25, 0x03	; 3
    2048:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
    if (expected != NULL)
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	9a 81       	ldd	r25, Y+2	; 0x02
    2050:	00 97       	sbiw	r24, 0x00	; 0
    2052:	e9 f0       	breq	.+58     	; 0x208e <UnityPrintExpectedAndActualStringsLen+0x6e>
    {
        UNITY_OUTPUT_CHAR('\'');
    2054:	20 91 81 06 	lds	r18, 0x0681
    2058:	30 91 82 06 	lds	r19, 0x0682
    205c:	87 e2       	ldi	r24, 0x27	; 39
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	b9 01       	movw	r22, r18
    2062:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
        UnityPrintLen(expected, length);
    2066:	89 81       	ldd	r24, Y+1	; 0x01
    2068:	9a 81       	ldd	r25, Y+2	; 0x02
    206a:	2d 81       	ldd	r18, Y+5	; 0x05
    206c:	3e 81       	ldd	r19, Y+6	; 0x06
    206e:	4f 81       	ldd	r20, Y+7	; 0x07
    2070:	58 85       	ldd	r21, Y+8	; 0x08
    2072:	ba 01       	movw	r22, r20
    2074:	a9 01       	movw	r20, r18
    2076:	0e 94 a4 07 	call	0xf48	; 0xf48 <UnityPrintLen>
        UNITY_OUTPUT_CHAR('\'');
    207a:	20 91 81 06 	lds	r18, 0x0681
    207e:	30 91 82 06 	lds	r19, 0x0682
    2082:	87 e2       	ldi	r24, 0x27	; 39
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	b9 01       	movw	r22, r18
    2088:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
    208c:	04 c0       	rjmp	.+8      	; 0x2096 <UnityPrintExpectedAndActualStringsLen+0x76>
    }
    else
    {
        UnityPrint(UnityStrNull);
    208e:	8f e1       	ldi	r24, 0x1F	; 31
    2090:	93 e0       	ldi	r25, 0x03	; 3
    2092:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
    }
    UnityPrint(UnityStrWas);
    2096:	82 e3       	ldi	r24, 0x32	; 50
    2098:	93 e0       	ldi	r25, 0x03	; 3
    209a:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
    if (actual != NULL)
    209e:	8b 81       	ldd	r24, Y+3	; 0x03
    20a0:	9c 81       	ldd	r25, Y+4	; 0x04
    20a2:	00 97       	sbiw	r24, 0x00	; 0
    20a4:	e9 f0       	breq	.+58     	; 0x20e0 <UnityPrintExpectedAndActualStringsLen+0xc0>
    {
        UNITY_OUTPUT_CHAR('\'');
    20a6:	20 91 81 06 	lds	r18, 0x0681
    20aa:	30 91 82 06 	lds	r19, 0x0682
    20ae:	87 e2       	ldi	r24, 0x27	; 39
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	b9 01       	movw	r22, r18
    20b4:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
        UnityPrintLen(actual, length);
    20b8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ba:	9c 81       	ldd	r25, Y+4	; 0x04
    20bc:	2d 81       	ldd	r18, Y+5	; 0x05
    20be:	3e 81       	ldd	r19, Y+6	; 0x06
    20c0:	4f 81       	ldd	r20, Y+7	; 0x07
    20c2:	58 85       	ldd	r21, Y+8	; 0x08
    20c4:	ba 01       	movw	r22, r20
    20c6:	a9 01       	movw	r20, r18
    20c8:	0e 94 a4 07 	call	0xf48	; 0xf48 <UnityPrintLen>
        UNITY_OUTPUT_CHAR('\'');
    20cc:	20 91 81 06 	lds	r18, 0x0681
    20d0:	30 91 82 06 	lds	r19, 0x0682
    20d4:	87 e2       	ldi	r24, 0x27	; 39
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	b9 01       	movw	r22, r18
    20da:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
    20de:	04 c0       	rjmp	.+8      	; 0x20e8 <UnityPrintExpectedAndActualStringsLen+0xc8>
    }
    else
    {
        UnityPrint(UnityStrNull);
    20e0:	8f e1       	ldi	r24, 0x1F	; 31
    20e2:	93 e0       	ldi	r25, 0x03	; 3
    20e4:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
    }
}
    20e8:	28 96       	adiw	r28, 0x08	; 8
    20ea:	0f b6       	in	r0, 0x3f	; 63
    20ec:	f8 94       	cli
    20ee:	de bf       	out	0x3e, r29	; 62
    20f0:	0f be       	out	0x3f, r0	; 63
    20f2:	cd bf       	out	0x3d, r28	; 61
    20f4:	cf 91       	pop	r28
    20f6:	df 91       	pop	r29
    20f8:	08 95       	ret

000020fa <UnityIsOneArrayNull>:
/*-----------------------------------------------*/
static int UnityIsOneArrayNull(UNITY_INTERNAL_PTR expected,
                               UNITY_INTERNAL_PTR actual,
                               const UNITY_LINE_TYPE lineNumber,
                               const char* msg)
{
    20fa:	0f 93       	push	r16
    20fc:	1f 93       	push	r17
    20fe:	df 93       	push	r29
    2100:	cf 93       	push	r28
    2102:	cd b7       	in	r28, 0x3d	; 61
    2104:	de b7       	in	r29, 0x3e	; 62
    2106:	2a 97       	sbiw	r28, 0x0a	; 10
    2108:	0f b6       	in	r0, 0x3f	; 63
    210a:	f8 94       	cli
    210c:	de bf       	out	0x3e, r29	; 62
    210e:	0f be       	out	0x3f, r0	; 63
    2110:	cd bf       	out	0x3d, r28	; 61
    2112:	9a 83       	std	Y+2, r25	; 0x02
    2114:	89 83       	std	Y+1, r24	; 0x01
    2116:	7c 83       	std	Y+4, r23	; 0x04
    2118:	6b 83       	std	Y+3, r22	; 0x03
    211a:	2d 83       	std	Y+5, r18	; 0x05
    211c:	3e 83       	std	Y+6, r19	; 0x06
    211e:	4f 83       	std	Y+7, r20	; 0x07
    2120:	58 87       	std	Y+8, r21	; 0x08
    2122:	1a 87       	std	Y+10, r17	; 0x0a
    2124:	09 87       	std	Y+9, r16	; 0x09
    /* Both are NULL or same pointer */
    if (expected == actual) { return 0; }
    2126:	29 81       	ldd	r18, Y+1	; 0x01
    2128:	3a 81       	ldd	r19, Y+2	; 0x02
    212a:	8b 81       	ldd	r24, Y+3	; 0x03
    212c:	9c 81       	ldd	r25, Y+4	; 0x04
    212e:	28 17       	cp	r18, r24
    2130:	39 07       	cpc	r19, r25
    2132:	19 f4       	brne	.+6      	; 0x213a <UnityIsOneArrayNull+0x40>
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	30 c0       	rjmp	.+96     	; 0x219a <UnityIsOneArrayNull+0xa0>

    /* print and return true if just expected is NULL */
    if (expected == NULL)
    213a:	89 81       	ldd	r24, Y+1	; 0x01
    213c:	9a 81       	ldd	r25, Y+2	; 0x02
    213e:	00 97       	sbiw	r24, 0x00	; 0
    2140:	99 f4       	brne	.+38     	; 0x2168 <UnityIsOneArrayNull+0x6e>
    {
        UnityTestResultsFailBegin(lineNumber);
    2142:	8d 81       	ldd	r24, Y+5	; 0x05
    2144:	9e 81       	ldd	r25, Y+6	; 0x06
    2146:	af 81       	ldd	r26, Y+7	; 0x07
    2148:	b8 85       	ldd	r27, Y+8	; 0x08
    214a:	bc 01       	movw	r22, r24
    214c:	cd 01       	movw	r24, r26
    214e:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <UnityTestResultsFailBegin>
        UnityPrint(UnityStrNullPointerForExpected);
    2152:	80 ee       	ldi	r24, 0xE0	; 224
    2154:	93 e0       	ldi	r25, 0x03	; 3
    2156:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
        UnityAddMsgIfSpecified(msg);
    215a:	89 85       	ldd	r24, Y+9	; 0x09
    215c:	9a 85       	ldd	r25, Y+10	; 0x0a
    215e:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <UnityAddMsgIfSpecified>
        return 1;
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	19 c0       	rjmp	.+50     	; 0x219a <UnityIsOneArrayNull+0xa0>
    }

    /* print and return true if just actual is NULL */
    if (actual == NULL)
    2168:	8b 81       	ldd	r24, Y+3	; 0x03
    216a:	9c 81       	ldd	r25, Y+4	; 0x04
    216c:	00 97       	sbiw	r24, 0x00	; 0
    216e:	99 f4       	brne	.+38     	; 0x2196 <UnityIsOneArrayNull+0x9c>
    {
        UnityTestResultsFailBegin(lineNumber);
    2170:	8d 81       	ldd	r24, Y+5	; 0x05
    2172:	9e 81       	ldd	r25, Y+6	; 0x06
    2174:	af 81       	ldd	r26, Y+7	; 0x07
    2176:	b8 85       	ldd	r27, Y+8	; 0x08
    2178:	bc 01       	movw	r22, r24
    217a:	cd 01       	movw	r24, r26
    217c:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <UnityTestResultsFailBegin>
        UnityPrint(UnityStrNullPointerForActual);
    2180:	8d ef       	ldi	r24, 0xFD	; 253
    2182:	93 e0       	ldi	r25, 0x03	; 3
    2184:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
        UnityAddMsgIfSpecified(msg);
    2188:	89 85       	ldd	r24, Y+9	; 0x09
    218a:	9a 85       	ldd	r25, Y+10	; 0x0a
    218c:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <UnityAddMsgIfSpecified>
        return 1;
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	02 c0       	rjmp	.+4      	; 0x219a <UnityIsOneArrayNull+0xa0>
    }

    return 0; /* return false if neither is NULL */
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	90 e0       	ldi	r25, 0x00	; 0
}
    219a:	2a 96       	adiw	r28, 0x0a	; 10
    219c:	0f b6       	in	r0, 0x3f	; 63
    219e:	f8 94       	cli
    21a0:	de bf       	out	0x3e, r29	; 62
    21a2:	0f be       	out	0x3f, r0	; 63
    21a4:	cd bf       	out	0x3d, r28	; 61
    21a6:	cf 91       	pop	r28
    21a8:	df 91       	pop	r29
    21aa:	1f 91       	pop	r17
    21ac:	0f 91       	pop	r16
    21ae:	08 95       	ret

000021b0 <UnityAssertBits>:
void UnityAssertBits(const UNITY_INT mask,
                     const UNITY_INT expected,
                     const UNITY_INT actual,
                     const char* msg,
                     const UNITY_LINE_TYPE lineNumber)
{
    21b0:	8f 92       	push	r8
    21b2:	9f 92       	push	r9
    21b4:	af 92       	push	r10
    21b6:	bf 92       	push	r11
    21b8:	cf 92       	push	r12
    21ba:	df 92       	push	r13
    21bc:	ef 92       	push	r14
    21be:	ff 92       	push	r15
    21c0:	0f 93       	push	r16
    21c2:	1f 93       	push	r17
    21c4:	df 93       	push	r29
    21c6:	cf 93       	push	r28
    21c8:	cd b7       	in	r28, 0x3d	; 61
    21ca:	de b7       	in	r29, 0x3e	; 62
    21cc:	62 97       	sbiw	r28, 0x12	; 18
    21ce:	0f b6       	in	r0, 0x3f	; 63
    21d0:	f8 94       	cli
    21d2:	de bf       	out	0x3e, r29	; 62
    21d4:	0f be       	out	0x3f, r0	; 63
    21d6:	cd bf       	out	0x3d, r28	; 61
    21d8:	69 83       	std	Y+1, r22	; 0x01
    21da:	7a 83       	std	Y+2, r23	; 0x02
    21dc:	8b 83       	std	Y+3, r24	; 0x03
    21de:	9c 83       	std	Y+4, r25	; 0x04
    21e0:	2d 83       	std	Y+5, r18	; 0x05
    21e2:	3e 83       	std	Y+6, r19	; 0x06
    21e4:	4f 83       	std	Y+7, r20	; 0x07
    21e6:	58 87       	std	Y+8, r21	; 0x08
    21e8:	e9 86       	std	Y+9, r14	; 0x09
    21ea:	fa 86       	std	Y+10, r15	; 0x0a
    21ec:	0b 87       	std	Y+11, r16	; 0x0b
    21ee:	1c 87       	std	Y+12, r17	; 0x0c
    21f0:	de 86       	std	Y+14, r13	; 0x0e
    21f2:	cd 86       	std	Y+13, r12	; 0x0d
    21f4:	8f 86       	std	Y+15, r8	; 0x0f
    21f6:	98 8a       	std	Y+16, r9	; 0x10
    21f8:	a9 8a       	std	Y+17, r10	; 0x11
    21fa:	ba 8a       	std	Y+18, r11	; 0x12
    RETURN_IF_FAIL_OR_IGNORE;
    21fc:	80 91 60 06 	lds	r24, 0x0660
    2200:	90 91 61 06 	lds	r25, 0x0661
    2204:	a0 91 62 06 	lds	r26, 0x0662
    2208:	b0 91 63 06 	lds	r27, 0x0663
    220c:	00 97       	sbiw	r24, 0x00	; 0
    220e:	a1 05       	cpc	r26, r1
    2210:	b1 05       	cpc	r27, r1
    2212:	09 f0       	breq	.+2      	; 0x2216 <UnityAssertBits+0x66>
    2214:	63 c0       	rjmp	.+198    	; 0x22dc <UnityAssertBits+0x12c>
    2216:	80 91 64 06 	lds	r24, 0x0664
    221a:	90 91 65 06 	lds	r25, 0x0665
    221e:	a0 91 66 06 	lds	r26, 0x0666
    2222:	b0 91 67 06 	lds	r27, 0x0667
    2226:	00 97       	sbiw	r24, 0x00	; 0
    2228:	a1 05       	cpc	r26, r1
    222a:	b1 05       	cpc	r27, r1
    222c:	09 f0       	breq	.+2      	; 0x2230 <UnityAssertBits+0x80>
    222e:	56 c0       	rjmp	.+172    	; 0x22dc <UnityAssertBits+0x12c>

    if ((mask & expected) != (mask & actual))
    2230:	2d 81       	ldd	r18, Y+5	; 0x05
    2232:	3e 81       	ldd	r19, Y+6	; 0x06
    2234:	4f 81       	ldd	r20, Y+7	; 0x07
    2236:	58 85       	ldd	r21, Y+8	; 0x08
    2238:	89 85       	ldd	r24, Y+9	; 0x09
    223a:	9a 85       	ldd	r25, Y+10	; 0x0a
    223c:	ab 85       	ldd	r26, Y+11	; 0x0b
    223e:	bc 85       	ldd	r27, Y+12	; 0x0c
    2240:	28 27       	eor	r18, r24
    2242:	39 27       	eor	r19, r25
    2244:	4a 27       	eor	r20, r26
    2246:	5b 27       	eor	r21, r27
    2248:	89 81       	ldd	r24, Y+1	; 0x01
    224a:	9a 81       	ldd	r25, Y+2	; 0x02
    224c:	ab 81       	ldd	r26, Y+3	; 0x03
    224e:	bc 81       	ldd	r27, Y+4	; 0x04
    2250:	82 23       	and	r24, r18
    2252:	93 23       	and	r25, r19
    2254:	a4 23       	and	r26, r20
    2256:	b5 23       	and	r27, r21
    2258:	00 97       	sbiw	r24, 0x00	; 0
    225a:	a1 05       	cpc	r26, r1
    225c:	b1 05       	cpc	r27, r1
    225e:	f1 f1       	breq	.+124    	; 0x22dc <UnityAssertBits+0x12c>
    {
        UnityTestResultsFailBegin(lineNumber);
    2260:	8f 85       	ldd	r24, Y+15	; 0x0f
    2262:	98 89       	ldd	r25, Y+16	; 0x10
    2264:	a9 89       	ldd	r26, Y+17	; 0x11
    2266:	ba 89       	ldd	r27, Y+18	; 0x12
    2268:	bc 01       	movw	r22, r24
    226a:	cd 01       	movw	r24, r26
    226c:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <UnityTestResultsFailBegin>
        UnityPrint(UnityStrExpected);
    2270:	87 e2       	ldi	r24, 0x27	; 39
    2272:	93 e0       	ldi	r25, 0x03	; 3
    2274:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
        UnityPrintMask((UNITY_UINT)mask, (UNITY_UINT)expected);
    2278:	89 81       	ldd	r24, Y+1	; 0x01
    227a:	9a 81       	ldd	r25, Y+2	; 0x02
    227c:	ab 81       	ldd	r26, Y+3	; 0x03
    227e:	bc 81       	ldd	r27, Y+4	; 0x04
    2280:	2d 81       	ldd	r18, Y+5	; 0x05
    2282:	3e 81       	ldd	r19, Y+6	; 0x06
    2284:	4f 81       	ldd	r20, Y+7	; 0x07
    2286:	58 85       	ldd	r21, Y+8	; 0x08
    2288:	bc 01       	movw	r22, r24
    228a:	cd 01       	movw	r24, r26
    228c:	0e 94 c4 09 	call	0x1388	; 0x1388 <UnityPrintMask>
        UnityPrint(UnityStrWas);
    2290:	82 e3       	ldi	r24, 0x32	; 50
    2292:	93 e0       	ldi	r25, 0x03	; 3
    2294:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
        UnityPrintMask((UNITY_UINT)mask, (UNITY_UINT)actual);
    2298:	89 81       	ldd	r24, Y+1	; 0x01
    229a:	9a 81       	ldd	r25, Y+2	; 0x02
    229c:	ab 81       	ldd	r26, Y+3	; 0x03
    229e:	bc 81       	ldd	r27, Y+4	; 0x04
    22a0:	29 85       	ldd	r18, Y+9	; 0x09
    22a2:	3a 85       	ldd	r19, Y+10	; 0x0a
    22a4:	4b 85       	ldd	r20, Y+11	; 0x0b
    22a6:	5c 85       	ldd	r21, Y+12	; 0x0c
    22a8:	bc 01       	movw	r22, r24
    22aa:	cd 01       	movw	r24, r26
    22ac:	0e 94 c4 09 	call	0x1388	; 0x1388 <UnityPrintMask>
        UnityAddMsgIfSpecified(msg);
    22b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22b4:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <UnityAddMsgIfSpecified>
        UNITY_FAIL_AND_BAIL;
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	a0 e0       	ldi	r26, 0x00	; 0
    22be:	b0 e0       	ldi	r27, 0x00	; 0
    22c0:	80 93 60 06 	sts	0x0660, r24
    22c4:	90 93 61 06 	sts	0x0661, r25
    22c8:	a0 93 62 06 	sts	0x0662, r26
    22cc:	b0 93 63 06 	sts	0x0663, r27
    22d0:	88 e6       	ldi	r24, 0x68	; 104
    22d2:	96 e0       	ldi	r25, 0x06	; 6
    22d4:	61 e0       	ldi	r22, 0x01	; 1
    22d6:	70 e0       	ldi	r23, 0x00	; 0
    22d8:	0e 94 48 29 	call	0x5290	; 0x5290 <longjmp>
    }
}
    22dc:	62 96       	adiw	r28, 0x12	; 18
    22de:	0f b6       	in	r0, 0x3f	; 63
    22e0:	f8 94       	cli
    22e2:	de bf       	out	0x3e, r29	; 62
    22e4:	0f be       	out	0x3f, r0	; 63
    22e6:	cd bf       	out	0x3d, r28	; 61
    22e8:	cf 91       	pop	r28
    22ea:	df 91       	pop	r29
    22ec:	1f 91       	pop	r17
    22ee:	0f 91       	pop	r16
    22f0:	ff 90       	pop	r15
    22f2:	ef 90       	pop	r14
    22f4:	df 90       	pop	r13
    22f6:	cf 90       	pop	r12
    22f8:	bf 90       	pop	r11
    22fa:	af 90       	pop	r10
    22fc:	9f 90       	pop	r9
    22fe:	8f 90       	pop	r8
    2300:	08 95       	ret

00002302 <UnityAssertEqualNumber>:
void UnityAssertEqualNumber(const UNITY_INT expected,
                            const UNITY_INT actual,
                            const char* msg,
                            const UNITY_LINE_TYPE lineNumber,
                            const UNITY_DISPLAY_STYLE_T style)
{
    2302:	af 92       	push	r10
    2304:	cf 92       	push	r12
    2306:	df 92       	push	r13
    2308:	ef 92       	push	r14
    230a:	ff 92       	push	r15
    230c:	0f 93       	push	r16
    230e:	1f 93       	push	r17
    2310:	df 93       	push	r29
    2312:	cf 93       	push	r28
    2314:	cd b7       	in	r28, 0x3d	; 61
    2316:	de b7       	in	r29, 0x3e	; 62
    2318:	2f 97       	sbiw	r28, 0x0f	; 15
    231a:	0f b6       	in	r0, 0x3f	; 63
    231c:	f8 94       	cli
    231e:	de bf       	out	0x3e, r29	; 62
    2320:	0f be       	out	0x3f, r0	; 63
    2322:	cd bf       	out	0x3d, r28	; 61
    2324:	69 83       	std	Y+1, r22	; 0x01
    2326:	7a 83       	std	Y+2, r23	; 0x02
    2328:	8b 83       	std	Y+3, r24	; 0x03
    232a:	9c 83       	std	Y+4, r25	; 0x04
    232c:	2d 83       	std	Y+5, r18	; 0x05
    232e:	3e 83       	std	Y+6, r19	; 0x06
    2330:	4f 83       	std	Y+7, r20	; 0x07
    2332:	58 87       	std	Y+8, r21	; 0x08
    2334:	1a 87       	std	Y+10, r17	; 0x0a
    2336:	09 87       	std	Y+9, r16	; 0x09
    2338:	cb 86       	std	Y+11, r12	; 0x0b
    233a:	dc 86       	std	Y+12, r13	; 0x0c
    233c:	ed 86       	std	Y+13, r14	; 0x0d
    233e:	fe 86       	std	Y+14, r15	; 0x0e
    2340:	af 86       	std	Y+15, r10	; 0x0f
    RETURN_IF_FAIL_OR_IGNORE;
    2342:	80 91 60 06 	lds	r24, 0x0660
    2346:	90 91 61 06 	lds	r25, 0x0661
    234a:	a0 91 62 06 	lds	r26, 0x0662
    234e:	b0 91 63 06 	lds	r27, 0x0663
    2352:	00 97       	sbiw	r24, 0x00	; 0
    2354:	a1 05       	cpc	r26, r1
    2356:	b1 05       	cpc	r27, r1
    2358:	09 f0       	breq	.+2      	; 0x235c <UnityAssertEqualNumber+0x5a>
    235a:	52 c0       	rjmp	.+164    	; 0x2400 <UnityAssertEqualNumber+0xfe>
    235c:	80 91 64 06 	lds	r24, 0x0664
    2360:	90 91 65 06 	lds	r25, 0x0665
    2364:	a0 91 66 06 	lds	r26, 0x0666
    2368:	b0 91 67 06 	lds	r27, 0x0667
    236c:	00 97       	sbiw	r24, 0x00	; 0
    236e:	a1 05       	cpc	r26, r1
    2370:	b1 05       	cpc	r27, r1
    2372:	09 f0       	breq	.+2      	; 0x2376 <UnityAssertEqualNumber+0x74>
    2374:	45 c0       	rjmp	.+138    	; 0x2400 <UnityAssertEqualNumber+0xfe>

    if (expected != actual)
    2376:	29 81       	ldd	r18, Y+1	; 0x01
    2378:	3a 81       	ldd	r19, Y+2	; 0x02
    237a:	4b 81       	ldd	r20, Y+3	; 0x03
    237c:	5c 81       	ldd	r21, Y+4	; 0x04
    237e:	8d 81       	ldd	r24, Y+5	; 0x05
    2380:	9e 81       	ldd	r25, Y+6	; 0x06
    2382:	af 81       	ldd	r26, Y+7	; 0x07
    2384:	b8 85       	ldd	r27, Y+8	; 0x08
    2386:	28 17       	cp	r18, r24
    2388:	39 07       	cpc	r19, r25
    238a:	4a 07       	cpc	r20, r26
    238c:	5b 07       	cpc	r21, r27
    238e:	c1 f1       	breq	.+112    	; 0x2400 <UnityAssertEqualNumber+0xfe>
    {
        UnityTestResultsFailBegin(lineNumber);
    2390:	8b 85       	ldd	r24, Y+11	; 0x0b
    2392:	9c 85       	ldd	r25, Y+12	; 0x0c
    2394:	ad 85       	ldd	r26, Y+13	; 0x0d
    2396:	be 85       	ldd	r27, Y+14	; 0x0e
    2398:	bc 01       	movw	r22, r24
    239a:	cd 01       	movw	r24, r26
    239c:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <UnityTestResultsFailBegin>
        UnityPrint(UnityStrExpected);
    23a0:	87 e2       	ldi	r24, 0x27	; 39
    23a2:	93 e0       	ldi	r25, 0x03	; 3
    23a4:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
        UnityPrintNumberByStyle(expected, style);
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
    23aa:	9a 81       	ldd	r25, Y+2	; 0x02
    23ac:	ab 81       	ldd	r26, Y+3	; 0x03
    23ae:	bc 81       	ldd	r27, Y+4	; 0x04
    23b0:	bc 01       	movw	r22, r24
    23b2:	cd 01       	movw	r24, r26
    23b4:	4f 85       	ldd	r20, Y+15	; 0x0f
    23b6:	0e 94 54 08 	call	0x10a8	; 0x10a8 <UnityPrintNumberByStyle>
        UnityPrint(UnityStrWas);
    23ba:	82 e3       	ldi	r24, 0x32	; 50
    23bc:	93 e0       	ldi	r25, 0x03	; 3
    23be:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
        UnityPrintNumberByStyle(actual, style);
    23c2:	8d 81       	ldd	r24, Y+5	; 0x05
    23c4:	9e 81       	ldd	r25, Y+6	; 0x06
    23c6:	af 81       	ldd	r26, Y+7	; 0x07
    23c8:	b8 85       	ldd	r27, Y+8	; 0x08
    23ca:	bc 01       	movw	r22, r24
    23cc:	cd 01       	movw	r24, r26
    23ce:	4f 85       	ldd	r20, Y+15	; 0x0f
    23d0:	0e 94 54 08 	call	0x10a8	; 0x10a8 <UnityPrintNumberByStyle>
        UnityAddMsgIfSpecified(msg);
    23d4:	89 85       	ldd	r24, Y+9	; 0x09
    23d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d8:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <UnityAddMsgIfSpecified>
        UNITY_FAIL_AND_BAIL;
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	a0 e0       	ldi	r26, 0x00	; 0
    23e2:	b0 e0       	ldi	r27, 0x00	; 0
    23e4:	80 93 60 06 	sts	0x0660, r24
    23e8:	90 93 61 06 	sts	0x0661, r25
    23ec:	a0 93 62 06 	sts	0x0662, r26
    23f0:	b0 93 63 06 	sts	0x0663, r27
    23f4:	88 e6       	ldi	r24, 0x68	; 104
    23f6:	96 e0       	ldi	r25, 0x06	; 6
    23f8:	61 e0       	ldi	r22, 0x01	; 1
    23fa:	70 e0       	ldi	r23, 0x00	; 0
    23fc:	0e 94 48 29 	call	0x5290	; 0x5290 <longjmp>
    }
}
    2400:	2f 96       	adiw	r28, 0x0f	; 15
    2402:	0f b6       	in	r0, 0x3f	; 63
    2404:	f8 94       	cli
    2406:	de bf       	out	0x3e, r29	; 62
    2408:	0f be       	out	0x3f, r0	; 63
    240a:	cd bf       	out	0x3d, r28	; 61
    240c:	cf 91       	pop	r28
    240e:	df 91       	pop	r29
    2410:	1f 91       	pop	r17
    2412:	0f 91       	pop	r16
    2414:	ff 90       	pop	r15
    2416:	ef 90       	pop	r14
    2418:	df 90       	pop	r13
    241a:	cf 90       	pop	r12
    241c:	af 90       	pop	r10
    241e:	08 95       	ret

00002420 <UnityAssertGreaterOrLessOrEqualNumber>:
                                           const UNITY_INT actual,
                                           const UNITY_COMPARISON_T compare,
                                           const char *msg,
                                           const UNITY_LINE_TYPE lineNumber,
                                           const UNITY_DISPLAY_STYLE_T style)
{
    2420:	8f 92       	push	r8
    2422:	af 92       	push	r10
    2424:	bf 92       	push	r11
    2426:	cf 92       	push	r12
    2428:	df 92       	push	r13
    242a:	ef 92       	push	r14
    242c:	ff 92       	push	r15
    242e:	0f 93       	push	r16
    2430:	df 93       	push	r29
    2432:	cf 93       	push	r28
    2434:	cd b7       	in	r28, 0x3d	; 61
    2436:	de b7       	in	r29, 0x3e	; 62
    2438:	62 97       	sbiw	r28, 0x12	; 18
    243a:	0f b6       	in	r0, 0x3f	; 63
    243c:	f8 94       	cli
    243e:	de bf       	out	0x3e, r29	; 62
    2440:	0f be       	out	0x3f, r0	; 63
    2442:	cd bf       	out	0x3d, r28	; 61
    2444:	6b 83       	std	Y+3, r22	; 0x03
    2446:	7c 83       	std	Y+4, r23	; 0x04
    2448:	8d 83       	std	Y+5, r24	; 0x05
    244a:	9e 83       	std	Y+6, r25	; 0x06
    244c:	2f 83       	std	Y+7, r18	; 0x07
    244e:	38 87       	std	Y+8, r19	; 0x08
    2450:	49 87       	std	Y+9, r20	; 0x09
    2452:	5a 87       	std	Y+10, r21	; 0x0a
    2454:	0b 87       	std	Y+11, r16	; 0x0b
    2456:	fd 86       	std	Y+13, r15	; 0x0d
    2458:	ec 86       	std	Y+12, r14	; 0x0c
    245a:	ae 86       	std	Y+14, r10	; 0x0e
    245c:	bf 86       	std	Y+15, r11	; 0x0f
    245e:	c8 8a       	std	Y+16, r12	; 0x10
    2460:	d9 8a       	std	Y+17, r13	; 0x11
    2462:	8a 8a       	std	Y+18, r8	; 0x12
    int failed = 0;
    2464:	1a 82       	std	Y+2, r1	; 0x02
    2466:	19 82       	std	Y+1, r1	; 0x01
    RETURN_IF_FAIL_OR_IGNORE;
    2468:	80 91 60 06 	lds	r24, 0x0660
    246c:	90 91 61 06 	lds	r25, 0x0661
    2470:	a0 91 62 06 	lds	r26, 0x0662
    2474:	b0 91 63 06 	lds	r27, 0x0663
    2478:	00 97       	sbiw	r24, 0x00	; 0
    247a:	a1 05       	cpc	r26, r1
    247c:	b1 05       	cpc	r27, r1
    247e:	09 f0       	breq	.+2      	; 0x2482 <UnityAssertGreaterOrLessOrEqualNumber+0x62>
    2480:	f6 c0       	rjmp	.+492    	; 0x266e <UnityAssertGreaterOrLessOrEqualNumber+0x24e>
    2482:	80 91 64 06 	lds	r24, 0x0664
    2486:	90 91 65 06 	lds	r25, 0x0665
    248a:	a0 91 66 06 	lds	r26, 0x0666
    248e:	b0 91 67 06 	lds	r27, 0x0667
    2492:	00 97       	sbiw	r24, 0x00	; 0
    2494:	a1 05       	cpc	r26, r1
    2496:	b1 05       	cpc	r27, r1
    2498:	09 f0       	breq	.+2      	; 0x249c <UnityAssertGreaterOrLessOrEqualNumber+0x7c>
    249a:	e9 c0       	rjmp	.+466    	; 0x266e <UnityAssertGreaterOrLessOrEqualNumber+0x24e>

    if ((threshold == actual) && (compare & UNITY_EQUAL_TO)) { return; }
    249c:	2b 81       	ldd	r18, Y+3	; 0x03
    249e:	3c 81       	ldd	r19, Y+4	; 0x04
    24a0:	4d 81       	ldd	r20, Y+5	; 0x05
    24a2:	5e 81       	ldd	r21, Y+6	; 0x06
    24a4:	8f 81       	ldd	r24, Y+7	; 0x07
    24a6:	98 85       	ldd	r25, Y+8	; 0x08
    24a8:	a9 85       	ldd	r26, Y+9	; 0x09
    24aa:	ba 85       	ldd	r27, Y+10	; 0x0a
    24ac:	28 17       	cp	r18, r24
    24ae:	39 07       	cpc	r19, r25
    24b0:	4a 07       	cpc	r20, r26
    24b2:	5b 07       	cpc	r21, r27
    24b4:	41 f4       	brne	.+16     	; 0x24c6 <UnityAssertGreaterOrLessOrEqualNumber+0xa6>
    24b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    24b8:	88 2f       	mov	r24, r24
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	81 70       	andi	r24, 0x01	; 1
    24be:	90 70       	andi	r25, 0x00	; 0
    24c0:	88 23       	and	r24, r24
    24c2:	09 f0       	breq	.+2      	; 0x24c6 <UnityAssertGreaterOrLessOrEqualNumber+0xa6>
    24c4:	d3 c0       	rjmp	.+422    	; 0x266c <UnityAssertGreaterOrLessOrEqualNumber+0x24c>
    if ((threshold == actual))                               { failed = 1; }
    24c6:	2b 81       	ldd	r18, Y+3	; 0x03
    24c8:	3c 81       	ldd	r19, Y+4	; 0x04
    24ca:	4d 81       	ldd	r20, Y+5	; 0x05
    24cc:	5e 81       	ldd	r21, Y+6	; 0x06
    24ce:	8f 81       	ldd	r24, Y+7	; 0x07
    24d0:	98 85       	ldd	r25, Y+8	; 0x08
    24d2:	a9 85       	ldd	r26, Y+9	; 0x09
    24d4:	ba 85       	ldd	r27, Y+10	; 0x0a
    24d6:	28 17       	cp	r18, r24
    24d8:	39 07       	cpc	r19, r25
    24da:	4a 07       	cpc	r20, r26
    24dc:	5b 07       	cpc	r21, r27
    24de:	21 f4       	brne	.+8      	; 0x24e8 <UnityAssertGreaterOrLessOrEqualNumber+0xc8>
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	9a 83       	std	Y+2, r25	; 0x02
    24e6:	89 83       	std	Y+1, r24	; 0x01

    if ((style & UNITY_DISPLAY_RANGE_INT) == UNITY_DISPLAY_RANGE_INT)
    24e8:	8a 89       	ldd	r24, Y+18	; 0x12
    24ea:	88 2f       	mov	r24, r24
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	80 71       	andi	r24, 0x10	; 16
    24f0:	90 70       	andi	r25, 0x00	; 0
    24f2:	00 97       	sbiw	r24, 0x00	; 0
    24f4:	89 f1       	breq	.+98     	; 0x2558 <UnityAssertGreaterOrLessOrEqualNumber+0x138>
    {
        if ((actual > threshold) && (compare & UNITY_SMALLER_THAN)) { failed = 1; }
    24f6:	2f 81       	ldd	r18, Y+7	; 0x07
    24f8:	38 85       	ldd	r19, Y+8	; 0x08
    24fa:	49 85       	ldd	r20, Y+9	; 0x09
    24fc:	5a 85       	ldd	r21, Y+10	; 0x0a
    24fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2500:	9c 81       	ldd	r25, Y+4	; 0x04
    2502:	ad 81       	ldd	r26, Y+5	; 0x05
    2504:	be 81       	ldd	r27, Y+6	; 0x06
    2506:	82 17       	cp	r24, r18
    2508:	93 07       	cpc	r25, r19
    250a:	a4 07       	cpc	r26, r20
    250c:	b5 07       	cpc	r27, r21
    250e:	5c f4       	brge	.+22     	; 0x2526 <UnityAssertGreaterOrLessOrEqualNumber+0x106>
    2510:	8b 85       	ldd	r24, Y+11	; 0x0b
    2512:	88 2f       	mov	r24, r24
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	84 70       	andi	r24, 0x04	; 4
    2518:	90 70       	andi	r25, 0x00	; 0
    251a:	00 97       	sbiw	r24, 0x00	; 0
    251c:	21 f0       	breq	.+8      	; 0x2526 <UnityAssertGreaterOrLessOrEqualNumber+0x106>
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	9a 83       	std	Y+2, r25	; 0x02
    2524:	89 83       	std	Y+1, r24	; 0x01
        if ((actual < threshold) && (compare & UNITY_GREATER_THAN)) { failed = 1; }
    2526:	2f 81       	ldd	r18, Y+7	; 0x07
    2528:	38 85       	ldd	r19, Y+8	; 0x08
    252a:	49 85       	ldd	r20, Y+9	; 0x09
    252c:	5a 85       	ldd	r21, Y+10	; 0x0a
    252e:	8b 81       	ldd	r24, Y+3	; 0x03
    2530:	9c 81       	ldd	r25, Y+4	; 0x04
    2532:	ad 81       	ldd	r26, Y+5	; 0x05
    2534:	be 81       	ldd	r27, Y+6	; 0x06
    2536:	28 17       	cp	r18, r24
    2538:	39 07       	cpc	r19, r25
    253a:	4a 07       	cpc	r20, r26
    253c:	5b 07       	cpc	r21, r27
    253e:	e4 f5       	brge	.+120    	; 0x25b8 <UnityAssertGreaterOrLessOrEqualNumber+0x198>
    2540:	8b 85       	ldd	r24, Y+11	; 0x0b
    2542:	88 2f       	mov	r24, r24
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	82 70       	andi	r24, 0x02	; 2
    2548:	90 70       	andi	r25, 0x00	; 0
    254a:	00 97       	sbiw	r24, 0x00	; 0
    254c:	a9 f1       	breq	.+106    	; 0x25b8 <UnityAssertGreaterOrLessOrEqualNumber+0x198>
    254e:	81 e0       	ldi	r24, 0x01	; 1
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	9a 83       	std	Y+2, r25	; 0x02
    2554:	89 83       	std	Y+1, r24	; 0x01
    2556:	30 c0       	rjmp	.+96     	; 0x25b8 <UnityAssertGreaterOrLessOrEqualNumber+0x198>
    }
    else /* UINT or HEX */
    {
        if (((UNITY_UINT)actual > (UNITY_UINT)threshold) && (compare & UNITY_SMALLER_THAN)) { failed = 1; }
    2558:	2f 81       	ldd	r18, Y+7	; 0x07
    255a:	38 85       	ldd	r19, Y+8	; 0x08
    255c:	49 85       	ldd	r20, Y+9	; 0x09
    255e:	5a 85       	ldd	r21, Y+10	; 0x0a
    2560:	8b 81       	ldd	r24, Y+3	; 0x03
    2562:	9c 81       	ldd	r25, Y+4	; 0x04
    2564:	ad 81       	ldd	r26, Y+5	; 0x05
    2566:	be 81       	ldd	r27, Y+6	; 0x06
    2568:	82 17       	cp	r24, r18
    256a:	93 07       	cpc	r25, r19
    256c:	a4 07       	cpc	r26, r20
    256e:	b5 07       	cpc	r27, r21
    2570:	58 f4       	brcc	.+22     	; 0x2588 <UnityAssertGreaterOrLessOrEqualNumber+0x168>
    2572:	8b 85       	ldd	r24, Y+11	; 0x0b
    2574:	88 2f       	mov	r24, r24
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	84 70       	andi	r24, 0x04	; 4
    257a:	90 70       	andi	r25, 0x00	; 0
    257c:	00 97       	sbiw	r24, 0x00	; 0
    257e:	21 f0       	breq	.+8      	; 0x2588 <UnityAssertGreaterOrLessOrEqualNumber+0x168>
    2580:	81 e0       	ldi	r24, 0x01	; 1
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	9a 83       	std	Y+2, r25	; 0x02
    2586:	89 83       	std	Y+1, r24	; 0x01
        if (((UNITY_UINT)actual < (UNITY_UINT)threshold) && (compare & UNITY_GREATER_THAN)) { failed = 1; }
    2588:	2f 81       	ldd	r18, Y+7	; 0x07
    258a:	38 85       	ldd	r19, Y+8	; 0x08
    258c:	49 85       	ldd	r20, Y+9	; 0x09
    258e:	5a 85       	ldd	r21, Y+10	; 0x0a
    2590:	8b 81       	ldd	r24, Y+3	; 0x03
    2592:	9c 81       	ldd	r25, Y+4	; 0x04
    2594:	ad 81       	ldd	r26, Y+5	; 0x05
    2596:	be 81       	ldd	r27, Y+6	; 0x06
    2598:	28 17       	cp	r18, r24
    259a:	39 07       	cpc	r19, r25
    259c:	4a 07       	cpc	r20, r26
    259e:	5b 07       	cpc	r21, r27
    25a0:	58 f4       	brcc	.+22     	; 0x25b8 <UnityAssertGreaterOrLessOrEqualNumber+0x198>
    25a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    25a4:	88 2f       	mov	r24, r24
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	82 70       	andi	r24, 0x02	; 2
    25aa:	90 70       	andi	r25, 0x00	; 0
    25ac:	00 97       	sbiw	r24, 0x00	; 0
    25ae:	21 f0       	breq	.+8      	; 0x25b8 <UnityAssertGreaterOrLessOrEqualNumber+0x198>
    25b0:	81 e0       	ldi	r24, 0x01	; 1
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	9a 83       	std	Y+2, r25	; 0x02
    25b6:	89 83       	std	Y+1, r24	; 0x01
    }

    if (failed)
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	9a 81       	ldd	r25, Y+2	; 0x02
    25bc:	00 97       	sbiw	r24, 0x00	; 0
    25be:	09 f4       	brne	.+2      	; 0x25c2 <UnityAssertGreaterOrLessOrEqualNumber+0x1a2>
    25c0:	56 c0       	rjmp	.+172    	; 0x266e <UnityAssertGreaterOrLessOrEqualNumber+0x24e>
    {
        UnityTestResultsFailBegin(lineNumber);
    25c2:	8e 85       	ldd	r24, Y+14	; 0x0e
    25c4:	9f 85       	ldd	r25, Y+15	; 0x0f
    25c6:	a8 89       	ldd	r26, Y+16	; 0x10
    25c8:	b9 89       	ldd	r27, Y+17	; 0x11
    25ca:	bc 01       	movw	r22, r24
    25cc:	cd 01       	movw	r24, r26
    25ce:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <UnityTestResultsFailBegin>
        UnityPrint(UnityStrExpected);
    25d2:	87 e2       	ldi	r24, 0x27	; 39
    25d4:	93 e0       	ldi	r25, 0x03	; 3
    25d6:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
        UnityPrintNumberByStyle(actual, style);
    25da:	8f 81       	ldd	r24, Y+7	; 0x07
    25dc:	98 85       	ldd	r25, Y+8	; 0x08
    25de:	a9 85       	ldd	r26, Y+9	; 0x09
    25e0:	ba 85       	ldd	r27, Y+10	; 0x0a
    25e2:	bc 01       	movw	r22, r24
    25e4:	cd 01       	movw	r24, r26
    25e6:	4a 89       	ldd	r20, Y+18	; 0x12
    25e8:	0e 94 54 08 	call	0x10a8	; 0x10a8 <UnityPrintNumberByStyle>
        if (compare & UNITY_GREATER_THAN) { UnityPrint(UnityStrGt);      }
    25ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    25ee:	88 2f       	mov	r24, r24
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	82 70       	andi	r24, 0x02	; 2
    25f4:	90 70       	andi	r25, 0x00	; 0
    25f6:	00 97       	sbiw	r24, 0x00	; 0
    25f8:	21 f0       	breq	.+8      	; 0x2602 <UnityAssertGreaterOrLessOrEqualNumber+0x1e2>
    25fa:	88 e3       	ldi	r24, 0x38	; 56
    25fc:	93 e0       	ldi	r25, 0x03	; 3
    25fe:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
        if (compare & UNITY_SMALLER_THAN) { UnityPrint(UnityStrLt);      }
    2602:	8b 85       	ldd	r24, Y+11	; 0x0b
    2604:	88 2f       	mov	r24, r24
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	84 70       	andi	r24, 0x04	; 4
    260a:	90 70       	andi	r25, 0x00	; 0
    260c:	00 97       	sbiw	r24, 0x00	; 0
    260e:	21 f0       	breq	.+8      	; 0x2618 <UnityAssertGreaterOrLessOrEqualNumber+0x1f8>
    2610:	8d e4       	ldi	r24, 0x4D	; 77
    2612:	93 e0       	ldi	r25, 0x03	; 3
    2614:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
        if (compare & UNITY_EQUAL_TO)     { UnityPrint(UnityStrOrEqual); }
    2618:	8b 85       	ldd	r24, Y+11	; 0x0b
    261a:	88 2f       	mov	r24, r24
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	81 70       	andi	r24, 0x01	; 1
    2620:	90 70       	andi	r25, 0x00	; 0
    2622:	88 23       	and	r24, r24
    2624:	21 f0       	breq	.+8      	; 0x262e <UnityAssertGreaterOrLessOrEqualNumber+0x20e>
    2626:	8f e5       	ldi	r24, 0x5F	; 95
    2628:	93 e0       	ldi	r25, 0x03	; 3
    262a:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
        UnityPrintNumberByStyle(threshold, style);
    262e:	8b 81       	ldd	r24, Y+3	; 0x03
    2630:	9c 81       	ldd	r25, Y+4	; 0x04
    2632:	ad 81       	ldd	r26, Y+5	; 0x05
    2634:	be 81       	ldd	r27, Y+6	; 0x06
    2636:	bc 01       	movw	r22, r24
    2638:	cd 01       	movw	r24, r26
    263a:	4a 89       	ldd	r20, Y+18	; 0x12
    263c:	0e 94 54 08 	call	0x10a8	; 0x10a8 <UnityPrintNumberByStyle>
        UnityAddMsgIfSpecified(msg);
    2640:	8c 85       	ldd	r24, Y+12	; 0x0c
    2642:	9d 85       	ldd	r25, Y+13	; 0x0d
    2644:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <UnityAddMsgIfSpecified>
        UNITY_FAIL_AND_BAIL;
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	a0 e0       	ldi	r26, 0x00	; 0
    264e:	b0 e0       	ldi	r27, 0x00	; 0
    2650:	80 93 60 06 	sts	0x0660, r24
    2654:	90 93 61 06 	sts	0x0661, r25
    2658:	a0 93 62 06 	sts	0x0662, r26
    265c:	b0 93 63 06 	sts	0x0663, r27
    2660:	88 e6       	ldi	r24, 0x68	; 104
    2662:	96 e0       	ldi	r25, 0x06	; 6
    2664:	61 e0       	ldi	r22, 0x01	; 1
    2666:	70 e0       	ldi	r23, 0x00	; 0
    2668:	0e 94 48 29 	call	0x5290	; 0x5290 <longjmp>
                                           const UNITY_DISPLAY_STYLE_T style)
{
    int failed = 0;
    RETURN_IF_FAIL_OR_IGNORE;

    if ((threshold == actual) && (compare & UNITY_EQUAL_TO)) { return; }
    266c:	00 00       	nop
        if (compare & UNITY_EQUAL_TO)     { UnityPrint(UnityStrOrEqual); }
        UnityPrintNumberByStyle(threshold, style);
        UnityAddMsgIfSpecified(msg);
        UNITY_FAIL_AND_BAIL;
    }
}
    266e:	62 96       	adiw	r28, 0x12	; 18
    2670:	0f b6       	in	r0, 0x3f	; 63
    2672:	f8 94       	cli
    2674:	de bf       	out	0x3e, r29	; 62
    2676:	0f be       	out	0x3f, r0	; 63
    2678:	cd bf       	out	0x3d, r28	; 61
    267a:	cf 91       	pop	r28
    267c:	df 91       	pop	r29
    267e:	0f 91       	pop	r16
    2680:	ff 90       	pop	r15
    2682:	ef 90       	pop	r14
    2684:	df 90       	pop	r13
    2686:	cf 90       	pop	r12
    2688:	bf 90       	pop	r11
    268a:	af 90       	pop	r10
    268c:	8f 90       	pop	r8
    268e:	08 95       	ret

00002690 <UnityAssertEqualIntArray>:
                              const UNITY_UINT32 num_elements,
                              const char* msg,
                              const UNITY_LINE_TYPE lineNumber,
                              const UNITY_DISPLAY_STYLE_T style,
                              const UNITY_FLAGS_T flags)
{
    2690:	8f 92       	push	r8
    2692:	af 92       	push	r10
    2694:	cf 92       	push	r12
    2696:	df 92       	push	r13
    2698:	ef 92       	push	r14
    269a:	ff 92       	push	r15
    269c:	0f 93       	push	r16
    269e:	1f 93       	push	r17
    26a0:	df 93       	push	r29
    26a2:	cf 93       	push	r28
    26a4:	cd b7       	in	r28, 0x3d	; 61
    26a6:	de b7       	in	r29, 0x3e	; 62
    26a8:	a4 97       	sbiw	r28, 0x24	; 36
    26aa:	0f b6       	in	r0, 0x3f	; 63
    26ac:	f8 94       	cli
    26ae:	de bf       	out	0x3e, r29	; 62
    26b0:	0f be       	out	0x3f, r0	; 63
    26b2:	cd bf       	out	0x3d, r28	; 61
    26b4:	9e 8b       	std	Y+22, r25	; 0x16
    26b6:	8d 8b       	std	Y+21, r24	; 0x15
    26b8:	78 8f       	std	Y+24, r23	; 0x18
    26ba:	6f 8b       	std	Y+23, r22	; 0x17
    26bc:	29 8f       	std	Y+25, r18	; 0x19
    26be:	3a 8f       	std	Y+26, r19	; 0x1a
    26c0:	4b 8f       	std	Y+27, r20	; 0x1b
    26c2:	5c 8f       	std	Y+28, r21	; 0x1c
    26c4:	1e 8f       	std	Y+30, r17	; 0x1e
    26c6:	0d 8f       	std	Y+29, r16	; 0x1d
    26c8:	cf 8e       	std	Y+31, r12	; 0x1f
    26ca:	d8 a2       	std	Y+32, r13	; 0x20
    26cc:	e9 a2       	std	Y+33, r14	; 0x21
    26ce:	fa a2       	std	Y+34, r15	; 0x22
    26d0:	ab a2       	std	Y+35, r10	; 0x23
    26d2:	8c a2       	std	Y+36, r8	; 0x24
    UNITY_UINT32 elements  = num_elements;
    26d4:	89 8d       	ldd	r24, Y+25	; 0x19
    26d6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    26d8:	ab 8d       	ldd	r26, Y+27	; 0x1b
    26da:	bc 8d       	ldd	r27, Y+28	; 0x1c
    26dc:	89 83       	std	Y+1, r24	; 0x01
    26de:	9a 83       	std	Y+2, r25	; 0x02
    26e0:	ab 83       	std	Y+3, r26	; 0x03
    26e2:	bc 83       	std	Y+4, r27	; 0x04
    unsigned int length    = style & 0xF;
    26e4:	8b a1       	ldd	r24, Y+35	; 0x23
    26e6:	88 2f       	mov	r24, r24
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	8f 70       	andi	r24, 0x0F	; 15
    26ec:	90 70       	andi	r25, 0x00	; 0
    26ee:	9e 83       	std	Y+6, r25	; 0x06
    26f0:	8d 83       	std	Y+5, r24	; 0x05
    unsigned int increment = 0;
    26f2:	18 86       	std	Y+8, r1	; 0x08
    26f4:	1f 82       	std	Y+7, r1	; 0x07

    RETURN_IF_FAIL_OR_IGNORE;
    26f6:	80 91 60 06 	lds	r24, 0x0660
    26fa:	90 91 61 06 	lds	r25, 0x0661
    26fe:	a0 91 62 06 	lds	r26, 0x0662
    2702:	b0 91 63 06 	lds	r27, 0x0663
    2706:	00 97       	sbiw	r24, 0x00	; 0
    2708:	a1 05       	cpc	r26, r1
    270a:	b1 05       	cpc	r27, r1
    270c:	09 f0       	breq	.+2      	; 0x2710 <UnityAssertEqualIntArray+0x80>
    270e:	ae c1       	rjmp	.+860    	; 0x2a6c <UnityAssertEqualIntArray+0x3dc>
    2710:	80 91 64 06 	lds	r24, 0x0664
    2714:	90 91 65 06 	lds	r25, 0x0665
    2718:	a0 91 66 06 	lds	r26, 0x0666
    271c:	b0 91 67 06 	lds	r27, 0x0667
    2720:	00 97       	sbiw	r24, 0x00	; 0
    2722:	a1 05       	cpc	r26, r1
    2724:	b1 05       	cpc	r27, r1
    2726:	09 f0       	breq	.+2      	; 0x272a <UnityAssertEqualIntArray+0x9a>
    2728:	a1 c1       	rjmp	.+834    	; 0x2a6c <UnityAssertEqualIntArray+0x3dc>

    if (num_elements == 0)
    272a:	89 8d       	ldd	r24, Y+25	; 0x19
    272c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    272e:	ab 8d       	ldd	r26, Y+27	; 0x1b
    2730:	bc 8d       	ldd	r27, Y+28	; 0x1c
    2732:	00 97       	sbiw	r24, 0x00	; 0
    2734:	a1 05       	cpc	r26, r1
    2736:	b1 05       	cpc	r27, r1
    2738:	11 f5       	brne	.+68     	; 0x277e <UnityAssertEqualIntArray+0xee>
    {
        UnityPrintPointlessAndBail();
    273a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    273c:	98 a1       	ldd	r25, Y+32	; 0x20
    273e:	a9 a1       	ldd	r26, Y+33	; 0x21
    2740:	ba a1       	ldd	r27, Y+34	; 0x22
    2742:	bc 01       	movw	r22, r24
    2744:	cd 01       	movw	r24, r26
    2746:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <UnityTestResultsFailBegin>
    274a:	89 ea       	ldi	r24, 0xA9	; 169
    274c:	93 e0       	ldi	r25, 0x03	; 3
    274e:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
    2752:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2754:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2756:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <UnityAddMsgIfSpecified>
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	a0 e0       	ldi	r26, 0x00	; 0
    2760:	b0 e0       	ldi	r27, 0x00	; 0
    2762:	80 93 60 06 	sts	0x0660, r24
    2766:	90 93 61 06 	sts	0x0661, r25
    276a:	a0 93 62 06 	sts	0x0662, r26
    276e:	b0 93 63 06 	sts	0x0663, r27
    2772:	88 e6       	ldi	r24, 0x68	; 104
    2774:	96 e0       	ldi	r25, 0x06	; 6
    2776:	61 e0       	ldi	r22, 0x01	; 1
    2778:	70 e0       	ldi	r23, 0x00	; 0
    277a:	0e 94 48 29 	call	0x5290	; 0x5290 <longjmp>
    }

    if (expected == actual)
    277e:	2d 89       	ldd	r18, Y+21	; 0x15
    2780:	3e 89       	ldd	r19, Y+22	; 0x16
    2782:	8f 89       	ldd	r24, Y+23	; 0x17
    2784:	98 8d       	ldd	r25, Y+24	; 0x18
    2786:	28 17       	cp	r18, r24
    2788:	39 07       	cpc	r19, r25
    278a:	09 f4       	brne	.+2      	; 0x278e <UnityAssertEqualIntArray+0xfe>
    278c:	6e c1       	rjmp	.+732    	; 0x2a6a <UnityAssertEqualIntArray+0x3da>
    {
        return; /* Both are NULL or same pointer */
    }

    if (UnityIsOneArrayNull(expected, actual, lineNumber, msg))
    278e:	8d 89       	ldd	r24, Y+21	; 0x15
    2790:	9e 89       	ldd	r25, Y+22	; 0x16
    2792:	6f 89       	ldd	r22, Y+23	; 0x17
    2794:	78 8d       	ldd	r23, Y+24	; 0x18
    2796:	2f 8d       	ldd	r18, Y+31	; 0x1f
    2798:	38 a1       	ldd	r19, Y+32	; 0x20
    279a:	49 a1       	ldd	r20, Y+33	; 0x21
    279c:	5a a1       	ldd	r21, Y+34	; 0x22
    279e:	ed 8d       	ldd	r30, Y+29	; 0x1d
    27a0:	fe 8d       	ldd	r31, Y+30	; 0x1e
    27a2:	8f 01       	movw	r16, r30
    27a4:	0e 94 7d 10 	call	0x20fa	; 0x20fa <UnityIsOneArrayNull>
    27a8:	00 97       	sbiw	r24, 0x00	; 0
    27aa:	09 f4       	brne	.+2      	; 0x27ae <UnityAssertEqualIntArray+0x11e>
    27ac:	3d c1       	rjmp	.+634    	; 0x2a28 <UnityAssertEqualIntArray+0x398>
    {
        UNITY_FAIL_AND_BAIL;
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	a0 e0       	ldi	r26, 0x00	; 0
    27b4:	b0 e0       	ldi	r27, 0x00	; 0
    27b6:	80 93 60 06 	sts	0x0660, r24
    27ba:	90 93 61 06 	sts	0x0661, r25
    27be:	a0 93 62 06 	sts	0x0662, r26
    27c2:	b0 93 63 06 	sts	0x0663, r27
    27c6:	88 e6       	ldi	r24, 0x68	; 104
    27c8:	96 e0       	ldi	r25, 0x06	; 6
    27ca:	61 e0       	ldi	r22, 0x01	; 1
    27cc:	70 e0       	ldi	r23, 0x00	; 0
    27ce:	0e 94 48 29 	call	0x5290	; 0x5290 <longjmp>
    while ((elements > 0) && (elements--))
    {
        UNITY_INT expect_val;
        UNITY_INT actual_val;

        switch (length)
    27d2:	8d 81       	ldd	r24, Y+5	; 0x05
    27d4:	9e 81       	ldd	r25, Y+6	; 0x06
    27d6:	81 30       	cpi	r24, 0x01	; 1
    27d8:	91 05       	cpc	r25, r1
    27da:	21 f0       	breq	.+8      	; 0x27e4 <UnityAssertEqualIntArray+0x154>
    27dc:	82 30       	cpi	r24, 0x02	; 2
    27de:	91 05       	cpc	r25, r1
    27e0:	01 f1       	breq	.+64     	; 0x2822 <UnityAssertEqualIntArray+0x192>
    27e2:	3e c0       	rjmp	.+124    	; 0x2860 <UnityAssertEqualIntArray+0x1d0>
        {
            case 1:
                expect_val = *(UNITY_PTR_ATTRIBUTE const UNITY_INT8*)expected;
    27e4:	8d 89       	ldd	r24, Y+21	; 0x15
    27e6:	9e 89       	ldd	r25, Y+22	; 0x16
    27e8:	fc 01       	movw	r30, r24
    27ea:	80 81       	ld	r24, Z
    27ec:	99 27       	eor	r25, r25
    27ee:	87 fd       	sbrc	r24, 7
    27f0:	90 95       	com	r25
    27f2:	a9 2f       	mov	r26, r25
    27f4:	b9 2f       	mov	r27, r25
    27f6:	89 87       	std	Y+9, r24	; 0x09
    27f8:	9a 87       	std	Y+10, r25	; 0x0a
    27fa:	ab 87       	std	Y+11, r26	; 0x0b
    27fc:	bc 87       	std	Y+12, r27	; 0x0c
                actual_val = *(UNITY_PTR_ATTRIBUTE const UNITY_INT8*)actual;
    27fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2800:	98 8d       	ldd	r25, Y+24	; 0x18
    2802:	fc 01       	movw	r30, r24
    2804:	80 81       	ld	r24, Z
    2806:	99 27       	eor	r25, r25
    2808:	87 fd       	sbrc	r24, 7
    280a:	90 95       	com	r25
    280c:	a9 2f       	mov	r26, r25
    280e:	b9 2f       	mov	r27, r25
    2810:	8d 87       	std	Y+13, r24	; 0x0d
    2812:	9e 87       	std	Y+14, r25	; 0x0e
    2814:	af 87       	std	Y+15, r26	; 0x0f
    2816:	b8 8b       	std	Y+16, r27	; 0x10
                increment  = sizeof(UNITY_INT8);
    2818:	81 e0       	ldi	r24, 0x01	; 1
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	98 87       	std	Y+8, r25	; 0x08
    281e:	8f 83       	std	Y+7, r24	; 0x07
                break;
    2820:	3e c0       	rjmp	.+124    	; 0x289e <UnityAssertEqualIntArray+0x20e>

            case 2:
                expect_val = *(UNITY_PTR_ATTRIBUTE const UNITY_INT16*)expected;
    2822:	8d 89       	ldd	r24, Y+21	; 0x15
    2824:	9e 89       	ldd	r25, Y+22	; 0x16
    2826:	fc 01       	movw	r30, r24
    2828:	80 81       	ld	r24, Z
    282a:	91 81       	ldd	r25, Z+1	; 0x01
    282c:	aa 27       	eor	r26, r26
    282e:	97 fd       	sbrc	r25, 7
    2830:	a0 95       	com	r26
    2832:	ba 2f       	mov	r27, r26
    2834:	89 87       	std	Y+9, r24	; 0x09
    2836:	9a 87       	std	Y+10, r25	; 0x0a
    2838:	ab 87       	std	Y+11, r26	; 0x0b
    283a:	bc 87       	std	Y+12, r27	; 0x0c
                actual_val = *(UNITY_PTR_ATTRIBUTE const UNITY_INT16*)actual;
    283c:	8f 89       	ldd	r24, Y+23	; 0x17
    283e:	98 8d       	ldd	r25, Y+24	; 0x18
    2840:	fc 01       	movw	r30, r24
    2842:	80 81       	ld	r24, Z
    2844:	91 81       	ldd	r25, Z+1	; 0x01
    2846:	aa 27       	eor	r26, r26
    2848:	97 fd       	sbrc	r25, 7
    284a:	a0 95       	com	r26
    284c:	ba 2f       	mov	r27, r26
    284e:	8d 87       	std	Y+13, r24	; 0x0d
    2850:	9e 87       	std	Y+14, r25	; 0x0e
    2852:	af 87       	std	Y+15, r26	; 0x0f
    2854:	b8 8b       	std	Y+16, r27	; 0x10
                increment  = sizeof(UNITY_INT16);
    2856:	82 e0       	ldi	r24, 0x02	; 2
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	98 87       	std	Y+8, r25	; 0x08
    285c:	8f 83       	std	Y+7, r24	; 0x07
                break;
    285e:	1f c0       	rjmp	.+62     	; 0x289e <UnityAssertEqualIntArray+0x20e>
                break;
#endif

            default: /* default is length 4 bytes */
            case 4:
                expect_val = *(UNITY_PTR_ATTRIBUTE const UNITY_INT32*)expected;
    2860:	8d 89       	ldd	r24, Y+21	; 0x15
    2862:	9e 89       	ldd	r25, Y+22	; 0x16
    2864:	fc 01       	movw	r30, r24
    2866:	80 81       	ld	r24, Z
    2868:	91 81       	ldd	r25, Z+1	; 0x01
    286a:	a2 81       	ldd	r26, Z+2	; 0x02
    286c:	b3 81       	ldd	r27, Z+3	; 0x03
    286e:	89 87       	std	Y+9, r24	; 0x09
    2870:	9a 87       	std	Y+10, r25	; 0x0a
    2872:	ab 87       	std	Y+11, r26	; 0x0b
    2874:	bc 87       	std	Y+12, r27	; 0x0c
                actual_val = *(UNITY_PTR_ATTRIBUTE const UNITY_INT32*)actual;
    2876:	8f 89       	ldd	r24, Y+23	; 0x17
    2878:	98 8d       	ldd	r25, Y+24	; 0x18
    287a:	fc 01       	movw	r30, r24
    287c:	80 81       	ld	r24, Z
    287e:	91 81       	ldd	r25, Z+1	; 0x01
    2880:	a2 81       	ldd	r26, Z+2	; 0x02
    2882:	b3 81       	ldd	r27, Z+3	; 0x03
    2884:	8d 87       	std	Y+13, r24	; 0x0d
    2886:	9e 87       	std	Y+14, r25	; 0x0e
    2888:	af 87       	std	Y+15, r26	; 0x0f
    288a:	b8 8b       	std	Y+16, r27	; 0x10
                increment  = sizeof(UNITY_INT32);
    288c:	84 e0       	ldi	r24, 0x04	; 4
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	98 87       	std	Y+8, r25	; 0x08
    2892:	8f 83       	std	Y+7, r24	; 0x07
                length = 4;
    2894:	84 e0       	ldi	r24, 0x04	; 4
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	9e 83       	std	Y+6, r25	; 0x06
    289a:	8d 83       	std	Y+5, r24	; 0x05
                break;
    289c:	00 00       	nop
        }

        if (expect_val != actual_val)
    289e:	29 85       	ldd	r18, Y+9	; 0x09
    28a0:	3a 85       	ldd	r19, Y+10	; 0x0a
    28a2:	4b 85       	ldd	r20, Y+11	; 0x0b
    28a4:	5c 85       	ldd	r21, Y+12	; 0x0c
    28a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    28a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    28aa:	af 85       	ldd	r26, Y+15	; 0x0f
    28ac:	b8 89       	ldd	r27, Y+16	; 0x10
    28ae:	28 17       	cp	r18, r24
    28b0:	39 07       	cpc	r19, r25
    28b2:	4a 07       	cpc	r20, r26
    28b4:	5b 07       	cpc	r21, r27
    28b6:	09 f4       	brne	.+2      	; 0x28ba <UnityAssertEqualIntArray+0x22a>
    28b8:	a4 c0       	rjmp	.+328    	; 0x2a02 <UnityAssertEqualIntArray+0x372>
        {
            if ((style & UNITY_DISPLAY_RANGE_UINT) && (length < (UNITY_INT_WIDTH / 8)))
    28ba:	8b a1       	ldd	r24, Y+35	; 0x23
    28bc:	88 2f       	mov	r24, r24
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	80 72       	andi	r24, 0x20	; 32
    28c2:	90 70       	andi	r25, 0x00	; 0
    28c4:	00 97       	sbiw	r24, 0x00	; 0
    28c6:	09 f4       	brne	.+2      	; 0x28ca <UnityAssertEqualIntArray+0x23a>
    28c8:	49 c0       	rjmp	.+146    	; 0x295c <UnityAssertEqualIntArray+0x2cc>
    28ca:	8d 81       	ldd	r24, Y+5	; 0x05
    28cc:	9e 81       	ldd	r25, Y+6	; 0x06
    28ce:	82 30       	cpi	r24, 0x02	; 2
    28d0:	91 05       	cpc	r25, r1
    28d2:	08 f0       	brcs	.+2      	; 0x28d6 <UnityAssertEqualIntArray+0x246>
    28d4:	43 c0       	rjmp	.+134    	; 0x295c <UnityAssertEqualIntArray+0x2cc>
            {   /* For UINT, remove sign extension (padding 1's) from signed type casts above */
                UNITY_INT mask = 1;
    28d6:	81 e0       	ldi	r24, 0x01	; 1
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	a0 e0       	ldi	r26, 0x00	; 0
    28dc:	b0 e0       	ldi	r27, 0x00	; 0
    28de:	89 8b       	std	Y+17, r24	; 0x11
    28e0:	9a 8b       	std	Y+18, r25	; 0x12
    28e2:	ab 8b       	std	Y+19, r26	; 0x13
    28e4:	bc 8b       	std	Y+20, r27	; 0x14
                mask = (mask << 8 * length) - 1;
    28e6:	8d 81       	ldd	r24, Y+5	; 0x05
    28e8:	9e 81       	ldd	r25, Y+6	; 0x06
    28ea:	88 0f       	add	r24, r24
    28ec:	99 1f       	adc	r25, r25
    28ee:	88 0f       	add	r24, r24
    28f0:	99 1f       	adc	r25, r25
    28f2:	88 0f       	add	r24, r24
    28f4:	99 1f       	adc	r25, r25
    28f6:	9c 01       	movw	r18, r24
    28f8:	89 89       	ldd	r24, Y+17	; 0x11
    28fa:	9a 89       	ldd	r25, Y+18	; 0x12
    28fc:	ab 89       	ldd	r26, Y+19	; 0x13
    28fe:	bc 89       	ldd	r27, Y+20	; 0x14
    2900:	04 c0       	rjmp	.+8      	; 0x290a <UnityAssertEqualIntArray+0x27a>
    2902:	88 0f       	add	r24, r24
    2904:	99 1f       	adc	r25, r25
    2906:	aa 1f       	adc	r26, r26
    2908:	bb 1f       	adc	r27, r27
    290a:	2a 95       	dec	r18
    290c:	d2 f7       	brpl	.-12     	; 0x2902 <UnityAssertEqualIntArray+0x272>
    290e:	01 97       	sbiw	r24, 0x01	; 1
    2910:	a1 09       	sbc	r26, r1
    2912:	b1 09       	sbc	r27, r1
    2914:	89 8b       	std	Y+17, r24	; 0x11
    2916:	9a 8b       	std	Y+18, r25	; 0x12
    2918:	ab 8b       	std	Y+19, r26	; 0x13
    291a:	bc 8b       	std	Y+20, r27	; 0x14
                expect_val &= mask;
    291c:	29 85       	ldd	r18, Y+9	; 0x09
    291e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2920:	4b 85       	ldd	r20, Y+11	; 0x0b
    2922:	5c 85       	ldd	r21, Y+12	; 0x0c
    2924:	89 89       	ldd	r24, Y+17	; 0x11
    2926:	9a 89       	ldd	r25, Y+18	; 0x12
    2928:	ab 89       	ldd	r26, Y+19	; 0x13
    292a:	bc 89       	ldd	r27, Y+20	; 0x14
    292c:	82 23       	and	r24, r18
    292e:	93 23       	and	r25, r19
    2930:	a4 23       	and	r26, r20
    2932:	b5 23       	and	r27, r21
    2934:	89 87       	std	Y+9, r24	; 0x09
    2936:	9a 87       	std	Y+10, r25	; 0x0a
    2938:	ab 87       	std	Y+11, r26	; 0x0b
    293a:	bc 87       	std	Y+12, r27	; 0x0c
                actual_val &= mask;
    293c:	2d 85       	ldd	r18, Y+13	; 0x0d
    293e:	3e 85       	ldd	r19, Y+14	; 0x0e
    2940:	4f 85       	ldd	r20, Y+15	; 0x0f
    2942:	58 89       	ldd	r21, Y+16	; 0x10
    2944:	89 89       	ldd	r24, Y+17	; 0x11
    2946:	9a 89       	ldd	r25, Y+18	; 0x12
    2948:	ab 89       	ldd	r26, Y+19	; 0x13
    294a:	bc 89       	ldd	r27, Y+20	; 0x14
    294c:	82 23       	and	r24, r18
    294e:	93 23       	and	r25, r19
    2950:	a4 23       	and	r26, r20
    2952:	b5 23       	and	r27, r21
    2954:	8d 87       	std	Y+13, r24	; 0x0d
    2956:	9e 87       	std	Y+14, r25	; 0x0e
    2958:	af 87       	std	Y+15, r26	; 0x0f
    295a:	b8 8b       	std	Y+16, r27	; 0x10
            }
            UnityTestResultsFailBegin(lineNumber);
    295c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    295e:	98 a1       	ldd	r25, Y+32	; 0x20
    2960:	a9 a1       	ldd	r26, Y+33	; 0x21
    2962:	ba a1       	ldd	r27, Y+34	; 0x22
    2964:	bc 01       	movw	r22, r24
    2966:	cd 01       	movw	r24, r26
    2968:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <UnityTestResultsFailBegin>
            UnityPrint(UnityStrElement);
    296c:	8c e6       	ldi	r24, 0x6C	; 108
    296e:	93 e0       	ldi	r25, 0x03	; 3
    2970:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
            UnityPrintNumberUnsigned(num_elements - elements - 1);
    2974:	29 8d       	ldd	r18, Y+25	; 0x19
    2976:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2978:	4b 8d       	ldd	r20, Y+27	; 0x1b
    297a:	5c 8d       	ldd	r21, Y+28	; 0x1c
    297c:	89 81       	ldd	r24, Y+1	; 0x01
    297e:	9a 81       	ldd	r25, Y+2	; 0x02
    2980:	ab 81       	ldd	r26, Y+3	; 0x03
    2982:	bc 81       	ldd	r27, Y+4	; 0x04
    2984:	79 01       	movw	r14, r18
    2986:	8a 01       	movw	r16, r20
    2988:	e8 1a       	sub	r14, r24
    298a:	f9 0a       	sbc	r15, r25
    298c:	0a 0b       	sbc	r16, r26
    298e:	1b 0b       	sbc	r17, r27
    2990:	d8 01       	movw	r26, r16
    2992:	c7 01       	movw	r24, r14
    2994:	01 97       	sbiw	r24, 0x01	; 1
    2996:	a1 09       	sbc	r26, r1
    2998:	b1 09       	sbc	r27, r1
    299a:	bc 01       	movw	r22, r24
    299c:	cd 01       	movw	r24, r26
    299e:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <UnityPrintNumberUnsigned>
            UnityPrint(UnityStrExpected);
    29a2:	87 e2       	ldi	r24, 0x27	; 39
    29a4:	93 e0       	ldi	r25, 0x03	; 3
    29a6:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
            UnityPrintNumberByStyle(expect_val, style);
    29aa:	89 85       	ldd	r24, Y+9	; 0x09
    29ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ae:	ab 85       	ldd	r26, Y+11	; 0x0b
    29b0:	bc 85       	ldd	r27, Y+12	; 0x0c
    29b2:	bc 01       	movw	r22, r24
    29b4:	cd 01       	movw	r24, r26
    29b6:	4b a1       	ldd	r20, Y+35	; 0x23
    29b8:	0e 94 54 08 	call	0x10a8	; 0x10a8 <UnityPrintNumberByStyle>
            UnityPrint(UnityStrWas);
    29bc:	82 e3       	ldi	r24, 0x32	; 50
    29be:	93 e0       	ldi	r25, 0x03	; 3
    29c0:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
            UnityPrintNumberByStyle(actual_val, style);
    29c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    29c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    29c8:	af 85       	ldd	r26, Y+15	; 0x0f
    29ca:	b8 89       	ldd	r27, Y+16	; 0x10
    29cc:	bc 01       	movw	r22, r24
    29ce:	cd 01       	movw	r24, r26
    29d0:	4b a1       	ldd	r20, Y+35	; 0x23
    29d2:	0e 94 54 08 	call	0x10a8	; 0x10a8 <UnityPrintNumberByStyle>
            UnityAddMsgIfSpecified(msg);
    29d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29da:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <UnityAddMsgIfSpecified>
            UNITY_FAIL_AND_BAIL;
    29de:	81 e0       	ldi	r24, 0x01	; 1
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	a0 e0       	ldi	r26, 0x00	; 0
    29e4:	b0 e0       	ldi	r27, 0x00	; 0
    29e6:	80 93 60 06 	sts	0x0660, r24
    29ea:	90 93 61 06 	sts	0x0661, r25
    29ee:	a0 93 62 06 	sts	0x0662, r26
    29f2:	b0 93 63 06 	sts	0x0663, r27
    29f6:	88 e6       	ldi	r24, 0x68	; 104
    29f8:	96 e0       	ldi	r25, 0x06	; 6
    29fa:	61 e0       	ldi	r22, 0x01	; 1
    29fc:	70 e0       	ldi	r23, 0x00	; 0
    29fe:	0e 94 48 29 	call	0x5290	; 0x5290 <longjmp>
        }
        /* Walk through array by incrementing the pointers */
        if (flags == UNITY_ARRAY_TO_ARRAY)
    2a02:	8c a1       	ldd	r24, Y+36	; 0x24
    2a04:	81 30       	cpi	r24, 0x01	; 1
    2a06:	41 f4       	brne	.+16     	; 0x2a18 <UnityAssertEqualIntArray+0x388>
        {
            expected = (UNITY_INTERNAL_PTR)((const char*)expected + increment);
    2a08:	2d 89       	ldd	r18, Y+21	; 0x15
    2a0a:	3e 89       	ldd	r19, Y+22	; 0x16
    2a0c:	8f 81       	ldd	r24, Y+7	; 0x07
    2a0e:	98 85       	ldd	r25, Y+8	; 0x08
    2a10:	82 0f       	add	r24, r18
    2a12:	93 1f       	adc	r25, r19
    2a14:	9e 8b       	std	Y+22, r25	; 0x16
    2a16:	8d 8b       	std	Y+21, r24	; 0x15
        }
        actual = (UNITY_INTERNAL_PTR)((const char*)actual + increment);
    2a18:	2f 89       	ldd	r18, Y+23	; 0x17
    2a1a:	38 8d       	ldd	r19, Y+24	; 0x18
    2a1c:	8f 81       	ldd	r24, Y+7	; 0x07
    2a1e:	98 85       	ldd	r25, Y+8	; 0x08
    2a20:	82 0f       	add	r24, r18
    2a22:	93 1f       	adc	r25, r19
    2a24:	98 8f       	std	Y+24, r25	; 0x18
    2a26:	8f 8b       	std	Y+23, r24	; 0x17
    if (UnityIsOneArrayNull(expected, actual, lineNumber, msg))
    {
        UNITY_FAIL_AND_BAIL;
    }

    while ((elements > 0) && (elements--))
    2a28:	89 81       	ldd	r24, Y+1	; 0x01
    2a2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a2c:	ab 81       	ldd	r26, Y+3	; 0x03
    2a2e:	bc 81       	ldd	r27, Y+4	; 0x04
    2a30:	00 97       	sbiw	r24, 0x00	; 0
    2a32:	a1 05       	cpc	r26, r1
    2a34:	b1 05       	cpc	r27, r1
    2a36:	d1 f0       	breq	.+52     	; 0x2a6c <UnityAssertEqualIntArray+0x3dc>
    2a38:	21 e0       	ldi	r18, 0x01	; 1
    2a3a:	89 81       	ldd	r24, Y+1	; 0x01
    2a3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a3e:	ab 81       	ldd	r26, Y+3	; 0x03
    2a40:	bc 81       	ldd	r27, Y+4	; 0x04
    2a42:	00 97       	sbiw	r24, 0x00	; 0
    2a44:	a1 05       	cpc	r26, r1
    2a46:	b1 05       	cpc	r27, r1
    2a48:	09 f4       	brne	.+2      	; 0x2a4c <UnityAssertEqualIntArray+0x3bc>
    2a4a:	20 e0       	ldi	r18, 0x00	; 0
    2a4c:	89 81       	ldd	r24, Y+1	; 0x01
    2a4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a50:	ab 81       	ldd	r26, Y+3	; 0x03
    2a52:	bc 81       	ldd	r27, Y+4	; 0x04
    2a54:	01 97       	sbiw	r24, 0x01	; 1
    2a56:	a1 09       	sbc	r26, r1
    2a58:	b1 09       	sbc	r27, r1
    2a5a:	89 83       	std	Y+1, r24	; 0x01
    2a5c:	9a 83       	std	Y+2, r25	; 0x02
    2a5e:	ab 83       	std	Y+3, r26	; 0x03
    2a60:	bc 83       	std	Y+4, r27	; 0x04
    2a62:	22 23       	and	r18, r18
    2a64:	09 f0       	breq	.+2      	; 0x2a68 <UnityAssertEqualIntArray+0x3d8>
    2a66:	b5 ce       	rjmp	.-662    	; 0x27d2 <UnityAssertEqualIntArray+0x142>
    2a68:	01 c0       	rjmp	.+2      	; 0x2a6c <UnityAssertEqualIntArray+0x3dc>
        UnityPrintPointlessAndBail();
    }

    if (expected == actual)
    {
        return; /* Both are NULL or same pointer */
    2a6a:	00 00       	nop
        {
            expected = (UNITY_INTERNAL_PTR)((const char*)expected + increment);
        }
        actual = (UNITY_INTERNAL_PTR)((const char*)actual + increment);
    }
}
    2a6c:	a4 96       	adiw	r28, 0x24	; 36
    2a6e:	0f b6       	in	r0, 0x3f	; 63
    2a70:	f8 94       	cli
    2a72:	de bf       	out	0x3e, r29	; 62
    2a74:	0f be       	out	0x3f, r0	; 63
    2a76:	cd bf       	out	0x3d, r28	; 61
    2a78:	cf 91       	pop	r28
    2a7a:	df 91       	pop	r29
    2a7c:	1f 91       	pop	r17
    2a7e:	0f 91       	pop	r16
    2a80:	ff 90       	pop	r15
    2a82:	ef 90       	pop	r14
    2a84:	df 90       	pop	r13
    2a86:	cf 90       	pop	r12
    2a88:	af 90       	pop	r10
    2a8a:	8f 90       	pop	r8
    2a8c:	08 95       	ret

00002a8e <UnityFloatsWithin>:
    UnityPrint(UnityStrDelta)
#endif /* UNITY_EXCLUDE_FLOAT_PRINT */

/*-----------------------------------------------*/
static int UnityFloatsWithin(UNITY_FLOAT delta, UNITY_FLOAT expected, UNITY_FLOAT actual)
{
    2a8e:	df 92       	push	r13
    2a90:	ef 92       	push	r14
    2a92:	ff 92       	push	r15
    2a94:	0f 93       	push	r16
    2a96:	1f 93       	push	r17
    2a98:	df 93       	push	r29
    2a9a:	cf 93       	push	r28
    2a9c:	cd b7       	in	r28, 0x3d	; 61
    2a9e:	de b7       	in	r29, 0x3e	; 62
    2aa0:	60 97       	sbiw	r28, 0x10	; 16
    2aa2:	0f b6       	in	r0, 0x3f	; 63
    2aa4:	f8 94       	cli
    2aa6:	de bf       	out	0x3e, r29	; 62
    2aa8:	0f be       	out	0x3f, r0	; 63
    2aaa:	cd bf       	out	0x3d, r28	; 61
    2aac:	6d 83       	std	Y+5, r22	; 0x05
    2aae:	7e 83       	std	Y+6, r23	; 0x06
    2ab0:	8f 83       	std	Y+7, r24	; 0x07
    2ab2:	98 87       	std	Y+8, r25	; 0x08
    2ab4:	29 87       	std	Y+9, r18	; 0x09
    2ab6:	3a 87       	std	Y+10, r19	; 0x0a
    2ab8:	4b 87       	std	Y+11, r20	; 0x0b
    2aba:	5c 87       	std	Y+12, r21	; 0x0c
    2abc:	ed 86       	std	Y+13, r14	; 0x0d
    2abe:	fe 86       	std	Y+14, r15	; 0x0e
    2ac0:	0f 87       	std	Y+15, r16	; 0x0f
    2ac2:	18 8b       	std	Y+16, r17	; 0x10
    UNITY_FLOAT diff;
    UNITY_FLOAT_OR_DOUBLE_WITHIN(delta, expected, actual, diff);
    2ac4:	69 85       	ldd	r22, Y+9	; 0x09
    2ac6:	7a 85       	ldd	r23, Y+10	; 0x0a
    2ac8:	8b 85       	ldd	r24, Y+11	; 0x0b
    2aca:	9c 85       	ldd	r25, Y+12	; 0x0c
    2acc:	29 85       	ldd	r18, Y+9	; 0x09
    2ace:	3a 85       	ldd	r19, Y+10	; 0x0a
    2ad0:	4b 85       	ldd	r20, Y+11	; 0x0b
    2ad2:	5c 85       	ldd	r21, Y+12	; 0x0c
    2ad4:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <__subsf3>
    2ad8:	dc 01       	movw	r26, r24
    2ada:	cb 01       	movw	r24, r22
    2adc:	7c 01       	movw	r14, r24
    2ade:	8d 01       	movw	r16, r26
    2ae0:	69 85       	ldd	r22, Y+9	; 0x09
    2ae2:	7a 85       	ldd	r23, Y+10	; 0x0a
    2ae4:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ae6:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ae8:	29 85       	ldd	r18, Y+9	; 0x09
    2aea:	3a 85       	ldd	r19, Y+10	; 0x0a
    2aec:	4b 85       	ldd	r20, Y+11	; 0x0b
    2aee:	5c 85       	ldd	r21, Y+12	; 0x0c
    2af0:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <__subsf3>
    2af4:	dc 01       	movw	r26, r24
    2af6:	cb 01       	movw	r24, r22
    2af8:	9c 01       	movw	r18, r24
    2afa:	ad 01       	movw	r20, r26
    2afc:	c8 01       	movw	r24, r16
    2afe:	b7 01       	movw	r22, r14
    2b00:	0e 94 ef 26 	call	0x4dde	; 0x4dde <__cmpsf2>
    2b04:	88 23       	and	r24, r24
    2b06:	09 f4       	brne	.+2      	; 0x2b0a <UnityFloatsWithin+0x7c>
    2b08:	6b c0       	rjmp	.+214    	; 0x2be0 <UnityFloatsWithin+0x152>
    2b0a:	11 e0       	ldi	r17, 0x01	; 1
    2b0c:	69 85       	ldd	r22, Y+9	; 0x09
    2b0e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2b10:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b12:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b14:	29 85       	ldd	r18, Y+9	; 0x09
    2b16:	3a 85       	ldd	r19, Y+10	; 0x0a
    2b18:	4b 85       	ldd	r20, Y+11	; 0x0b
    2b1a:	5c 85       	ldd	r21, Y+12	; 0x0c
    2b1c:	0e 94 ef 26 	call	0x4dde	; 0x4dde <__cmpsf2>
    2b20:	88 23       	and	r24, r24
    2b22:	09 f4       	brne	.+2      	; 0x2b26 <UnityFloatsWithin+0x98>
    2b24:	10 e0       	ldi	r17, 0x00	; 0
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	81 27       	eor	r24, r17
    2b2a:	88 23       	and	r24, r24
    2b2c:	09 f4       	brne	.+2      	; 0x2b30 <UnityFloatsWithin+0xa2>
    2b2e:	58 c0       	rjmp	.+176    	; 0x2be0 <UnityFloatsWithin+0x152>
    2b30:	6d 85       	ldd	r22, Y+13	; 0x0d
    2b32:	7e 85       	ldd	r23, Y+14	; 0x0e
    2b34:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b36:	98 89       	ldd	r25, Y+16	; 0x10
    2b38:	2d 85       	ldd	r18, Y+13	; 0x0d
    2b3a:	3e 85       	ldd	r19, Y+14	; 0x0e
    2b3c:	4f 85       	ldd	r20, Y+15	; 0x0f
    2b3e:	58 89       	ldd	r21, Y+16	; 0x10
    2b40:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <__subsf3>
    2b44:	dc 01       	movw	r26, r24
    2b46:	cb 01       	movw	r24, r22
    2b48:	7c 01       	movw	r14, r24
    2b4a:	8d 01       	movw	r16, r26
    2b4c:	6d 85       	ldd	r22, Y+13	; 0x0d
    2b4e:	7e 85       	ldd	r23, Y+14	; 0x0e
    2b50:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b52:	98 89       	ldd	r25, Y+16	; 0x10
    2b54:	2d 85       	ldd	r18, Y+13	; 0x0d
    2b56:	3e 85       	ldd	r19, Y+14	; 0x0e
    2b58:	4f 85       	ldd	r20, Y+15	; 0x0f
    2b5a:	58 89       	ldd	r21, Y+16	; 0x10
    2b5c:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <__subsf3>
    2b60:	dc 01       	movw	r26, r24
    2b62:	cb 01       	movw	r24, r22
    2b64:	9c 01       	movw	r18, r24
    2b66:	ad 01       	movw	r20, r26
    2b68:	c8 01       	movw	r24, r16
    2b6a:	b7 01       	movw	r22, r14
    2b6c:	0e 94 ef 26 	call	0x4dde	; 0x4dde <__cmpsf2>
    2b70:	88 23       	and	r24, r24
    2b72:	b1 f1       	breq	.+108    	; 0x2be0 <UnityFloatsWithin+0x152>
    2b74:	11 e0       	ldi	r17, 0x01	; 1
    2b76:	6d 85       	ldd	r22, Y+13	; 0x0d
    2b78:	7e 85       	ldd	r23, Y+14	; 0x0e
    2b7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b7c:	98 89       	ldd	r25, Y+16	; 0x10
    2b7e:	2d 85       	ldd	r18, Y+13	; 0x0d
    2b80:	3e 85       	ldd	r19, Y+14	; 0x0e
    2b82:	4f 85       	ldd	r20, Y+15	; 0x0f
    2b84:	58 89       	ldd	r21, Y+16	; 0x10
    2b86:	0e 94 ef 26 	call	0x4dde	; 0x4dde <__cmpsf2>
    2b8a:	88 23       	and	r24, r24
    2b8c:	09 f4       	brne	.+2      	; 0x2b90 <UnityFloatsWithin+0x102>
    2b8e:	10 e0       	ldi	r17, 0x00	; 0
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	81 27       	eor	r24, r17
    2b94:	88 23       	and	r24, r24
    2b96:	21 f1       	breq	.+72     	; 0x2be0 <UnityFloatsWithin+0x152>
    2b98:	11 e0       	ldi	r17, 0x01	; 1
    2b9a:	69 85       	ldd	r22, Y+9	; 0x09
    2b9c:	7a 85       	ldd	r23, Y+10	; 0x0a
    2b9e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ba0:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	a9 01       	movw	r20, r18
    2ba8:	0e 94 ef 26 	call	0x4dde	; 0x4dde <__cmpsf2>
    2bac:	88 23       	and	r24, r24
    2bae:	0c f0       	brlt	.+2      	; 0x2bb2 <UnityFloatsWithin+0x124>
    2bb0:	10 e0       	ldi	r17, 0x00	; 0
    2bb2:	81 e0       	ldi	r24, 0x01	; 1
    2bb4:	01 2f       	mov	r16, r17
    2bb6:	08 27       	eor	r16, r24
    2bb8:	11 e0       	ldi	r17, 0x01	; 1
    2bba:	6d 85       	ldd	r22, Y+13	; 0x0d
    2bbc:	7e 85       	ldd	r23, Y+14	; 0x0e
    2bbe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bc0:	98 89       	ldd	r25, Y+16	; 0x10
    2bc2:	20 e0       	ldi	r18, 0x00	; 0
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	a9 01       	movw	r20, r18
    2bc8:	0e 94 ef 26 	call	0x4dde	; 0x4dde <__cmpsf2>
    2bcc:	88 23       	and	r24, r24
    2bce:	0c f0       	brlt	.+2      	; 0x2bd2 <UnityFloatsWithin+0x144>
    2bd0:	10 e0       	ldi	r17, 0x00	; 0
    2bd2:	80 2f       	mov	r24, r16
    2bd4:	81 27       	eor	r24, r17
    2bd6:	88 23       	and	r24, r24
    2bd8:	19 f0       	breq	.+6      	; 0x2be0 <UnityFloatsWithin+0x152>
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	ba c0       	rjmp	.+372    	; 0x2d54 <UnityFloatsWithin+0x2c6>
    2be0:	69 85       	ldd	r22, Y+9	; 0x09
    2be2:	7a 85       	ldd	r23, Y+10	; 0x0a
    2be4:	8b 85       	ldd	r24, Y+11	; 0x0b
    2be6:	9c 85       	ldd	r25, Y+12	; 0x0c
    2be8:	29 85       	ldd	r18, Y+9	; 0x09
    2bea:	3a 85       	ldd	r19, Y+10	; 0x0a
    2bec:	4b 85       	ldd	r20, Y+11	; 0x0b
    2bee:	5c 85       	ldd	r21, Y+12	; 0x0c
    2bf0:	0e 94 ef 26 	call	0x4dde	; 0x4dde <__cmpsf2>
    2bf4:	88 23       	and	r24, r24
    2bf6:	79 f0       	breq	.+30     	; 0x2c16 <UnityFloatsWithin+0x188>
    2bf8:	6d 85       	ldd	r22, Y+13	; 0x0d
    2bfa:	7e 85       	ldd	r23, Y+14	; 0x0e
    2bfc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bfe:	98 89       	ldd	r25, Y+16	; 0x10
    2c00:	2d 85       	ldd	r18, Y+13	; 0x0d
    2c02:	3e 85       	ldd	r19, Y+14	; 0x0e
    2c04:	4f 85       	ldd	r20, Y+15	; 0x0f
    2c06:	58 89       	ldd	r21, Y+16	; 0x10
    2c08:	0e 94 ef 26 	call	0x4dde	; 0x4dde <__cmpsf2>
    2c0c:	88 23       	and	r24, r24
    2c0e:	19 f0       	breq	.+6      	; 0x2c16 <UnityFloatsWithin+0x188>
    2c10:	81 e0       	ldi	r24, 0x01	; 1
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	9f c0       	rjmp	.+318    	; 0x2d54 <UnityFloatsWithin+0x2c6>
    2c16:	6d 85       	ldd	r22, Y+13	; 0x0d
    2c18:	7e 85       	ldd	r23, Y+14	; 0x0e
    2c1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c1c:	98 89       	ldd	r25, Y+16	; 0x10
    2c1e:	29 85       	ldd	r18, Y+9	; 0x09
    2c20:	3a 85       	ldd	r19, Y+10	; 0x0a
    2c22:	4b 85       	ldd	r20, Y+11	; 0x0b
    2c24:	5c 85       	ldd	r21, Y+12	; 0x0c
    2c26:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <__subsf3>
    2c2a:	dc 01       	movw	r26, r24
    2c2c:	cb 01       	movw	r24, r22
    2c2e:	89 83       	std	Y+1, r24	; 0x01
    2c30:	9a 83       	std	Y+2, r25	; 0x02
    2c32:	ab 83       	std	Y+3, r26	; 0x03
    2c34:	bc 83       	std	Y+4, r27	; 0x04
    2c36:	11 e0       	ldi	r17, 0x01	; 1
    2c38:	69 81       	ldd	r22, Y+1	; 0x01
    2c3a:	7a 81       	ldd	r23, Y+2	; 0x02
    2c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c40:	20 e0       	ldi	r18, 0x00	; 0
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	a9 01       	movw	r20, r18
    2c46:	0e 94 ef 26 	call	0x4dde	; 0x4dde <__cmpsf2>
    2c4a:	88 23       	and	r24, r24
    2c4c:	0c f0       	brlt	.+2      	; 0x2c50 <UnityFloatsWithin+0x1c2>
    2c4e:	10 e0       	ldi	r17, 0x00	; 0
    2c50:	11 23       	and	r17, r17
    2c52:	49 f0       	breq	.+18     	; 0x2c66 <UnityFloatsWithin+0x1d8>
    2c54:	89 81       	ldd	r24, Y+1	; 0x01
    2c56:	9a 81       	ldd	r25, Y+2	; 0x02
    2c58:	ab 81       	ldd	r26, Y+3	; 0x03
    2c5a:	bc 81       	ldd	r27, Y+4	; 0x04
    2c5c:	b0 58       	subi	r27, 0x80	; 128
    2c5e:	89 83       	std	Y+1, r24	; 0x01
    2c60:	9a 83       	std	Y+2, r25	; 0x02
    2c62:	ab 83       	std	Y+3, r26	; 0x03
    2c64:	bc 83       	std	Y+4, r27	; 0x04
    2c66:	11 e0       	ldi	r17, 0x01	; 1
    2c68:	6d 81       	ldd	r22, Y+5	; 0x05
    2c6a:	7e 81       	ldd	r23, Y+6	; 0x06
    2c6c:	8f 81       	ldd	r24, Y+7	; 0x07
    2c6e:	98 85       	ldd	r25, Y+8	; 0x08
    2c70:	20 e0       	ldi	r18, 0x00	; 0
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	a9 01       	movw	r20, r18
    2c76:	0e 94 ef 26 	call	0x4dde	; 0x4dde <__cmpsf2>
    2c7a:	88 23       	and	r24, r24
    2c7c:	0c f0       	brlt	.+2      	; 0x2c80 <UnityFloatsWithin+0x1f2>
    2c7e:	10 e0       	ldi	r17, 0x00	; 0
    2c80:	11 23       	and	r17, r17
    2c82:	49 f0       	breq	.+18     	; 0x2c96 <UnityFloatsWithin+0x208>
    2c84:	8d 81       	ldd	r24, Y+5	; 0x05
    2c86:	9e 81       	ldd	r25, Y+6	; 0x06
    2c88:	af 81       	ldd	r26, Y+7	; 0x07
    2c8a:	b8 85       	ldd	r27, Y+8	; 0x08
    2c8c:	b0 58       	subi	r27, 0x80	; 128
    2c8e:	8d 83       	std	Y+5, r24	; 0x05
    2c90:	9e 83       	std	Y+6, r25	; 0x06
    2c92:	af 83       	std	Y+7, r26	; 0x07
    2c94:	b8 87       	std	Y+8, r27	; 0x08
    2c96:	11 e0       	ldi	r17, 0x01	; 1
    2c98:	69 81       	ldd	r22, Y+1	; 0x01
    2c9a:	7a 81       	ldd	r23, Y+2	; 0x02
    2c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c9e:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca0:	29 81       	ldd	r18, Y+1	; 0x01
    2ca2:	3a 81       	ldd	r19, Y+2	; 0x02
    2ca4:	4b 81       	ldd	r20, Y+3	; 0x03
    2ca6:	5c 81       	ldd	r21, Y+4	; 0x04
    2ca8:	0e 94 ef 26 	call	0x4dde	; 0x4dde <__cmpsf2>
    2cac:	88 23       	and	r24, r24
    2cae:	09 f4       	brne	.+2      	; 0x2cb2 <UnityFloatsWithin+0x224>
    2cb0:	10 e0       	ldi	r17, 0x00	; 0
    2cb2:	81 e0       	ldi	r24, 0x01	; 1
    2cb4:	81 27       	eor	r24, r17
    2cb6:	88 23       	and	r24, r24
    2cb8:	09 f4       	brne	.+2      	; 0x2cbc <UnityFloatsWithin+0x22e>
    2cba:	4a c0       	rjmp	.+148    	; 0x2d50 <UnityFloatsWithin+0x2c2>
    2cbc:	69 81       	ldd	r22, Y+1	; 0x01
    2cbe:	7a 81       	ldd	r23, Y+2	; 0x02
    2cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc2:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc4:	29 81       	ldd	r18, Y+1	; 0x01
    2cc6:	3a 81       	ldd	r19, Y+2	; 0x02
    2cc8:	4b 81       	ldd	r20, Y+3	; 0x03
    2cca:	5c 81       	ldd	r21, Y+4	; 0x04
    2ccc:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <__subsf3>
    2cd0:	dc 01       	movw	r26, r24
    2cd2:	cb 01       	movw	r24, r22
    2cd4:	7c 01       	movw	r14, r24
    2cd6:	8d 01       	movw	r16, r26
    2cd8:	69 81       	ldd	r22, Y+1	; 0x01
    2cda:	7a 81       	ldd	r23, Y+2	; 0x02
    2cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cde:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce0:	29 81       	ldd	r18, Y+1	; 0x01
    2ce2:	3a 81       	ldd	r19, Y+2	; 0x02
    2ce4:	4b 81       	ldd	r20, Y+3	; 0x03
    2ce6:	5c 81       	ldd	r21, Y+4	; 0x04
    2ce8:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <__subsf3>
    2cec:	dc 01       	movw	r26, r24
    2cee:	cb 01       	movw	r24, r22
    2cf0:	9c 01       	movw	r18, r24
    2cf2:	ad 01       	movw	r20, r26
    2cf4:	dd 24       	eor	r13, r13
    2cf6:	d3 94       	inc	r13
    2cf8:	c8 01       	movw	r24, r16
    2cfa:	b7 01       	movw	r22, r14
    2cfc:	0e 94 ef 26 	call	0x4dde	; 0x4dde <__cmpsf2>
    2d00:	88 23       	and	r24, r24
    2d02:	09 f4       	brne	.+2      	; 0x2d06 <UnityFloatsWithin+0x278>
    2d04:	dd 24       	eor	r13, r13
    2d06:	81 e0       	ldi	r24, 0x01	; 1
    2d08:	8d 25       	eor	r24, r13
    2d0a:	88 23       	and	r24, r24
    2d0c:	61 f4       	brne	.+24     	; 0x2d26 <UnityFloatsWithin+0x298>
    2d0e:	69 81       	ldd	r22, Y+1	; 0x01
    2d10:	7a 81       	ldd	r23, Y+2	; 0x02
    2d12:	8b 81       	ldd	r24, Y+3	; 0x03
    2d14:	9c 81       	ldd	r25, Y+4	; 0x04
    2d16:	29 81       	ldd	r18, Y+1	; 0x01
    2d18:	3a 81       	ldd	r19, Y+2	; 0x02
    2d1a:	4b 81       	ldd	r20, Y+3	; 0x03
    2d1c:	5c 81       	ldd	r21, Y+4	; 0x04
    2d1e:	0e 94 ef 26 	call	0x4dde	; 0x4dde <__cmpsf2>
    2d22:	88 23       	and	r24, r24
    2d24:	a9 f0       	breq	.+42     	; 0x2d50 <UnityFloatsWithin+0x2c2>
    2d26:	11 e0       	ldi	r17, 0x01	; 1
    2d28:	69 81       	ldd	r22, Y+1	; 0x01
    2d2a:	7a 81       	ldd	r23, Y+2	; 0x02
    2d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d30:	2d 81       	ldd	r18, Y+5	; 0x05
    2d32:	3e 81       	ldd	r19, Y+6	; 0x06
    2d34:	4f 81       	ldd	r20, Y+7	; 0x07
    2d36:	58 85       	ldd	r21, Y+8	; 0x08
    2d38:	0e 94 3e 28 	call	0x507c	; 0x507c <__gesf2>
    2d3c:	18 16       	cp	r1, r24
    2d3e:	0c f0       	brlt	.+2      	; 0x2d42 <UnityFloatsWithin+0x2b4>
    2d40:	10 e0       	ldi	r17, 0x00	; 0
    2d42:	81 e0       	ldi	r24, 0x01	; 1
    2d44:	81 27       	eor	r24, r17
    2d46:	88 23       	and	r24, r24
    2d48:	19 f0       	breq	.+6      	; 0x2d50 <UnityFloatsWithin+0x2c2>
    2d4a:	81 e0       	ldi	r24, 0x01	; 1
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	02 c0       	rjmp	.+4      	; 0x2d54 <UnityFloatsWithin+0x2c6>
    2d50:	80 e0       	ldi	r24, 0x00	; 0
    2d52:	90 e0       	ldi	r25, 0x00	; 0
}
    2d54:	60 96       	adiw	r28, 0x10	; 16
    2d56:	0f b6       	in	r0, 0x3f	; 63
    2d58:	f8 94       	cli
    2d5a:	de bf       	out	0x3e, r29	; 62
    2d5c:	0f be       	out	0x3f, r0	; 63
    2d5e:	cd bf       	out	0x3d, r28	; 61
    2d60:	cf 91       	pop	r28
    2d62:	df 91       	pop	r29
    2d64:	1f 91       	pop	r17
    2d66:	0f 91       	pop	r16
    2d68:	ff 90       	pop	r15
    2d6a:	ef 90       	pop	r14
    2d6c:	df 90       	pop	r13
    2d6e:	08 95       	ret

00002d70 <UnityAssertEqualFloatArray>:
                                UNITY_PTR_ATTRIBUTE const UNITY_FLOAT* actual,
                                const UNITY_UINT32 num_elements,
                                const char* msg,
                                const UNITY_LINE_TYPE lineNumber,
                                const UNITY_FLAGS_T flags)
{
    2d70:	af 92       	push	r10
    2d72:	cf 92       	push	r12
    2d74:	df 92       	push	r13
    2d76:	ef 92       	push	r14
    2d78:	ff 92       	push	r15
    2d7a:	0f 93       	push	r16
    2d7c:	1f 93       	push	r17
    2d7e:	df 93       	push	r29
    2d80:	cf 93       	push	r28
    2d82:	cd b7       	in	r28, 0x3d	; 61
    2d84:	de b7       	in	r29, 0x3e	; 62
    2d86:	67 97       	sbiw	r28, 0x17	; 23
    2d88:	0f b6       	in	r0, 0x3f	; 63
    2d8a:	f8 94       	cli
    2d8c:	de bf       	out	0x3e, r29	; 62
    2d8e:	0f be       	out	0x3f, r0	; 63
    2d90:	cd bf       	out	0x3d, r28	; 61
    2d92:	9a 87       	std	Y+10, r25	; 0x0a
    2d94:	89 87       	std	Y+9, r24	; 0x09
    2d96:	7c 87       	std	Y+12, r23	; 0x0c
    2d98:	6b 87       	std	Y+11, r22	; 0x0b
    2d9a:	2d 87       	std	Y+13, r18	; 0x0d
    2d9c:	3e 87       	std	Y+14, r19	; 0x0e
    2d9e:	4f 87       	std	Y+15, r20	; 0x0f
    2da0:	58 8b       	std	Y+16, r21	; 0x10
    2da2:	1a 8b       	std	Y+18, r17	; 0x12
    2da4:	09 8b       	std	Y+17, r16	; 0x11
    2da6:	cb 8a       	std	Y+19, r12	; 0x13
    2da8:	dc 8a       	std	Y+20, r13	; 0x14
    2daa:	ed 8a       	std	Y+21, r14	; 0x15
    2dac:	fe 8a       	std	Y+22, r15	; 0x16
    2dae:	af 8a       	std	Y+23, r10	; 0x17
    UNITY_UINT32 elements = num_elements;
    2db0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2db2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2db4:	af 85       	ldd	r26, Y+15	; 0x0f
    2db6:	b8 89       	ldd	r27, Y+16	; 0x10
    2db8:	89 83       	std	Y+1, r24	; 0x01
    2dba:	9a 83       	std	Y+2, r25	; 0x02
    2dbc:	ab 83       	std	Y+3, r26	; 0x03
    2dbe:	bc 83       	std	Y+4, r27	; 0x04
    UNITY_PTR_ATTRIBUTE const UNITY_FLOAT* ptr_expected = expected;
    2dc0:	89 85       	ldd	r24, Y+9	; 0x09
    2dc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dc4:	9e 83       	std	Y+6, r25	; 0x06
    2dc6:	8d 83       	std	Y+5, r24	; 0x05
    UNITY_PTR_ATTRIBUTE const UNITY_FLOAT* ptr_actual = actual;
    2dc8:	8b 85       	ldd	r24, Y+11	; 0x0b
    2dca:	9c 85       	ldd	r25, Y+12	; 0x0c
    2dcc:	98 87       	std	Y+8, r25	; 0x08
    2dce:	8f 83       	std	Y+7, r24	; 0x07

    RETURN_IF_FAIL_OR_IGNORE;
    2dd0:	80 91 60 06 	lds	r24, 0x0660
    2dd4:	90 91 61 06 	lds	r25, 0x0661
    2dd8:	a0 91 62 06 	lds	r26, 0x0662
    2ddc:	b0 91 63 06 	lds	r27, 0x0663
    2de0:	00 97       	sbiw	r24, 0x00	; 0
    2de2:	a1 05       	cpc	r26, r1
    2de4:	b1 05       	cpc	r27, r1
    2de6:	09 f0       	breq	.+2      	; 0x2dea <UnityAssertEqualFloatArray+0x7a>
    2de8:	07 c1       	rjmp	.+526    	; 0x2ff8 <UnityAssertEqualFloatArray+0x288>
    2dea:	80 91 64 06 	lds	r24, 0x0664
    2dee:	90 91 65 06 	lds	r25, 0x0665
    2df2:	a0 91 66 06 	lds	r26, 0x0666
    2df6:	b0 91 67 06 	lds	r27, 0x0667
    2dfa:	00 97       	sbiw	r24, 0x00	; 0
    2dfc:	a1 05       	cpc	r26, r1
    2dfe:	b1 05       	cpc	r27, r1
    2e00:	09 f0       	breq	.+2      	; 0x2e04 <UnityAssertEqualFloatArray+0x94>
    2e02:	fa c0       	rjmp	.+500    	; 0x2ff8 <UnityAssertEqualFloatArray+0x288>

    if (elements == 0)
    2e04:	89 81       	ldd	r24, Y+1	; 0x01
    2e06:	9a 81       	ldd	r25, Y+2	; 0x02
    2e08:	ab 81       	ldd	r26, Y+3	; 0x03
    2e0a:	bc 81       	ldd	r27, Y+4	; 0x04
    2e0c:	00 97       	sbiw	r24, 0x00	; 0
    2e0e:	a1 05       	cpc	r26, r1
    2e10:	b1 05       	cpc	r27, r1
    2e12:	11 f5       	brne	.+68     	; 0x2e58 <UnityAssertEqualFloatArray+0xe8>
    {
        UnityPrintPointlessAndBail();
    2e14:	8b 89       	ldd	r24, Y+19	; 0x13
    2e16:	9c 89       	ldd	r25, Y+20	; 0x14
    2e18:	ad 89       	ldd	r26, Y+21	; 0x15
    2e1a:	be 89       	ldd	r27, Y+22	; 0x16
    2e1c:	bc 01       	movw	r22, r24
    2e1e:	cd 01       	movw	r24, r26
    2e20:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <UnityTestResultsFailBegin>
    2e24:	89 ea       	ldi	r24, 0xA9	; 169
    2e26:	93 e0       	ldi	r25, 0x03	; 3
    2e28:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
    2e2c:	89 89       	ldd	r24, Y+17	; 0x11
    2e2e:	9a 89       	ldd	r25, Y+18	; 0x12
    2e30:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <UnityAddMsgIfSpecified>
    2e34:	81 e0       	ldi	r24, 0x01	; 1
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	a0 e0       	ldi	r26, 0x00	; 0
    2e3a:	b0 e0       	ldi	r27, 0x00	; 0
    2e3c:	80 93 60 06 	sts	0x0660, r24
    2e40:	90 93 61 06 	sts	0x0661, r25
    2e44:	a0 93 62 06 	sts	0x0662, r26
    2e48:	b0 93 63 06 	sts	0x0663, r27
    2e4c:	88 e6       	ldi	r24, 0x68	; 104
    2e4e:	96 e0       	ldi	r25, 0x06	; 6
    2e50:	61 e0       	ldi	r22, 0x01	; 1
    2e52:	70 e0       	ldi	r23, 0x00	; 0
    2e54:	0e 94 48 29 	call	0x5290	; 0x5290 <longjmp>
    }

    if (expected == actual)
    2e58:	29 85       	ldd	r18, Y+9	; 0x09
    2e5a:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e5c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e5e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e60:	28 17       	cp	r18, r24
    2e62:	39 07       	cpc	r19, r25
    2e64:	09 f4       	brne	.+2      	; 0x2e68 <UnityAssertEqualFloatArray+0xf8>
    2e66:	c7 c0       	rjmp	.+398    	; 0x2ff6 <UnityAssertEqualFloatArray+0x286>
    {
        return; /* Both are NULL or same pointer */
    }

    if (UnityIsOneArrayNull((UNITY_INTERNAL_PTR)expected, (UNITY_INTERNAL_PTR)actual, lineNumber, msg))
    2e68:	89 85       	ldd	r24, Y+9	; 0x09
    2e6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e70:	2b 89       	ldd	r18, Y+19	; 0x13
    2e72:	3c 89       	ldd	r19, Y+20	; 0x14
    2e74:	4d 89       	ldd	r20, Y+21	; 0x15
    2e76:	5e 89       	ldd	r21, Y+22	; 0x16
    2e78:	e9 89       	ldd	r30, Y+17	; 0x11
    2e7a:	fa 89       	ldd	r31, Y+18	; 0x12
    2e7c:	8f 01       	movw	r16, r30
    2e7e:	0e 94 7d 10 	call	0x20fa	; 0x20fa <UnityIsOneArrayNull>
    2e82:	00 97       	sbiw	r24, 0x00	; 0
    2e84:	09 f4       	brne	.+2      	; 0x2e88 <UnityAssertEqualFloatArray+0x118>
    2e86:	9d c0       	rjmp	.+314    	; 0x2fc2 <UnityAssertEqualFloatArray+0x252>
    {
        UNITY_FAIL_AND_BAIL;
    2e88:	81 e0       	ldi	r24, 0x01	; 1
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	a0 e0       	ldi	r26, 0x00	; 0
    2e8e:	b0 e0       	ldi	r27, 0x00	; 0
    2e90:	80 93 60 06 	sts	0x0660, r24
    2e94:	90 93 61 06 	sts	0x0661, r25
    2e98:	a0 93 62 06 	sts	0x0662, r26
    2e9c:	b0 93 63 06 	sts	0x0663, r27
    2ea0:	88 e6       	ldi	r24, 0x68	; 104
    2ea2:	96 e0       	ldi	r25, 0x06	; 6
    2ea4:	61 e0       	ldi	r22, 0x01	; 1
    2ea6:	70 e0       	ldi	r23, 0x00	; 0
    2ea8:	0e 94 48 29 	call	0x5290	; 0x5290 <longjmp>
    }

    while (elements--)
    {
        if (!UnityFloatsWithin(*ptr_expected * UNITY_FLOAT_PRECISION, *ptr_expected, *ptr_actual))
    2eac:	8d 81       	ldd	r24, Y+5	; 0x05
    2eae:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb0:	fc 01       	movw	r30, r24
    2eb2:	80 81       	ld	r24, Z
    2eb4:	91 81       	ldd	r25, Z+1	; 0x01
    2eb6:	a2 81       	ldd	r26, Z+2	; 0x02
    2eb8:	b3 81       	ldd	r27, Z+3	; 0x03
    2eba:	bc 01       	movw	r22, r24
    2ebc:	cd 01       	movw	r24, r26
    2ebe:	2c ea       	ldi	r18, 0xAC	; 172
    2ec0:	35 ec       	ldi	r19, 0xC5	; 197
    2ec2:	47 e2       	ldi	r20, 0x27	; 39
    2ec4:	57 e3       	ldi	r21, 0x37	; 55
    2ec6:	0e 94 42 28 	call	0x5084	; 0x5084 <__mulsf3>
    2eca:	dc 01       	movw	r26, r24
    2ecc:	cb 01       	movw	r24, r22
    2ece:	2d 81       	ldd	r18, Y+5	; 0x05
    2ed0:	3e 81       	ldd	r19, Y+6	; 0x06
    2ed2:	f9 01       	movw	r30, r18
    2ed4:	20 81       	ld	r18, Z
    2ed6:	31 81       	ldd	r19, Z+1	; 0x01
    2ed8:	42 81       	ldd	r20, Z+2	; 0x02
    2eda:	53 81       	ldd	r21, Z+3	; 0x03
    2edc:	6f 81       	ldd	r22, Y+7	; 0x07
    2ede:	78 85       	ldd	r23, Y+8	; 0x08
    2ee0:	fb 01       	movw	r30, r22
    2ee2:	e0 80       	ld	r14, Z
    2ee4:	f1 80       	ldd	r15, Z+1	; 0x01
    2ee6:	02 81       	ldd	r16, Z+2	; 0x02
    2ee8:	13 81       	ldd	r17, Z+3	; 0x03
    2eea:	bc 01       	movw	r22, r24
    2eec:	cd 01       	movw	r24, r26
    2eee:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <UnityFloatsWithin>
    2ef2:	00 97       	sbiw	r24, 0x00	; 0
    2ef4:	09 f0       	breq	.+2      	; 0x2ef8 <UnityAssertEqualFloatArray+0x188>
    2ef6:	57 c0       	rjmp	.+174    	; 0x2fa6 <UnityAssertEqualFloatArray+0x236>
        {
            UnityTestResultsFailBegin(lineNumber);
    2ef8:	8b 89       	ldd	r24, Y+19	; 0x13
    2efa:	9c 89       	ldd	r25, Y+20	; 0x14
    2efc:	ad 89       	ldd	r26, Y+21	; 0x15
    2efe:	be 89       	ldd	r27, Y+22	; 0x16
    2f00:	bc 01       	movw	r22, r24
    2f02:	cd 01       	movw	r24, r26
    2f04:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <UnityTestResultsFailBegin>
            UnityPrint(UnityStrElement);
    2f08:	8c e6       	ldi	r24, 0x6C	; 108
    2f0a:	93 e0       	ldi	r25, 0x03	; 3
    2f0c:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
            UnityPrintNumberUnsigned(num_elements - elements - 1);
    2f10:	2d 85       	ldd	r18, Y+13	; 0x0d
    2f12:	3e 85       	ldd	r19, Y+14	; 0x0e
    2f14:	4f 85       	ldd	r20, Y+15	; 0x0f
    2f16:	58 89       	ldd	r21, Y+16	; 0x10
    2f18:	89 81       	ldd	r24, Y+1	; 0x01
    2f1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f1c:	ab 81       	ldd	r26, Y+3	; 0x03
    2f1e:	bc 81       	ldd	r27, Y+4	; 0x04
    2f20:	79 01       	movw	r14, r18
    2f22:	8a 01       	movw	r16, r20
    2f24:	e8 1a       	sub	r14, r24
    2f26:	f9 0a       	sbc	r15, r25
    2f28:	0a 0b       	sbc	r16, r26
    2f2a:	1b 0b       	sbc	r17, r27
    2f2c:	d8 01       	movw	r26, r16
    2f2e:	c7 01       	movw	r24, r14
    2f30:	01 97       	sbiw	r24, 0x01	; 1
    2f32:	a1 09       	sbc	r26, r1
    2f34:	b1 09       	sbc	r27, r1
    2f36:	bc 01       	movw	r22, r24
    2f38:	cd 01       	movw	r24, r26
    2f3a:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <UnityPrintNumberUnsigned>
            UNITY_PRINT_EXPECTED_AND_ACTUAL_FLOAT((UNITY_DOUBLE)*ptr_expected, (UNITY_DOUBLE)*ptr_actual);
    2f3e:	87 e2       	ldi	r24, 0x27	; 39
    2f40:	93 e0       	ldi	r25, 0x03	; 3
    2f42:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
    2f46:	8d 81       	ldd	r24, Y+5	; 0x05
    2f48:	9e 81       	ldd	r25, Y+6	; 0x06
    2f4a:	fc 01       	movw	r30, r24
    2f4c:	80 81       	ld	r24, Z
    2f4e:	91 81       	ldd	r25, Z+1	; 0x01
    2f50:	a2 81       	ldd	r26, Z+2	; 0x02
    2f52:	b3 81       	ldd	r27, Z+3	; 0x03
    2f54:	bc 01       	movw	r22, r24
    2f56:	cd 01       	movw	r24, r26
    2f58:	0e 94 4a 0a 	call	0x1494	; 0x1494 <UnityPrintFloat>
    2f5c:	82 e3       	ldi	r24, 0x32	; 50
    2f5e:	93 e0       	ldi	r25, 0x03	; 3
    2f60:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
    2f64:	8f 81       	ldd	r24, Y+7	; 0x07
    2f66:	98 85       	ldd	r25, Y+8	; 0x08
    2f68:	fc 01       	movw	r30, r24
    2f6a:	80 81       	ld	r24, Z
    2f6c:	91 81       	ldd	r25, Z+1	; 0x01
    2f6e:	a2 81       	ldd	r26, Z+2	; 0x02
    2f70:	b3 81       	ldd	r27, Z+3	; 0x03
    2f72:	bc 01       	movw	r22, r24
    2f74:	cd 01       	movw	r24, r26
    2f76:	0e 94 4a 0a 	call	0x1494	; 0x1494 <UnityPrintFloat>
            UnityAddMsgIfSpecified(msg);
    2f7a:	89 89       	ldd	r24, Y+17	; 0x11
    2f7c:	9a 89       	ldd	r25, Y+18	; 0x12
    2f7e:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <UnityAddMsgIfSpecified>
            UNITY_FAIL_AND_BAIL;
    2f82:	81 e0       	ldi	r24, 0x01	; 1
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	a0 e0       	ldi	r26, 0x00	; 0
    2f88:	b0 e0       	ldi	r27, 0x00	; 0
    2f8a:	80 93 60 06 	sts	0x0660, r24
    2f8e:	90 93 61 06 	sts	0x0661, r25
    2f92:	a0 93 62 06 	sts	0x0662, r26
    2f96:	b0 93 63 06 	sts	0x0663, r27
    2f9a:	88 e6       	ldi	r24, 0x68	; 104
    2f9c:	96 e0       	ldi	r25, 0x06	; 6
    2f9e:	61 e0       	ldi	r22, 0x01	; 1
    2fa0:	70 e0       	ldi	r23, 0x00	; 0
    2fa2:	0e 94 48 29 	call	0x5290	; 0x5290 <longjmp>
        }
        if (flags == UNITY_ARRAY_TO_ARRAY)
    2fa6:	8f 89       	ldd	r24, Y+23	; 0x17
    2fa8:	81 30       	cpi	r24, 0x01	; 1
    2faa:	29 f4       	brne	.+10     	; 0x2fb6 <UnityAssertEqualFloatArray+0x246>
        {
            ptr_expected++;
    2fac:	8d 81       	ldd	r24, Y+5	; 0x05
    2fae:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb0:	04 96       	adiw	r24, 0x04	; 4
    2fb2:	9e 83       	std	Y+6, r25	; 0x06
    2fb4:	8d 83       	std	Y+5, r24	; 0x05
        }
        ptr_actual++;
    2fb6:	8f 81       	ldd	r24, Y+7	; 0x07
    2fb8:	98 85       	ldd	r25, Y+8	; 0x08
    2fba:	04 96       	adiw	r24, 0x04	; 4
    2fbc:	98 87       	std	Y+8, r25	; 0x08
    2fbe:	8f 83       	std	Y+7, r24	; 0x07
    2fc0:	01 c0       	rjmp	.+2      	; 0x2fc4 <UnityAssertEqualFloatArray+0x254>
    if (UnityIsOneArrayNull((UNITY_INTERNAL_PTR)expected, (UNITY_INTERNAL_PTR)actual, lineNumber, msg))
    {
        UNITY_FAIL_AND_BAIL;
    }

    while (elements--)
    2fc2:	00 00       	nop
    2fc4:	21 e0       	ldi	r18, 0x01	; 1
    2fc6:	89 81       	ldd	r24, Y+1	; 0x01
    2fc8:	9a 81       	ldd	r25, Y+2	; 0x02
    2fca:	ab 81       	ldd	r26, Y+3	; 0x03
    2fcc:	bc 81       	ldd	r27, Y+4	; 0x04
    2fce:	00 97       	sbiw	r24, 0x00	; 0
    2fd0:	a1 05       	cpc	r26, r1
    2fd2:	b1 05       	cpc	r27, r1
    2fd4:	09 f4       	brne	.+2      	; 0x2fd8 <UnityAssertEqualFloatArray+0x268>
    2fd6:	20 e0       	ldi	r18, 0x00	; 0
    2fd8:	89 81       	ldd	r24, Y+1	; 0x01
    2fda:	9a 81       	ldd	r25, Y+2	; 0x02
    2fdc:	ab 81       	ldd	r26, Y+3	; 0x03
    2fde:	bc 81       	ldd	r27, Y+4	; 0x04
    2fe0:	01 97       	sbiw	r24, 0x01	; 1
    2fe2:	a1 09       	sbc	r26, r1
    2fe4:	b1 09       	sbc	r27, r1
    2fe6:	89 83       	std	Y+1, r24	; 0x01
    2fe8:	9a 83       	std	Y+2, r25	; 0x02
    2fea:	ab 83       	std	Y+3, r26	; 0x03
    2fec:	bc 83       	std	Y+4, r27	; 0x04
    2fee:	22 23       	and	r18, r18
    2ff0:	09 f0       	breq	.+2      	; 0x2ff4 <UnityAssertEqualFloatArray+0x284>
    2ff2:	5c cf       	rjmp	.-328    	; 0x2eac <UnityAssertEqualFloatArray+0x13c>
    2ff4:	01 c0       	rjmp	.+2      	; 0x2ff8 <UnityAssertEqualFloatArray+0x288>
        UnityPrintPointlessAndBail();
    }

    if (expected == actual)
    {
        return; /* Both are NULL or same pointer */
    2ff6:	00 00       	nop
        {
            ptr_expected++;
        }
        ptr_actual++;
    }
}
    2ff8:	67 96       	adiw	r28, 0x17	; 23
    2ffa:	0f b6       	in	r0, 0x3f	; 63
    2ffc:	f8 94       	cli
    2ffe:	de bf       	out	0x3e, r29	; 62
    3000:	0f be       	out	0x3f, r0	; 63
    3002:	cd bf       	out	0x3d, r28	; 61
    3004:	cf 91       	pop	r28
    3006:	df 91       	pop	r29
    3008:	1f 91       	pop	r17
    300a:	0f 91       	pop	r16
    300c:	ff 90       	pop	r15
    300e:	ef 90       	pop	r14
    3010:	df 90       	pop	r13
    3012:	cf 90       	pop	r12
    3014:	af 90       	pop	r10
    3016:	08 95       	ret

00003018 <UnityAssertFloatsWithin>:
void UnityAssertFloatsWithin(const UNITY_FLOAT delta,
                             const UNITY_FLOAT expected,
                             const UNITY_FLOAT actual,
                             const char* msg,
                             const UNITY_LINE_TYPE lineNumber)
{
    3018:	8f 92       	push	r8
    301a:	9f 92       	push	r9
    301c:	af 92       	push	r10
    301e:	bf 92       	push	r11
    3020:	cf 92       	push	r12
    3022:	df 92       	push	r13
    3024:	ef 92       	push	r14
    3026:	ff 92       	push	r15
    3028:	0f 93       	push	r16
    302a:	1f 93       	push	r17
    302c:	df 93       	push	r29
    302e:	cf 93       	push	r28
    3030:	cd b7       	in	r28, 0x3d	; 61
    3032:	de b7       	in	r29, 0x3e	; 62
    3034:	62 97       	sbiw	r28, 0x12	; 18
    3036:	0f b6       	in	r0, 0x3f	; 63
    3038:	f8 94       	cli
    303a:	de bf       	out	0x3e, r29	; 62
    303c:	0f be       	out	0x3f, r0	; 63
    303e:	cd bf       	out	0x3d, r28	; 61
    3040:	69 83       	std	Y+1, r22	; 0x01
    3042:	7a 83       	std	Y+2, r23	; 0x02
    3044:	8b 83       	std	Y+3, r24	; 0x03
    3046:	9c 83       	std	Y+4, r25	; 0x04
    3048:	2d 83       	std	Y+5, r18	; 0x05
    304a:	3e 83       	std	Y+6, r19	; 0x06
    304c:	4f 83       	std	Y+7, r20	; 0x07
    304e:	58 87       	std	Y+8, r21	; 0x08
    3050:	e9 86       	std	Y+9, r14	; 0x09
    3052:	fa 86       	std	Y+10, r15	; 0x0a
    3054:	0b 87       	std	Y+11, r16	; 0x0b
    3056:	1c 87       	std	Y+12, r17	; 0x0c
    3058:	de 86       	std	Y+14, r13	; 0x0e
    305a:	cd 86       	std	Y+13, r12	; 0x0d
    305c:	8f 86       	std	Y+15, r8	; 0x0f
    305e:	98 8a       	std	Y+16, r9	; 0x10
    3060:	a9 8a       	std	Y+17, r10	; 0x11
    3062:	ba 8a       	std	Y+18, r11	; 0x12
    RETURN_IF_FAIL_OR_IGNORE;
    3064:	80 91 60 06 	lds	r24, 0x0660
    3068:	90 91 61 06 	lds	r25, 0x0661
    306c:	a0 91 62 06 	lds	r26, 0x0662
    3070:	b0 91 63 06 	lds	r27, 0x0663
    3074:	00 97       	sbiw	r24, 0x00	; 0
    3076:	a1 05       	cpc	r26, r1
    3078:	b1 05       	cpc	r27, r1
    307a:	09 f0       	breq	.+2      	; 0x307e <UnityAssertFloatsWithin+0x66>
    307c:	55 c0       	rjmp	.+170    	; 0x3128 <UnityAssertFloatsWithin+0x110>
    307e:	80 91 64 06 	lds	r24, 0x0664
    3082:	90 91 65 06 	lds	r25, 0x0665
    3086:	a0 91 66 06 	lds	r26, 0x0666
    308a:	b0 91 67 06 	lds	r27, 0x0667
    308e:	00 97       	sbiw	r24, 0x00	; 0
    3090:	a1 05       	cpc	r26, r1
    3092:	b1 05       	cpc	r27, r1
    3094:	09 f0       	breq	.+2      	; 0x3098 <UnityAssertFloatsWithin+0x80>
    3096:	48 c0       	rjmp	.+144    	; 0x3128 <UnityAssertFloatsWithin+0x110>


    if (!UnityFloatsWithin(delta, expected, actual))
    3098:	89 81       	ldd	r24, Y+1	; 0x01
    309a:	9a 81       	ldd	r25, Y+2	; 0x02
    309c:	ab 81       	ldd	r26, Y+3	; 0x03
    309e:	bc 81       	ldd	r27, Y+4	; 0x04
    30a0:	2d 81       	ldd	r18, Y+5	; 0x05
    30a2:	3e 81       	ldd	r19, Y+6	; 0x06
    30a4:	4f 81       	ldd	r20, Y+7	; 0x07
    30a6:	58 85       	ldd	r21, Y+8	; 0x08
    30a8:	e9 84       	ldd	r14, Y+9	; 0x09
    30aa:	fa 84       	ldd	r15, Y+10	; 0x0a
    30ac:	0b 85       	ldd	r16, Y+11	; 0x0b
    30ae:	1c 85       	ldd	r17, Y+12	; 0x0c
    30b0:	bc 01       	movw	r22, r24
    30b2:	cd 01       	movw	r24, r26
    30b4:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <UnityFloatsWithin>
    30b8:	00 97       	sbiw	r24, 0x00	; 0
    30ba:	b1 f5       	brne	.+108    	; 0x3128 <UnityAssertFloatsWithin+0x110>
    {
        UnityTestResultsFailBegin(lineNumber);
    30bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    30be:	98 89       	ldd	r25, Y+16	; 0x10
    30c0:	a9 89       	ldd	r26, Y+17	; 0x11
    30c2:	ba 89       	ldd	r27, Y+18	; 0x12
    30c4:	bc 01       	movw	r22, r24
    30c6:	cd 01       	movw	r24, r26
    30c8:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <UnityTestResultsFailBegin>
        UNITY_PRINT_EXPECTED_AND_ACTUAL_FLOAT((UNITY_DOUBLE)expected, (UNITY_DOUBLE)actual);
    30cc:	87 e2       	ldi	r24, 0x27	; 39
    30ce:	93 e0       	ldi	r25, 0x03	; 3
    30d0:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
    30d4:	8d 81       	ldd	r24, Y+5	; 0x05
    30d6:	9e 81       	ldd	r25, Y+6	; 0x06
    30d8:	af 81       	ldd	r26, Y+7	; 0x07
    30da:	b8 85       	ldd	r27, Y+8	; 0x08
    30dc:	bc 01       	movw	r22, r24
    30de:	cd 01       	movw	r24, r26
    30e0:	0e 94 4a 0a 	call	0x1494	; 0x1494 <UnityPrintFloat>
    30e4:	82 e3       	ldi	r24, 0x32	; 50
    30e6:	93 e0       	ldi	r25, 0x03	; 3
    30e8:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
    30ec:	89 85       	ldd	r24, Y+9	; 0x09
    30ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    30f0:	ab 85       	ldd	r26, Y+11	; 0x0b
    30f2:	bc 85       	ldd	r27, Y+12	; 0x0c
    30f4:	bc 01       	movw	r22, r24
    30f6:	cd 01       	movw	r24, r26
    30f8:	0e 94 4a 0a 	call	0x1494	; 0x1494 <UnityPrintFloat>
        UnityAddMsgIfSpecified(msg);
    30fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    30fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3100:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <UnityAddMsgIfSpecified>
        UNITY_FAIL_AND_BAIL;
    3104:	81 e0       	ldi	r24, 0x01	; 1
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	a0 e0       	ldi	r26, 0x00	; 0
    310a:	b0 e0       	ldi	r27, 0x00	; 0
    310c:	80 93 60 06 	sts	0x0660, r24
    3110:	90 93 61 06 	sts	0x0661, r25
    3114:	a0 93 62 06 	sts	0x0662, r26
    3118:	b0 93 63 06 	sts	0x0663, r27
    311c:	88 e6       	ldi	r24, 0x68	; 104
    311e:	96 e0       	ldi	r25, 0x06	; 6
    3120:	61 e0       	ldi	r22, 0x01	; 1
    3122:	70 e0       	ldi	r23, 0x00	; 0
    3124:	0e 94 48 29 	call	0x5290	; 0x5290 <longjmp>
    }
}
    3128:	62 96       	adiw	r28, 0x12	; 18
    312a:	0f b6       	in	r0, 0x3f	; 63
    312c:	f8 94       	cli
    312e:	de bf       	out	0x3e, r29	; 62
    3130:	0f be       	out	0x3f, r0	; 63
    3132:	cd bf       	out	0x3d, r28	; 61
    3134:	cf 91       	pop	r28
    3136:	df 91       	pop	r29
    3138:	1f 91       	pop	r17
    313a:	0f 91       	pop	r16
    313c:	ff 90       	pop	r15
    313e:	ef 90       	pop	r14
    3140:	df 90       	pop	r13
    3142:	cf 90       	pop	r12
    3144:	bf 90       	pop	r11
    3146:	af 90       	pop	r10
    3148:	9f 90       	pop	r9
    314a:	8f 90       	pop	r8
    314c:	08 95       	ret

0000314e <UnityAssertFloatSpecial>:
/*-----------------------------------------------*/
void UnityAssertFloatSpecial(const UNITY_FLOAT actual,
                             const char* msg,
                             const UNITY_LINE_TYPE lineNumber,
                             const UNITY_FLOAT_TRAIT_T style)
{
    314e:	df 92       	push	r13
    3150:	ef 92       	push	r14
    3152:	ff 92       	push	r15
    3154:	0f 93       	push	r16
    3156:	1f 93       	push	r17
    3158:	df 93       	push	r29
    315a:	cf 93       	push	r28
    315c:	cd b7       	in	r28, 0x3d	; 61
    315e:	de b7       	in	r29, 0x3e	; 62
    3160:	6f 97       	sbiw	r28, 0x1f	; 31
    3162:	0f b6       	in	r0, 0x3f	; 63
    3164:	f8 94       	cli
    3166:	de bf       	out	0x3e, r29	; 62
    3168:	0f be       	out	0x3f, r0	; 63
    316a:	cd bf       	out	0x3d, r28	; 61
    316c:	6d 8b       	std	Y+21, r22	; 0x15
    316e:	7e 8b       	std	Y+22, r23	; 0x16
    3170:	8f 8b       	std	Y+23, r24	; 0x17
    3172:	98 8f       	std	Y+24, r25	; 0x18
    3174:	5a 8f       	std	Y+26, r21	; 0x1a
    3176:	49 8f       	std	Y+25, r20	; 0x19
    3178:	0b 8f       	std	Y+27, r16	; 0x1b
    317a:	1c 8f       	std	Y+28, r17	; 0x1c
    317c:	2d 8f       	std	Y+29, r18	; 0x1d
    317e:	3e 8f       	std	Y+30, r19	; 0x1e
    3180:	ef 8e       	std	Y+31, r14	; 0x1f
    const char* trait_names[] = {UnityStrInf, UnityStrNegInf, UnityStrNaN, UnityStrDet};
    3182:	ce 01       	movw	r24, r28
    3184:	0d 96       	adiw	r24, 0x0d	; 13
    3186:	20 e3       	ldi	r18, 0x30	; 48
    3188:	35 e0       	ldi	r19, 0x05	; 5
    318a:	48 e0       	ldi	r20, 0x08	; 8
    318c:	f9 01       	movw	r30, r18
    318e:	00 80       	ld	r0, Z
    3190:	2f 5f       	subi	r18, 0xFF	; 255
    3192:	3f 4f       	sbci	r19, 0xFF	; 255
    3194:	fc 01       	movw	r30, r24
    3196:	00 82       	st	Z, r0
    3198:	01 96       	adiw	r24, 0x01	; 1
    319a:	41 50       	subi	r20, 0x01	; 1
    319c:	44 23       	and	r20, r20
    319e:	b1 f7       	brne	.-20     	; 0x318c <UnityAssertFloatSpecial+0x3e>
    UNITY_INT should_be_trait = ((UNITY_INT)style & 1);
    31a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31a2:	88 2f       	mov	r24, r24
    31a4:	90 e0       	ldi	r25, 0x00	; 0
    31a6:	a0 e0       	ldi	r26, 0x00	; 0
    31a8:	b0 e0       	ldi	r27, 0x00	; 0
    31aa:	81 70       	andi	r24, 0x01	; 1
    31ac:	90 70       	andi	r25, 0x00	; 0
    31ae:	a0 70       	andi	r26, 0x00	; 0
    31b0:	b0 70       	andi	r27, 0x00	; 0
    31b2:	89 87       	std	Y+9, r24	; 0x09
    31b4:	9a 87       	std	Y+10, r25	; 0x0a
    31b6:	ab 87       	std	Y+11, r26	; 0x0b
    31b8:	bc 87       	std	Y+12, r27	; 0x0c
    UNITY_INT is_trait        = !should_be_trait;
    31ba:	81 e0       	ldi	r24, 0x01	; 1
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	a0 e0       	ldi	r26, 0x00	; 0
    31c0:	b0 e0       	ldi	r27, 0x00	; 0
    31c2:	29 85       	ldd	r18, Y+9	; 0x09
    31c4:	3a 85       	ldd	r19, Y+10	; 0x0a
    31c6:	4b 85       	ldd	r20, Y+11	; 0x0b
    31c8:	5c 85       	ldd	r21, Y+12	; 0x0c
    31ca:	21 15       	cp	r18, r1
    31cc:	31 05       	cpc	r19, r1
    31ce:	41 05       	cpc	r20, r1
    31d0:	51 05       	cpc	r21, r1
    31d2:	19 f0       	breq	.+6      	; 0x31da <UnityAssertFloatSpecial+0x8c>
    31d4:	80 e0       	ldi	r24, 0x00	; 0
    31d6:	90 e0       	ldi	r25, 0x00	; 0
    31d8:	dc 01       	movw	r26, r24
    31da:	89 83       	std	Y+1, r24	; 0x01
    31dc:	9a 83       	std	Y+2, r25	; 0x02
    31de:	ab 83       	std	Y+3, r26	; 0x03
    31e0:	bc 83       	std	Y+4, r27	; 0x04
    UNITY_INT trait_index     = (UNITY_INT)(style >> 1);
    31e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31e4:	86 95       	lsr	r24
    31e6:	88 2f       	mov	r24, r24
    31e8:	90 e0       	ldi	r25, 0x00	; 0
    31ea:	a0 e0       	ldi	r26, 0x00	; 0
    31ec:	b0 e0       	ldi	r27, 0x00	; 0
    31ee:	8d 83       	std	Y+5, r24	; 0x05
    31f0:	9e 83       	std	Y+6, r25	; 0x06
    31f2:	af 83       	std	Y+7, r26	; 0x07
    31f4:	b8 87       	std	Y+8, r27	; 0x08

    RETURN_IF_FAIL_OR_IGNORE;
    31f6:	80 91 60 06 	lds	r24, 0x0660
    31fa:	90 91 61 06 	lds	r25, 0x0661
    31fe:	a0 91 62 06 	lds	r26, 0x0662
    3202:	b0 91 63 06 	lds	r27, 0x0663
    3206:	00 97       	sbiw	r24, 0x00	; 0
    3208:	a1 05       	cpc	r26, r1
    320a:	b1 05       	cpc	r27, r1
    320c:	09 f0       	breq	.+2      	; 0x3210 <UnityAssertFloatSpecial+0xc2>
    320e:	93 c1       	rjmp	.+806    	; 0x3536 <UnityAssertFloatSpecial+0x3e8>
    3210:	80 91 64 06 	lds	r24, 0x0664
    3214:	90 91 65 06 	lds	r25, 0x0665
    3218:	a0 91 66 06 	lds	r26, 0x0666
    321c:	b0 91 67 06 	lds	r27, 0x0667
    3220:	00 97       	sbiw	r24, 0x00	; 0
    3222:	a1 05       	cpc	r26, r1
    3224:	b1 05       	cpc	r27, r1
    3226:	09 f0       	breq	.+2      	; 0x322a <UnityAssertFloatSpecial+0xdc>
    3228:	86 c1       	rjmp	.+780    	; 0x3536 <UnityAssertFloatSpecial+0x3e8>

    switch (style)
    322a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    322c:	88 2f       	mov	r24, r24
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	84 30       	cpi	r24, 0x04	; 4
    3232:	91 05       	cpc	r25, r1
    3234:	44 f4       	brge	.+16     	; 0x3246 <UnityAssertFloatSpecial+0xf8>
    3236:	82 30       	cpi	r24, 0x02	; 2
    3238:	91 05       	cpc	r25, r1
    323a:	0c f0       	brlt	.+2      	; 0x323e <UnityAssertFloatSpecial+0xf0>
    323c:	5e c0       	rjmp	.+188    	; 0x32fa <UnityAssertFloatSpecial+0x1ac>
    323e:	99 23       	and	r25, r25
    3240:	0c f4       	brge	.+2      	; 0x3244 <UnityAssertFloatSpecial+0xf6>
    3242:	19 c1       	rjmp	.+562    	; 0x3476 <UnityAssertFloatSpecial+0x328>
    3244:	09 c0       	rjmp	.+18     	; 0x3258 <UnityAssertFloatSpecial+0x10a>
    3246:	86 30       	cpi	r24, 0x06	; 6
    3248:	91 05       	cpc	r25, r1
    324a:	0c f4       	brge	.+2      	; 0x324e <UnityAssertFloatSpecial+0x100>
    324c:	a7 c0       	rjmp	.+334    	; 0x339c <UnityAssertFloatSpecial+0x24e>
    324e:	88 30       	cpi	r24, 0x08	; 8
    3250:	91 05       	cpc	r25, r1
    3252:	0c f0       	brlt	.+2      	; 0x3256 <UnityAssertFloatSpecial+0x108>
    3254:	10 c1       	rjmp	.+544    	; 0x3476 <UnityAssertFloatSpecial+0x328>
    3256:	ba c0       	rjmp	.+372    	; 0x33cc <UnityAssertFloatSpecial+0x27e>
    {
        case UNITY_FLOAT_IS_INF:
        case UNITY_FLOAT_IS_NOT_INF:
            is_trait = isinf(actual) && (actual > 0);
    3258:	6d 89       	ldd	r22, Y+21	; 0x15
    325a:	7e 89       	ldd	r23, Y+22	; 0x16
    325c:	8f 89       	ldd	r24, Y+23	; 0x17
    325e:	98 8d       	ldd	r25, Y+24	; 0x18
    3260:	2d 89       	ldd	r18, Y+21	; 0x15
    3262:	3e 89       	ldd	r19, Y+22	; 0x16
    3264:	4f 89       	ldd	r20, Y+23	; 0x17
    3266:	58 8d       	ldd	r21, Y+24	; 0x18
    3268:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <__subsf3>
    326c:	dc 01       	movw	r26, r24
    326e:	cb 01       	movw	r24, r22
    3270:	7c 01       	movw	r14, r24
    3272:	8d 01       	movw	r16, r26
    3274:	6d 89       	ldd	r22, Y+21	; 0x15
    3276:	7e 89       	ldd	r23, Y+22	; 0x16
    3278:	8f 89       	ldd	r24, Y+23	; 0x17
    327a:	98 8d       	ldd	r25, Y+24	; 0x18
    327c:	2d 89       	ldd	r18, Y+21	; 0x15
    327e:	3e 89       	ldd	r19, Y+22	; 0x16
    3280:	4f 89       	ldd	r20, Y+23	; 0x17
    3282:	58 8d       	ldd	r21, Y+24	; 0x18
    3284:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <__subsf3>
    3288:	dc 01       	movw	r26, r24
    328a:	cb 01       	movw	r24, r22
    328c:	9c 01       	movw	r18, r24
    328e:	ad 01       	movw	r20, r26
    3290:	c8 01       	movw	r24, r16
    3292:	b7 01       	movw	r22, r14
    3294:	0e 94 ef 26 	call	0x4dde	; 0x4dde <__cmpsf2>
    3298:	88 23       	and	r24, r24
    329a:	21 f1       	breq	.+72     	; 0x32e4 <UnityAssertFloatSpecial+0x196>
    329c:	11 e0       	ldi	r17, 0x01	; 1
    329e:	6d 89       	ldd	r22, Y+21	; 0x15
    32a0:	7e 89       	ldd	r23, Y+22	; 0x16
    32a2:	8f 89       	ldd	r24, Y+23	; 0x17
    32a4:	98 8d       	ldd	r25, Y+24	; 0x18
    32a6:	2d 89       	ldd	r18, Y+21	; 0x15
    32a8:	3e 89       	ldd	r19, Y+22	; 0x16
    32aa:	4f 89       	ldd	r20, Y+23	; 0x17
    32ac:	58 8d       	ldd	r21, Y+24	; 0x18
    32ae:	0e 94 ef 26 	call	0x4dde	; 0x4dde <__cmpsf2>
    32b2:	88 23       	and	r24, r24
    32b4:	09 f4       	brne	.+2      	; 0x32b8 <UnityAssertFloatSpecial+0x16a>
    32b6:	10 e0       	ldi	r17, 0x00	; 0
    32b8:	81 e0       	ldi	r24, 0x01	; 1
    32ba:	81 27       	eor	r24, r17
    32bc:	88 23       	and	r24, r24
    32be:	91 f0       	breq	.+36     	; 0x32e4 <UnityAssertFloatSpecial+0x196>
    32c0:	11 e0       	ldi	r17, 0x01	; 1
    32c2:	6d 89       	ldd	r22, Y+21	; 0x15
    32c4:	7e 89       	ldd	r23, Y+22	; 0x16
    32c6:	8f 89       	ldd	r24, Y+23	; 0x17
    32c8:	98 8d       	ldd	r25, Y+24	; 0x18
    32ca:	20 e0       	ldi	r18, 0x00	; 0
    32cc:	30 e0       	ldi	r19, 0x00	; 0
    32ce:	a9 01       	movw	r20, r18
    32d0:	0e 94 3e 28 	call	0x507c	; 0x507c <__gesf2>
    32d4:	18 16       	cp	r1, r24
    32d6:	0c f0       	brlt	.+2      	; 0x32da <UnityAssertFloatSpecial+0x18c>
    32d8:	10 e0       	ldi	r17, 0x00	; 0
    32da:	11 23       	and	r17, r17
    32dc:	19 f0       	breq	.+6      	; 0x32e4 <UnityAssertFloatSpecial+0x196>
    32de:	81 e0       	ldi	r24, 0x01	; 1
    32e0:	90 e0       	ldi	r25, 0x00	; 0
    32e2:	02 c0       	rjmp	.+4      	; 0x32e8 <UnityAssertFloatSpecial+0x19a>
    32e4:	80 e0       	ldi	r24, 0x00	; 0
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	aa 27       	eor	r26, r26
    32ea:	97 fd       	sbrc	r25, 7
    32ec:	a0 95       	com	r26
    32ee:	ba 2f       	mov	r27, r26
    32f0:	89 83       	std	Y+1, r24	; 0x01
    32f2:	9a 83       	std	Y+2, r25	; 0x02
    32f4:	ab 83       	std	Y+3, r26	; 0x03
    32f6:	bc 83       	std	Y+4, r27	; 0x04
            break;
    32f8:	c7 c0       	rjmp	.+398    	; 0x3488 <UnityAssertFloatSpecial+0x33a>
        case UNITY_FLOAT_IS_NEG_INF:
        case UNITY_FLOAT_IS_NOT_NEG_INF:
            is_trait = isinf(actual) && (actual < 0);
    32fa:	6d 89       	ldd	r22, Y+21	; 0x15
    32fc:	7e 89       	ldd	r23, Y+22	; 0x16
    32fe:	8f 89       	ldd	r24, Y+23	; 0x17
    3300:	98 8d       	ldd	r25, Y+24	; 0x18
    3302:	2d 89       	ldd	r18, Y+21	; 0x15
    3304:	3e 89       	ldd	r19, Y+22	; 0x16
    3306:	4f 89       	ldd	r20, Y+23	; 0x17
    3308:	58 8d       	ldd	r21, Y+24	; 0x18
    330a:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <__subsf3>
    330e:	dc 01       	movw	r26, r24
    3310:	cb 01       	movw	r24, r22
    3312:	7c 01       	movw	r14, r24
    3314:	8d 01       	movw	r16, r26
    3316:	6d 89       	ldd	r22, Y+21	; 0x15
    3318:	7e 89       	ldd	r23, Y+22	; 0x16
    331a:	8f 89       	ldd	r24, Y+23	; 0x17
    331c:	98 8d       	ldd	r25, Y+24	; 0x18
    331e:	2d 89       	ldd	r18, Y+21	; 0x15
    3320:	3e 89       	ldd	r19, Y+22	; 0x16
    3322:	4f 89       	ldd	r20, Y+23	; 0x17
    3324:	58 8d       	ldd	r21, Y+24	; 0x18
    3326:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <__subsf3>
    332a:	dc 01       	movw	r26, r24
    332c:	cb 01       	movw	r24, r22
    332e:	9c 01       	movw	r18, r24
    3330:	ad 01       	movw	r20, r26
    3332:	c8 01       	movw	r24, r16
    3334:	b7 01       	movw	r22, r14
    3336:	0e 94 ef 26 	call	0x4dde	; 0x4dde <__cmpsf2>
    333a:	88 23       	and	r24, r24
    333c:	21 f1       	breq	.+72     	; 0x3386 <UnityAssertFloatSpecial+0x238>
    333e:	11 e0       	ldi	r17, 0x01	; 1
    3340:	6d 89       	ldd	r22, Y+21	; 0x15
    3342:	7e 89       	ldd	r23, Y+22	; 0x16
    3344:	8f 89       	ldd	r24, Y+23	; 0x17
    3346:	98 8d       	ldd	r25, Y+24	; 0x18
    3348:	2d 89       	ldd	r18, Y+21	; 0x15
    334a:	3e 89       	ldd	r19, Y+22	; 0x16
    334c:	4f 89       	ldd	r20, Y+23	; 0x17
    334e:	58 8d       	ldd	r21, Y+24	; 0x18
    3350:	0e 94 ef 26 	call	0x4dde	; 0x4dde <__cmpsf2>
    3354:	88 23       	and	r24, r24
    3356:	09 f4       	brne	.+2      	; 0x335a <UnityAssertFloatSpecial+0x20c>
    3358:	10 e0       	ldi	r17, 0x00	; 0
    335a:	81 e0       	ldi	r24, 0x01	; 1
    335c:	81 27       	eor	r24, r17
    335e:	88 23       	and	r24, r24
    3360:	91 f0       	breq	.+36     	; 0x3386 <UnityAssertFloatSpecial+0x238>
    3362:	11 e0       	ldi	r17, 0x01	; 1
    3364:	6d 89       	ldd	r22, Y+21	; 0x15
    3366:	7e 89       	ldd	r23, Y+22	; 0x16
    3368:	8f 89       	ldd	r24, Y+23	; 0x17
    336a:	98 8d       	ldd	r25, Y+24	; 0x18
    336c:	20 e0       	ldi	r18, 0x00	; 0
    336e:	30 e0       	ldi	r19, 0x00	; 0
    3370:	a9 01       	movw	r20, r18
    3372:	0e 94 ef 26 	call	0x4dde	; 0x4dde <__cmpsf2>
    3376:	88 23       	and	r24, r24
    3378:	0c f0       	brlt	.+2      	; 0x337c <UnityAssertFloatSpecial+0x22e>
    337a:	10 e0       	ldi	r17, 0x00	; 0
    337c:	11 23       	and	r17, r17
    337e:	19 f0       	breq	.+6      	; 0x3386 <UnityAssertFloatSpecial+0x238>
    3380:	81 e0       	ldi	r24, 0x01	; 1
    3382:	90 e0       	ldi	r25, 0x00	; 0
    3384:	02 c0       	rjmp	.+4      	; 0x338a <UnityAssertFloatSpecial+0x23c>
    3386:	80 e0       	ldi	r24, 0x00	; 0
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	aa 27       	eor	r26, r26
    338c:	97 fd       	sbrc	r25, 7
    338e:	a0 95       	com	r26
    3390:	ba 2f       	mov	r27, r26
    3392:	89 83       	std	Y+1, r24	; 0x01
    3394:	9a 83       	std	Y+2, r25	; 0x02
    3396:	ab 83       	std	Y+3, r26	; 0x03
    3398:	bc 83       	std	Y+4, r27	; 0x04
            break;
    339a:	76 c0       	rjmp	.+236    	; 0x3488 <UnityAssertFloatSpecial+0x33a>

        case UNITY_FLOAT_IS_NAN:
        case UNITY_FLOAT_IS_NOT_NAN:
            is_trait = isnan(actual) ? 1 : 0;
    339c:	ee 24       	eor	r14, r14
    339e:	ff 24       	eor	r15, r15
    33a0:	87 01       	movw	r16, r14
    33a2:	e3 94       	inc	r14
    33a4:	6d 89       	ldd	r22, Y+21	; 0x15
    33a6:	7e 89       	ldd	r23, Y+22	; 0x16
    33a8:	8f 89       	ldd	r24, Y+23	; 0x17
    33aa:	98 8d       	ldd	r25, Y+24	; 0x18
    33ac:	2d 89       	ldd	r18, Y+21	; 0x15
    33ae:	3e 89       	ldd	r19, Y+22	; 0x16
    33b0:	4f 89       	ldd	r20, Y+23	; 0x17
    33b2:	58 8d       	ldd	r21, Y+24	; 0x18
    33b4:	0e 94 ef 26 	call	0x4dde	; 0x4dde <__cmpsf2>
    33b8:	88 23       	and	r24, r24
    33ba:	19 f4       	brne	.+6      	; 0x33c2 <UnityAssertFloatSpecial+0x274>
    33bc:	ee 24       	eor	r14, r14
    33be:	ff 24       	eor	r15, r15
    33c0:	87 01       	movw	r16, r14
    33c2:	e9 82       	std	Y+1, r14	; 0x01
    33c4:	fa 82       	std	Y+2, r15	; 0x02
    33c6:	0b 83       	std	Y+3, r16	; 0x03
    33c8:	1c 83       	std	Y+4, r17	; 0x04
            break;
    33ca:	5e c0       	rjmp	.+188    	; 0x3488 <UnityAssertFloatSpecial+0x33a>

        case UNITY_FLOAT_IS_DET: /* A determinate number is non infinite and not NaN. */
        case UNITY_FLOAT_IS_NOT_DET:
            is_trait = !isinf(actual) && !isnan(actual);
    33cc:	6d 89       	ldd	r22, Y+21	; 0x15
    33ce:	7e 89       	ldd	r23, Y+22	; 0x16
    33d0:	8f 89       	ldd	r24, Y+23	; 0x17
    33d2:	98 8d       	ldd	r25, Y+24	; 0x18
    33d4:	2d 89       	ldd	r18, Y+21	; 0x15
    33d6:	3e 89       	ldd	r19, Y+22	; 0x16
    33d8:	4f 89       	ldd	r20, Y+23	; 0x17
    33da:	58 8d       	ldd	r21, Y+24	; 0x18
    33dc:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <__subsf3>
    33e0:	dc 01       	movw	r26, r24
    33e2:	cb 01       	movw	r24, r22
    33e4:	7c 01       	movw	r14, r24
    33e6:	8d 01       	movw	r16, r26
    33e8:	6d 89       	ldd	r22, Y+21	; 0x15
    33ea:	7e 89       	ldd	r23, Y+22	; 0x16
    33ec:	8f 89       	ldd	r24, Y+23	; 0x17
    33ee:	98 8d       	ldd	r25, Y+24	; 0x18
    33f0:	2d 89       	ldd	r18, Y+21	; 0x15
    33f2:	3e 89       	ldd	r19, Y+22	; 0x16
    33f4:	4f 89       	ldd	r20, Y+23	; 0x17
    33f6:	58 8d       	ldd	r21, Y+24	; 0x18
    33f8:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <__subsf3>
    33fc:	dc 01       	movw	r26, r24
    33fe:	cb 01       	movw	r24, r22
    3400:	9c 01       	movw	r18, r24
    3402:	ad 01       	movw	r20, r26
    3404:	dd 24       	eor	r13, r13
    3406:	d3 94       	inc	r13
    3408:	c8 01       	movw	r24, r16
    340a:	b7 01       	movw	r22, r14
    340c:	0e 94 ef 26 	call	0x4dde	; 0x4dde <__cmpsf2>
    3410:	88 23       	and	r24, r24
    3412:	09 f4       	brne	.+2      	; 0x3416 <UnityAssertFloatSpecial+0x2c8>
    3414:	dd 24       	eor	r13, r13
    3416:	81 e0       	ldi	r24, 0x01	; 1
    3418:	8d 25       	eor	r24, r13
    341a:	88 23       	and	r24, r24
    341c:	61 f4       	brne	.+24     	; 0x3436 <UnityAssertFloatSpecial+0x2e8>
    341e:	6d 89       	ldd	r22, Y+21	; 0x15
    3420:	7e 89       	ldd	r23, Y+22	; 0x16
    3422:	8f 89       	ldd	r24, Y+23	; 0x17
    3424:	98 8d       	ldd	r25, Y+24	; 0x18
    3426:	2d 89       	ldd	r18, Y+21	; 0x15
    3428:	3e 89       	ldd	r19, Y+22	; 0x16
    342a:	4f 89       	ldd	r20, Y+23	; 0x17
    342c:	58 8d       	ldd	r21, Y+24	; 0x18
    342e:	0e 94 ef 26 	call	0x4dde	; 0x4dde <__cmpsf2>
    3432:	88 23       	and	r24, r24
    3434:	a9 f0       	breq	.+42     	; 0x3460 <UnityAssertFloatSpecial+0x312>
    3436:	11 e0       	ldi	r17, 0x01	; 1
    3438:	6d 89       	ldd	r22, Y+21	; 0x15
    343a:	7e 89       	ldd	r23, Y+22	; 0x16
    343c:	8f 89       	ldd	r24, Y+23	; 0x17
    343e:	98 8d       	ldd	r25, Y+24	; 0x18
    3440:	2d 89       	ldd	r18, Y+21	; 0x15
    3442:	3e 89       	ldd	r19, Y+22	; 0x16
    3444:	4f 89       	ldd	r20, Y+23	; 0x17
    3446:	58 8d       	ldd	r21, Y+24	; 0x18
    3448:	0e 94 ef 26 	call	0x4dde	; 0x4dde <__cmpsf2>
    344c:	88 23       	and	r24, r24
    344e:	09 f4       	brne	.+2      	; 0x3452 <UnityAssertFloatSpecial+0x304>
    3450:	10 e0       	ldi	r17, 0x00	; 0
    3452:	81 e0       	ldi	r24, 0x01	; 1
    3454:	81 27       	eor	r24, r17
    3456:	88 23       	and	r24, r24
    3458:	19 f0       	breq	.+6      	; 0x3460 <UnityAssertFloatSpecial+0x312>
    345a:	81 e0       	ldi	r24, 0x01	; 1
    345c:	90 e0       	ldi	r25, 0x00	; 0
    345e:	02 c0       	rjmp	.+4      	; 0x3464 <UnityAssertFloatSpecial+0x316>
    3460:	80 e0       	ldi	r24, 0x00	; 0
    3462:	90 e0       	ldi	r25, 0x00	; 0
    3464:	aa 27       	eor	r26, r26
    3466:	97 fd       	sbrc	r25, 7
    3468:	a0 95       	com	r26
    346a:	ba 2f       	mov	r27, r26
    346c:	89 83       	std	Y+1, r24	; 0x01
    346e:	9a 83       	std	Y+2, r25	; 0x02
    3470:	ab 83       	std	Y+3, r26	; 0x03
    3472:	bc 83       	std	Y+4, r27	; 0x04
            break;
    3474:	09 c0       	rjmp	.+18     	; 0x3488 <UnityAssertFloatSpecial+0x33a>

        default:
            trait_index = 0;
    3476:	1d 82       	std	Y+5, r1	; 0x05
    3478:	1e 82       	std	Y+6, r1	; 0x06
    347a:	1f 82       	std	Y+7, r1	; 0x07
    347c:	18 86       	std	Y+8, r1	; 0x08
            trait_names[0] = UnityStrInvalidFloatTrait;
    347e:	86 e4       	ldi	r24, 0x46	; 70
    3480:	94 e0       	ldi	r25, 0x04	; 4
    3482:	9e 87       	std	Y+14, r25	; 0x0e
    3484:	8d 87       	std	Y+13, r24	; 0x0d
            break;
    3486:	00 00       	nop
    }

    if (is_trait != should_be_trait)
    3488:	29 81       	ldd	r18, Y+1	; 0x01
    348a:	3a 81       	ldd	r19, Y+2	; 0x02
    348c:	4b 81       	ldd	r20, Y+3	; 0x03
    348e:	5c 81       	ldd	r21, Y+4	; 0x04
    3490:	89 85       	ldd	r24, Y+9	; 0x09
    3492:	9a 85       	ldd	r25, Y+10	; 0x0a
    3494:	ab 85       	ldd	r26, Y+11	; 0x0b
    3496:	bc 85       	ldd	r27, Y+12	; 0x0c
    3498:	28 17       	cp	r18, r24
    349a:	39 07       	cpc	r19, r25
    349c:	4a 07       	cpc	r20, r26
    349e:	5b 07       	cpc	r21, r27
    34a0:	09 f4       	brne	.+2      	; 0x34a4 <UnityAssertFloatSpecial+0x356>
    34a2:	49 c0       	rjmp	.+146    	; 0x3536 <UnityAssertFloatSpecial+0x3e8>
    {
        UnityTestResultsFailBegin(lineNumber);
    34a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34a8:	ad 8d       	ldd	r26, Y+29	; 0x1d
    34aa:	be 8d       	ldd	r27, Y+30	; 0x1e
    34ac:	bc 01       	movw	r22, r24
    34ae:	cd 01       	movw	r24, r26
    34b0:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <UnityTestResultsFailBegin>
        UnityPrint(UnityStrExpected);
    34b4:	87 e2       	ldi	r24, 0x27	; 39
    34b6:	93 e0       	ldi	r25, 0x03	; 3
    34b8:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
        if (!should_be_trait)
    34bc:	89 85       	ldd	r24, Y+9	; 0x09
    34be:	9a 85       	ldd	r25, Y+10	; 0x0a
    34c0:	ab 85       	ldd	r26, Y+11	; 0x0b
    34c2:	bc 85       	ldd	r27, Y+12	; 0x0c
    34c4:	00 97       	sbiw	r24, 0x00	; 0
    34c6:	a1 05       	cpc	r26, r1
    34c8:	b1 05       	cpc	r27, r1
    34ca:	21 f4       	brne	.+8      	; 0x34d4 <UnityAssertFloatSpecial+0x386>
        {
            UnityPrint(UnityStrNot);
    34cc:	86 e1       	ldi	r24, 0x16	; 22
    34ce:	94 e0       	ldi	r25, 0x04	; 4
    34d0:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
        }
        UnityPrint(trait_names[trait_index]);
    34d4:	8d 81       	ldd	r24, Y+5	; 0x05
    34d6:	9e 81       	ldd	r25, Y+6	; 0x06
    34d8:	88 0f       	add	r24, r24
    34da:	99 1f       	adc	r25, r25
    34dc:	9e 01       	movw	r18, r28
    34de:	2f 5f       	subi	r18, 0xFF	; 255
    34e0:	3f 4f       	sbci	r19, 0xFF	; 255
    34e2:	82 0f       	add	r24, r18
    34e4:	93 1f       	adc	r25, r19
    34e6:	0c 96       	adiw	r24, 0x0c	; 12
    34e8:	fc 01       	movw	r30, r24
    34ea:	80 81       	ld	r24, Z
    34ec:	91 81       	ldd	r25, Z+1	; 0x01
    34ee:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
        UnityPrint(UnityStrWas);
    34f2:	82 e3       	ldi	r24, 0x32	; 50
    34f4:	93 e0       	ldi	r25, 0x03	; 3
    34f6:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
#ifndef UNITY_EXCLUDE_FLOAT_PRINT
        UnityPrintFloat((UNITY_DOUBLE)actual);
    34fa:	8d 89       	ldd	r24, Y+21	; 0x15
    34fc:	9e 89       	ldd	r25, Y+22	; 0x16
    34fe:	af 89       	ldd	r26, Y+23	; 0x17
    3500:	b8 8d       	ldd	r27, Y+24	; 0x18
    3502:	bc 01       	movw	r22, r24
    3504:	cd 01       	movw	r24, r26
    3506:	0e 94 4a 0a 	call	0x1494	; 0x1494 <UnityPrintFloat>
        {
            UnityPrint(UnityStrNot);
        }
        UnityPrint(trait_names[trait_index]);
#endif
        UnityAddMsgIfSpecified(msg);
    350a:	89 8d       	ldd	r24, Y+25	; 0x19
    350c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    350e:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <UnityAddMsgIfSpecified>
        UNITY_FAIL_AND_BAIL;
    3512:	81 e0       	ldi	r24, 0x01	; 1
    3514:	90 e0       	ldi	r25, 0x00	; 0
    3516:	a0 e0       	ldi	r26, 0x00	; 0
    3518:	b0 e0       	ldi	r27, 0x00	; 0
    351a:	80 93 60 06 	sts	0x0660, r24
    351e:	90 93 61 06 	sts	0x0661, r25
    3522:	a0 93 62 06 	sts	0x0662, r26
    3526:	b0 93 63 06 	sts	0x0663, r27
    352a:	88 e6       	ldi	r24, 0x68	; 104
    352c:	96 e0       	ldi	r25, 0x06	; 6
    352e:	61 e0       	ldi	r22, 0x01	; 1
    3530:	70 e0       	ldi	r23, 0x00	; 0
    3532:	0e 94 48 29 	call	0x5290	; 0x5290 <longjmp>
    }
}
    3536:	6f 96       	adiw	r28, 0x1f	; 31
    3538:	0f b6       	in	r0, 0x3f	; 63
    353a:	f8 94       	cli
    353c:	de bf       	out	0x3e, r29	; 62
    353e:	0f be       	out	0x3f, r0	; 63
    3540:	cd bf       	out	0x3d, r28	; 61
    3542:	cf 91       	pop	r28
    3544:	df 91       	pop	r29
    3546:	1f 91       	pop	r17
    3548:	0f 91       	pop	r16
    354a:	ff 90       	pop	r15
    354c:	ef 90       	pop	r14
    354e:	df 90       	pop	r13
    3550:	08 95       	ret

00003552 <UnityAssertNumbersWithin>:
                              const UNITY_INT expected,
                              const UNITY_INT actual,
                              const char* msg,
                              const UNITY_LINE_TYPE lineNumber,
                              const UNITY_DISPLAY_STYLE_T style)
{
    3552:	8f 92       	push	r8
    3554:	9f 92       	push	r9
    3556:	af 92       	push	r10
    3558:	bf 92       	push	r11
    355a:	cf 92       	push	r12
    355c:	df 92       	push	r13
    355e:	ef 92       	push	r14
    3560:	ff 92       	push	r15
    3562:	0f 93       	push	r16
    3564:	1f 93       	push	r17
    3566:	df 93       	push	r29
    3568:	cf 93       	push	r28
    356a:	cd b7       	in	r28, 0x3d	; 61
    356c:	de b7       	in	r29, 0x3e	; 62
    356e:	62 97       	sbiw	r28, 0x12	; 18
    3570:	0f b6       	in	r0, 0x3f	; 63
    3572:	f8 94       	cli
    3574:	de bf       	out	0x3e, r29	; 62
    3576:	0f be       	out	0x3f, r0	; 63
    3578:	cd bf       	out	0x3d, r28	; 61
    357a:	69 83       	std	Y+1, r22	; 0x01
    357c:	7a 83       	std	Y+2, r23	; 0x02
    357e:	8b 83       	std	Y+3, r24	; 0x03
    3580:	9c 83       	std	Y+4, r25	; 0x04
    3582:	2d 83       	std	Y+5, r18	; 0x05
    3584:	3e 83       	std	Y+6, r19	; 0x06
    3586:	4f 83       	std	Y+7, r20	; 0x07
    3588:	58 87       	std	Y+8, r21	; 0x08
    358a:	e9 86       	std	Y+9, r14	; 0x09
    358c:	fa 86       	std	Y+10, r15	; 0x0a
    358e:	0b 87       	std	Y+11, r16	; 0x0b
    3590:	1c 87       	std	Y+12, r17	; 0x0c
    3592:	de 86       	std	Y+14, r13	; 0x0e
    3594:	cd 86       	std	Y+13, r12	; 0x0d
    3596:	8f 86       	std	Y+15, r8	; 0x0f
    3598:	98 8a       	std	Y+16, r9	; 0x10
    359a:	a9 8a       	std	Y+17, r10	; 0x11
    359c:	ba 8a       	std	Y+18, r11	; 0x12
    RETURN_IF_FAIL_OR_IGNORE;
    359e:	80 91 60 06 	lds	r24, 0x0660
    35a2:	90 91 61 06 	lds	r25, 0x0661
    35a6:	a0 91 62 06 	lds	r26, 0x0662
    35aa:	b0 91 63 06 	lds	r27, 0x0663
    35ae:	00 97       	sbiw	r24, 0x00	; 0
    35b0:	a1 05       	cpc	r26, r1
    35b2:	b1 05       	cpc	r27, r1
    35b4:	09 f0       	breq	.+2      	; 0x35b8 <UnityAssertNumbersWithin+0x66>
    35b6:	1c c1       	rjmp	.+568    	; 0x37f0 <UnityAssertNumbersWithin+0x29e>
    35b8:	80 91 64 06 	lds	r24, 0x0664
    35bc:	90 91 65 06 	lds	r25, 0x0665
    35c0:	a0 91 66 06 	lds	r26, 0x0666
    35c4:	b0 91 67 06 	lds	r27, 0x0667
    35c8:	00 97       	sbiw	r24, 0x00	; 0
    35ca:	a1 05       	cpc	r26, r1
    35cc:	b1 05       	cpc	r27, r1
    35ce:	09 f0       	breq	.+2      	; 0x35d2 <UnityAssertNumbersWithin+0x80>
    35d0:	0f c1       	rjmp	.+542    	; 0x37f0 <UnityAssertNumbersWithin+0x29e>

    if ((style & UNITY_DISPLAY_RANGE_INT) == UNITY_DISPLAY_RANGE_INT)
    35d2:	89 a1       	ldd	r24, Y+33	; 0x21
    35d4:	88 2f       	mov	r24, r24
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	80 71       	andi	r24, 0x10	; 16
    35da:	90 70       	andi	r25, 0x00	; 0
    35dc:	00 97       	sbiw	r24, 0x00	; 0
    35de:	09 f4       	brne	.+2      	; 0x35e2 <UnityAssertNumbersWithin+0x90>
    35e0:	5b c0       	rjmp	.+182    	; 0x3698 <UnityAssertNumbersWithin+0x146>
    {
        if (actual > expected)
    35e2:	29 85       	ldd	r18, Y+9	; 0x09
    35e4:	3a 85       	ldd	r19, Y+10	; 0x0a
    35e6:	4b 85       	ldd	r20, Y+11	; 0x0b
    35e8:	5c 85       	ldd	r21, Y+12	; 0x0c
    35ea:	8d 81       	ldd	r24, Y+5	; 0x05
    35ec:	9e 81       	ldd	r25, Y+6	; 0x06
    35ee:	af 81       	ldd	r26, Y+7	; 0x07
    35f0:	b8 85       	ldd	r27, Y+8	; 0x08
    35f2:	82 17       	cp	r24, r18
    35f4:	93 07       	cpc	r25, r19
    35f6:	a4 07       	cpc	r26, r20
    35f8:	b5 07       	cpc	r27, r21
    35fa:	3c f5       	brge	.+78     	; 0x364a <UnityAssertNumbersWithin+0xf8>
        {
            Unity.CurrentTestFailed = (((UNITY_UINT)actual - (UNITY_UINT)expected) > delta);
    35fc:	29 85       	ldd	r18, Y+9	; 0x09
    35fe:	3a 85       	ldd	r19, Y+10	; 0x0a
    3600:	4b 85       	ldd	r20, Y+11	; 0x0b
    3602:	5c 85       	ldd	r21, Y+12	; 0x0c
    3604:	8d 81       	ldd	r24, Y+5	; 0x05
    3606:	9e 81       	ldd	r25, Y+6	; 0x06
    3608:	af 81       	ldd	r26, Y+7	; 0x07
    360a:	b8 85       	ldd	r27, Y+8	; 0x08
    360c:	79 01       	movw	r14, r18
    360e:	8a 01       	movw	r16, r20
    3610:	e8 1a       	sub	r14, r24
    3612:	f9 0a       	sbc	r15, r25
    3614:	0a 0b       	sbc	r16, r26
    3616:	1b 0b       	sbc	r17, r27
    3618:	81 e0       	ldi	r24, 0x01	; 1
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	a0 e0       	ldi	r26, 0x00	; 0
    361e:	b0 e0       	ldi	r27, 0x00	; 0
    3620:	29 81       	ldd	r18, Y+1	; 0x01
    3622:	3a 81       	ldd	r19, Y+2	; 0x02
    3624:	4b 81       	ldd	r20, Y+3	; 0x03
    3626:	5c 81       	ldd	r21, Y+4	; 0x04
    3628:	2e 15       	cp	r18, r14
    362a:	3f 05       	cpc	r19, r15
    362c:	40 07       	cpc	r20, r16
    362e:	51 07       	cpc	r21, r17
    3630:	18 f0       	brcs	.+6      	; 0x3638 <UnityAssertNumbersWithin+0xe6>
    3632:	80 e0       	ldi	r24, 0x00	; 0
    3634:	90 e0       	ldi	r25, 0x00	; 0
    3636:	dc 01       	movw	r26, r24
    3638:	80 93 60 06 	sts	0x0660, r24
    363c:	90 93 61 06 	sts	0x0661, r25
    3640:	a0 93 62 06 	sts	0x0662, r26
    3644:	b0 93 63 06 	sts	0x0663, r27
    3648:	81 c0       	rjmp	.+258    	; 0x374c <UnityAssertNumbersWithin+0x1fa>
        }
        else
        {
            Unity.CurrentTestFailed = (((UNITY_UINT)expected - (UNITY_UINT)actual) > delta);
    364a:	2d 81       	ldd	r18, Y+5	; 0x05
    364c:	3e 81       	ldd	r19, Y+6	; 0x06
    364e:	4f 81       	ldd	r20, Y+7	; 0x07
    3650:	58 85       	ldd	r21, Y+8	; 0x08
    3652:	89 85       	ldd	r24, Y+9	; 0x09
    3654:	9a 85       	ldd	r25, Y+10	; 0x0a
    3656:	ab 85       	ldd	r26, Y+11	; 0x0b
    3658:	bc 85       	ldd	r27, Y+12	; 0x0c
    365a:	79 01       	movw	r14, r18
    365c:	8a 01       	movw	r16, r20
    365e:	e8 1a       	sub	r14, r24
    3660:	f9 0a       	sbc	r15, r25
    3662:	0a 0b       	sbc	r16, r26
    3664:	1b 0b       	sbc	r17, r27
    3666:	81 e0       	ldi	r24, 0x01	; 1
    3668:	90 e0       	ldi	r25, 0x00	; 0
    366a:	a0 e0       	ldi	r26, 0x00	; 0
    366c:	b0 e0       	ldi	r27, 0x00	; 0
    366e:	29 81       	ldd	r18, Y+1	; 0x01
    3670:	3a 81       	ldd	r19, Y+2	; 0x02
    3672:	4b 81       	ldd	r20, Y+3	; 0x03
    3674:	5c 81       	ldd	r21, Y+4	; 0x04
    3676:	2e 15       	cp	r18, r14
    3678:	3f 05       	cpc	r19, r15
    367a:	40 07       	cpc	r20, r16
    367c:	51 07       	cpc	r21, r17
    367e:	18 f0       	brcs	.+6      	; 0x3686 <UnityAssertNumbersWithin+0x134>
    3680:	80 e0       	ldi	r24, 0x00	; 0
    3682:	90 e0       	ldi	r25, 0x00	; 0
    3684:	dc 01       	movw	r26, r24
    3686:	80 93 60 06 	sts	0x0660, r24
    368a:	90 93 61 06 	sts	0x0661, r25
    368e:	a0 93 62 06 	sts	0x0662, r26
    3692:	b0 93 63 06 	sts	0x0663, r27
    3696:	5a c0       	rjmp	.+180    	; 0x374c <UnityAssertNumbersWithin+0x1fa>
        }
    }
    else
    {
        if ((UNITY_UINT)actual > (UNITY_UINT)expected)
    3698:	29 85       	ldd	r18, Y+9	; 0x09
    369a:	3a 85       	ldd	r19, Y+10	; 0x0a
    369c:	4b 85       	ldd	r20, Y+11	; 0x0b
    369e:	5c 85       	ldd	r21, Y+12	; 0x0c
    36a0:	8d 81       	ldd	r24, Y+5	; 0x05
    36a2:	9e 81       	ldd	r25, Y+6	; 0x06
    36a4:	af 81       	ldd	r26, Y+7	; 0x07
    36a6:	b8 85       	ldd	r27, Y+8	; 0x08
    36a8:	82 17       	cp	r24, r18
    36aa:	93 07       	cpc	r25, r19
    36ac:	a4 07       	cpc	r26, r20
    36ae:	b5 07       	cpc	r27, r21
    36b0:	38 f5       	brcc	.+78     	; 0x3700 <UnityAssertNumbersWithin+0x1ae>
        {
            Unity.CurrentTestFailed = (((UNITY_UINT)actual - (UNITY_UINT)expected) > delta);
    36b2:	29 85       	ldd	r18, Y+9	; 0x09
    36b4:	3a 85       	ldd	r19, Y+10	; 0x0a
    36b6:	4b 85       	ldd	r20, Y+11	; 0x0b
    36b8:	5c 85       	ldd	r21, Y+12	; 0x0c
    36ba:	8d 81       	ldd	r24, Y+5	; 0x05
    36bc:	9e 81       	ldd	r25, Y+6	; 0x06
    36be:	af 81       	ldd	r26, Y+7	; 0x07
    36c0:	b8 85       	ldd	r27, Y+8	; 0x08
    36c2:	79 01       	movw	r14, r18
    36c4:	8a 01       	movw	r16, r20
    36c6:	e8 1a       	sub	r14, r24
    36c8:	f9 0a       	sbc	r15, r25
    36ca:	0a 0b       	sbc	r16, r26
    36cc:	1b 0b       	sbc	r17, r27
    36ce:	81 e0       	ldi	r24, 0x01	; 1
    36d0:	90 e0       	ldi	r25, 0x00	; 0
    36d2:	a0 e0       	ldi	r26, 0x00	; 0
    36d4:	b0 e0       	ldi	r27, 0x00	; 0
    36d6:	29 81       	ldd	r18, Y+1	; 0x01
    36d8:	3a 81       	ldd	r19, Y+2	; 0x02
    36da:	4b 81       	ldd	r20, Y+3	; 0x03
    36dc:	5c 81       	ldd	r21, Y+4	; 0x04
    36de:	2e 15       	cp	r18, r14
    36e0:	3f 05       	cpc	r19, r15
    36e2:	40 07       	cpc	r20, r16
    36e4:	51 07       	cpc	r21, r17
    36e6:	18 f0       	brcs	.+6      	; 0x36ee <UnityAssertNumbersWithin+0x19c>
    36e8:	80 e0       	ldi	r24, 0x00	; 0
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	dc 01       	movw	r26, r24
    36ee:	80 93 60 06 	sts	0x0660, r24
    36f2:	90 93 61 06 	sts	0x0661, r25
    36f6:	a0 93 62 06 	sts	0x0662, r26
    36fa:	b0 93 63 06 	sts	0x0663, r27
    36fe:	26 c0       	rjmp	.+76     	; 0x374c <UnityAssertNumbersWithin+0x1fa>
        }
        else
        {
            Unity.CurrentTestFailed = (((UNITY_UINT)expected - (UNITY_UINT)actual) > delta);
    3700:	2d 81       	ldd	r18, Y+5	; 0x05
    3702:	3e 81       	ldd	r19, Y+6	; 0x06
    3704:	4f 81       	ldd	r20, Y+7	; 0x07
    3706:	58 85       	ldd	r21, Y+8	; 0x08
    3708:	89 85       	ldd	r24, Y+9	; 0x09
    370a:	9a 85       	ldd	r25, Y+10	; 0x0a
    370c:	ab 85       	ldd	r26, Y+11	; 0x0b
    370e:	bc 85       	ldd	r27, Y+12	; 0x0c
    3710:	79 01       	movw	r14, r18
    3712:	8a 01       	movw	r16, r20
    3714:	e8 1a       	sub	r14, r24
    3716:	f9 0a       	sbc	r15, r25
    3718:	0a 0b       	sbc	r16, r26
    371a:	1b 0b       	sbc	r17, r27
    371c:	81 e0       	ldi	r24, 0x01	; 1
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	a0 e0       	ldi	r26, 0x00	; 0
    3722:	b0 e0       	ldi	r27, 0x00	; 0
    3724:	29 81       	ldd	r18, Y+1	; 0x01
    3726:	3a 81       	ldd	r19, Y+2	; 0x02
    3728:	4b 81       	ldd	r20, Y+3	; 0x03
    372a:	5c 81       	ldd	r21, Y+4	; 0x04
    372c:	2e 15       	cp	r18, r14
    372e:	3f 05       	cpc	r19, r15
    3730:	40 07       	cpc	r20, r16
    3732:	51 07       	cpc	r21, r17
    3734:	18 f0       	brcs	.+6      	; 0x373c <UnityAssertNumbersWithin+0x1ea>
    3736:	80 e0       	ldi	r24, 0x00	; 0
    3738:	90 e0       	ldi	r25, 0x00	; 0
    373a:	dc 01       	movw	r26, r24
    373c:	80 93 60 06 	sts	0x0660, r24
    3740:	90 93 61 06 	sts	0x0661, r25
    3744:	a0 93 62 06 	sts	0x0662, r26
    3748:	b0 93 63 06 	sts	0x0663, r27
        }
    }

    if (Unity.CurrentTestFailed)
    374c:	80 91 60 06 	lds	r24, 0x0660
    3750:	90 91 61 06 	lds	r25, 0x0661
    3754:	a0 91 62 06 	lds	r26, 0x0662
    3758:	b0 91 63 06 	lds	r27, 0x0663
    375c:	00 97       	sbiw	r24, 0x00	; 0
    375e:	a1 05       	cpc	r26, r1
    3760:	b1 05       	cpc	r27, r1
    3762:	09 f4       	brne	.+2      	; 0x3766 <UnityAssertNumbersWithin+0x214>
    3764:	45 c0       	rjmp	.+138    	; 0x37f0 <UnityAssertNumbersWithin+0x29e>
    {
        UnityTestResultsFailBegin(lineNumber);
    3766:	8f 85       	ldd	r24, Y+15	; 0x0f
    3768:	98 89       	ldd	r25, Y+16	; 0x10
    376a:	a9 89       	ldd	r26, Y+17	; 0x11
    376c:	ba 89       	ldd	r27, Y+18	; 0x12
    376e:	bc 01       	movw	r22, r24
    3770:	cd 01       	movw	r24, r26
    3772:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <UnityTestResultsFailBegin>
        UnityPrint(UnityStrDelta);
    3776:	8f e8       	ldi	r24, 0x8F	; 143
    3778:	93 e0       	ldi	r25, 0x03	; 3
    377a:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
        UnityPrintNumberByStyle((UNITY_INT)delta, style);
    377e:	89 81       	ldd	r24, Y+1	; 0x01
    3780:	9a 81       	ldd	r25, Y+2	; 0x02
    3782:	ab 81       	ldd	r26, Y+3	; 0x03
    3784:	bc 81       	ldd	r27, Y+4	; 0x04
    3786:	bc 01       	movw	r22, r24
    3788:	cd 01       	movw	r24, r26
    378a:	49 a1       	ldd	r20, Y+33	; 0x21
    378c:	0e 94 54 08 	call	0x10a8	; 0x10a8 <UnityPrintNumberByStyle>
        UnityPrint(UnityStrExpected);
    3790:	87 e2       	ldi	r24, 0x27	; 39
    3792:	93 e0       	ldi	r25, 0x03	; 3
    3794:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
        UnityPrintNumberByStyle(expected, style);
    3798:	8d 81       	ldd	r24, Y+5	; 0x05
    379a:	9e 81       	ldd	r25, Y+6	; 0x06
    379c:	af 81       	ldd	r26, Y+7	; 0x07
    379e:	b8 85       	ldd	r27, Y+8	; 0x08
    37a0:	bc 01       	movw	r22, r24
    37a2:	cd 01       	movw	r24, r26
    37a4:	49 a1       	ldd	r20, Y+33	; 0x21
    37a6:	0e 94 54 08 	call	0x10a8	; 0x10a8 <UnityPrintNumberByStyle>
        UnityPrint(UnityStrWas);
    37aa:	82 e3       	ldi	r24, 0x32	; 50
    37ac:	93 e0       	ldi	r25, 0x03	; 3
    37ae:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
        UnityPrintNumberByStyle(actual, style);
    37b2:	89 85       	ldd	r24, Y+9	; 0x09
    37b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    37b6:	ab 85       	ldd	r26, Y+11	; 0x0b
    37b8:	bc 85       	ldd	r27, Y+12	; 0x0c
    37ba:	bc 01       	movw	r22, r24
    37bc:	cd 01       	movw	r24, r26
    37be:	49 a1       	ldd	r20, Y+33	; 0x21
    37c0:	0e 94 54 08 	call	0x10a8	; 0x10a8 <UnityPrintNumberByStyle>
        UnityAddMsgIfSpecified(msg);
    37c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    37c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    37c8:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <UnityAddMsgIfSpecified>
        UNITY_FAIL_AND_BAIL;
    37cc:	81 e0       	ldi	r24, 0x01	; 1
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	a0 e0       	ldi	r26, 0x00	; 0
    37d2:	b0 e0       	ldi	r27, 0x00	; 0
    37d4:	80 93 60 06 	sts	0x0660, r24
    37d8:	90 93 61 06 	sts	0x0661, r25
    37dc:	a0 93 62 06 	sts	0x0662, r26
    37e0:	b0 93 63 06 	sts	0x0663, r27
    37e4:	88 e6       	ldi	r24, 0x68	; 104
    37e6:	96 e0       	ldi	r25, 0x06	; 6
    37e8:	61 e0       	ldi	r22, 0x01	; 1
    37ea:	70 e0       	ldi	r23, 0x00	; 0
    37ec:	0e 94 48 29 	call	0x5290	; 0x5290 <longjmp>
    }
}
    37f0:	62 96       	adiw	r28, 0x12	; 18
    37f2:	0f b6       	in	r0, 0x3f	; 63
    37f4:	f8 94       	cli
    37f6:	de bf       	out	0x3e, r29	; 62
    37f8:	0f be       	out	0x3f, r0	; 63
    37fa:	cd bf       	out	0x3d, r28	; 61
    37fc:	cf 91       	pop	r28
    37fe:	df 91       	pop	r29
    3800:	1f 91       	pop	r17
    3802:	0f 91       	pop	r16
    3804:	ff 90       	pop	r15
    3806:	ef 90       	pop	r14
    3808:	df 90       	pop	r13
    380a:	cf 90       	pop	r12
    380c:	bf 90       	pop	r11
    380e:	af 90       	pop	r10
    3810:	9f 90       	pop	r9
    3812:	8f 90       	pop	r8
    3814:	08 95       	ret

00003816 <UnityAssertNumbersArrayWithin>:
                                   const UNITY_UINT32 num_elements,
                                   const char* msg,
                                   const UNITY_LINE_TYPE lineNumber,
                                   const UNITY_DISPLAY_STYLE_T style,
                                   const UNITY_FLAGS_T flags)
{
    3816:	8f 92       	push	r8
    3818:	9f 92       	push	r9
    381a:	af 92       	push	r10
    381c:	bf 92       	push	r11
    381e:	cf 92       	push	r12
    3820:	df 92       	push	r13
    3822:	ef 92       	push	r14
    3824:	ff 92       	push	r15
    3826:	0f 93       	push	r16
    3828:	1f 93       	push	r17
    382a:	df 93       	push	r29
    382c:	cf 93       	push	r28
    382e:	cd b7       	in	r28, 0x3d	; 61
    3830:	de b7       	in	r29, 0x3e	; 62
    3832:	a6 97       	sbiw	r28, 0x26	; 38
    3834:	0f b6       	in	r0, 0x3f	; 63
    3836:	f8 94       	cli
    3838:	de bf       	out	0x3e, r29	; 62
    383a:	0f be       	out	0x3f, r0	; 63
    383c:	cd bf       	out	0x3d, r28	; 61
    383e:	6d 8b       	std	Y+21, r22	; 0x15
    3840:	7e 8b       	std	Y+22, r23	; 0x16
    3842:	8f 8b       	std	Y+23, r24	; 0x17
    3844:	98 8f       	std	Y+24, r25	; 0x18
    3846:	5a 8f       	std	Y+26, r21	; 0x1a
    3848:	49 8f       	std	Y+25, r20	; 0x19
    384a:	3c 8f       	std	Y+28, r19	; 0x1c
    384c:	2b 8f       	std	Y+27, r18	; 0x1b
    384e:	ed 8e       	std	Y+29, r14	; 0x1d
    3850:	fe 8e       	std	Y+30, r15	; 0x1e
    3852:	0f 8f       	std	Y+31, r16	; 0x1f
    3854:	18 a3       	std	Y+32, r17	; 0x20
    3856:	da a2       	std	Y+34, r13	; 0x22
    3858:	c9 a2       	std	Y+33, r12	; 0x21
    385a:	8b a2       	std	Y+35, r8	; 0x23
    385c:	9c a2       	std	Y+36, r9	; 0x24
    385e:	ad a2       	std	Y+37, r10	; 0x25
    3860:	be a2       	std	Y+38, r11	; 0x26
    UNITY_UINT32 elements = num_elements;
    3862:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3864:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3866:	af 8d       	ldd	r26, Y+31	; 0x1f
    3868:	b8 a1       	ldd	r27, Y+32	; 0x20
    386a:	89 83       	std	Y+1, r24	; 0x01
    386c:	9a 83       	std	Y+2, r25	; 0x02
    386e:	ab 83       	std	Y+3, r26	; 0x03
    3870:	bc 83       	std	Y+4, r27	; 0x04
    unsigned int length   = style & 0xF;
    3872:	8d a9       	ldd	r24, Y+53	; 0x35
    3874:	88 2f       	mov	r24, r24
    3876:	90 e0       	ldi	r25, 0x00	; 0
    3878:	8f 70       	andi	r24, 0x0F	; 15
    387a:	90 70       	andi	r25, 0x00	; 0
    387c:	9e 83       	std	Y+6, r25	; 0x06
    387e:	8d 83       	std	Y+5, r24	; 0x05
    unsigned int increment = 0;
    3880:	18 86       	std	Y+8, r1	; 0x08
    3882:	1f 82       	std	Y+7, r1	; 0x07

    RETURN_IF_FAIL_OR_IGNORE;
    3884:	80 91 60 06 	lds	r24, 0x0660
    3888:	90 91 61 06 	lds	r25, 0x0661
    388c:	a0 91 62 06 	lds	r26, 0x0662
    3890:	b0 91 63 06 	lds	r27, 0x0663
    3894:	00 97       	sbiw	r24, 0x00	; 0
    3896:	a1 05       	cpc	r26, r1
    3898:	b1 05       	cpc	r27, r1
    389a:	09 f0       	breq	.+2      	; 0x389e <UnityAssertNumbersArrayWithin+0x88>
    389c:	77 c2       	rjmp	.+1262   	; 0x3d8c <UnityAssertNumbersArrayWithin+0x576>
    389e:	80 91 64 06 	lds	r24, 0x0664
    38a2:	90 91 65 06 	lds	r25, 0x0665
    38a6:	a0 91 66 06 	lds	r26, 0x0666
    38aa:	b0 91 67 06 	lds	r27, 0x0667
    38ae:	00 97       	sbiw	r24, 0x00	; 0
    38b0:	a1 05       	cpc	r26, r1
    38b2:	b1 05       	cpc	r27, r1
    38b4:	09 f0       	breq	.+2      	; 0x38b8 <UnityAssertNumbersArrayWithin+0xa2>
    38b6:	6a c2       	rjmp	.+1236   	; 0x3d8c <UnityAssertNumbersArrayWithin+0x576>

    if (num_elements == 0)
    38b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    38bc:	af 8d       	ldd	r26, Y+31	; 0x1f
    38be:	b8 a1       	ldd	r27, Y+32	; 0x20
    38c0:	00 97       	sbiw	r24, 0x00	; 0
    38c2:	a1 05       	cpc	r26, r1
    38c4:	b1 05       	cpc	r27, r1
    38c6:	11 f5       	brne	.+68     	; 0x390c <UnityAssertNumbersArrayWithin+0xf6>
    {
        UnityPrintPointlessAndBail();
    38c8:	8b a1       	ldd	r24, Y+35	; 0x23
    38ca:	9c a1       	ldd	r25, Y+36	; 0x24
    38cc:	ad a1       	ldd	r26, Y+37	; 0x25
    38ce:	be a1       	ldd	r27, Y+38	; 0x26
    38d0:	bc 01       	movw	r22, r24
    38d2:	cd 01       	movw	r24, r26
    38d4:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <UnityTestResultsFailBegin>
    38d8:	89 ea       	ldi	r24, 0xA9	; 169
    38da:	93 e0       	ldi	r25, 0x03	; 3
    38dc:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
    38e0:	89 a1       	ldd	r24, Y+33	; 0x21
    38e2:	9a a1       	ldd	r25, Y+34	; 0x22
    38e4:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <UnityAddMsgIfSpecified>
    38e8:	81 e0       	ldi	r24, 0x01	; 1
    38ea:	90 e0       	ldi	r25, 0x00	; 0
    38ec:	a0 e0       	ldi	r26, 0x00	; 0
    38ee:	b0 e0       	ldi	r27, 0x00	; 0
    38f0:	80 93 60 06 	sts	0x0660, r24
    38f4:	90 93 61 06 	sts	0x0661, r25
    38f8:	a0 93 62 06 	sts	0x0662, r26
    38fc:	b0 93 63 06 	sts	0x0663, r27
    3900:	88 e6       	ldi	r24, 0x68	; 104
    3902:	96 e0       	ldi	r25, 0x06	; 6
    3904:	61 e0       	ldi	r22, 0x01	; 1
    3906:	70 e0       	ldi	r23, 0x00	; 0
    3908:	0e 94 48 29 	call	0x5290	; 0x5290 <longjmp>
    }

    if (expected == actual)
    390c:	29 8d       	ldd	r18, Y+25	; 0x19
    390e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3910:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3912:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3914:	28 17       	cp	r18, r24
    3916:	39 07       	cpc	r19, r25
    3918:	09 f4       	brne	.+2      	; 0x391c <UnityAssertNumbersArrayWithin+0x106>
    391a:	37 c2       	rjmp	.+1134   	; 0x3d8a <UnityAssertNumbersArrayWithin+0x574>
    {
        return; /* Both are NULL or same pointer */
    }

    if (UnityIsOneArrayNull(expected, actual, lineNumber, msg))
    391c:	89 8d       	ldd	r24, Y+25	; 0x19
    391e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3920:	6b 8d       	ldd	r22, Y+27	; 0x1b
    3922:	7c 8d       	ldd	r23, Y+28	; 0x1c
    3924:	2b a1       	ldd	r18, Y+35	; 0x23
    3926:	3c a1       	ldd	r19, Y+36	; 0x24
    3928:	4d a1       	ldd	r20, Y+37	; 0x25
    392a:	5e a1       	ldd	r21, Y+38	; 0x26
    392c:	e9 a1       	ldd	r30, Y+33	; 0x21
    392e:	fa a1       	ldd	r31, Y+34	; 0x22
    3930:	8f 01       	movw	r16, r30
    3932:	0e 94 7d 10 	call	0x20fa	; 0x20fa <UnityIsOneArrayNull>
    3936:	00 97       	sbiw	r24, 0x00	; 0
    3938:	09 f4       	brne	.+2      	; 0x393c <UnityAssertNumbersArrayWithin+0x126>
    393a:	06 c2       	rjmp	.+1036   	; 0x3d48 <UnityAssertNumbersArrayWithin+0x532>
    {
        UNITY_FAIL_AND_BAIL;
    393c:	81 e0       	ldi	r24, 0x01	; 1
    393e:	90 e0       	ldi	r25, 0x00	; 0
    3940:	a0 e0       	ldi	r26, 0x00	; 0
    3942:	b0 e0       	ldi	r27, 0x00	; 0
    3944:	80 93 60 06 	sts	0x0660, r24
    3948:	90 93 61 06 	sts	0x0661, r25
    394c:	a0 93 62 06 	sts	0x0662, r26
    3950:	b0 93 63 06 	sts	0x0663, r27
    3954:	88 e6       	ldi	r24, 0x68	; 104
    3956:	96 e0       	ldi	r25, 0x06	; 6
    3958:	61 e0       	ldi	r22, 0x01	; 1
    395a:	70 e0       	ldi	r23, 0x00	; 0
    395c:	0e 94 48 29 	call	0x5290	; 0x5290 <longjmp>
    while ((elements > 0) && (elements--))
    {
        UNITY_INT expect_val;
        UNITY_INT actual_val;

        switch (length)
    3960:	8d 81       	ldd	r24, Y+5	; 0x05
    3962:	9e 81       	ldd	r25, Y+6	; 0x06
    3964:	81 30       	cpi	r24, 0x01	; 1
    3966:	91 05       	cpc	r25, r1
    3968:	21 f0       	breq	.+8      	; 0x3972 <UnityAssertNumbersArrayWithin+0x15c>
    396a:	82 30       	cpi	r24, 0x02	; 2
    396c:	91 05       	cpc	r25, r1
    396e:	01 f1       	breq	.+64     	; 0x39b0 <UnityAssertNumbersArrayWithin+0x19a>
    3970:	3e c0       	rjmp	.+124    	; 0x39ee <UnityAssertNumbersArrayWithin+0x1d8>
        {
            case 1:
                expect_val = *(UNITY_PTR_ATTRIBUTE const UNITY_INT8*)expected;
    3972:	89 8d       	ldd	r24, Y+25	; 0x19
    3974:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3976:	fc 01       	movw	r30, r24
    3978:	80 81       	ld	r24, Z
    397a:	99 27       	eor	r25, r25
    397c:	87 fd       	sbrc	r24, 7
    397e:	90 95       	com	r25
    3980:	a9 2f       	mov	r26, r25
    3982:	b9 2f       	mov	r27, r25
    3984:	89 87       	std	Y+9, r24	; 0x09
    3986:	9a 87       	std	Y+10, r25	; 0x0a
    3988:	ab 87       	std	Y+11, r26	; 0x0b
    398a:	bc 87       	std	Y+12, r27	; 0x0c
                actual_val = *(UNITY_PTR_ATTRIBUTE const UNITY_INT8*)actual;
    398c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    398e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3990:	fc 01       	movw	r30, r24
    3992:	80 81       	ld	r24, Z
    3994:	99 27       	eor	r25, r25
    3996:	87 fd       	sbrc	r24, 7
    3998:	90 95       	com	r25
    399a:	a9 2f       	mov	r26, r25
    399c:	b9 2f       	mov	r27, r25
    399e:	8d 87       	std	Y+13, r24	; 0x0d
    39a0:	9e 87       	std	Y+14, r25	; 0x0e
    39a2:	af 87       	std	Y+15, r26	; 0x0f
    39a4:	b8 8b       	std	Y+16, r27	; 0x10
                increment  = sizeof(UNITY_INT8);
    39a6:	81 e0       	ldi	r24, 0x01	; 1
    39a8:	90 e0       	ldi	r25, 0x00	; 0
    39aa:	98 87       	std	Y+8, r25	; 0x08
    39ac:	8f 83       	std	Y+7, r24	; 0x07
                break;
    39ae:	3e c0       	rjmp	.+124    	; 0x3a2c <UnityAssertNumbersArrayWithin+0x216>

            case 2:
                expect_val = *(UNITY_PTR_ATTRIBUTE const UNITY_INT16*)expected;
    39b0:	89 8d       	ldd	r24, Y+25	; 0x19
    39b2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    39b4:	fc 01       	movw	r30, r24
    39b6:	80 81       	ld	r24, Z
    39b8:	91 81       	ldd	r25, Z+1	; 0x01
    39ba:	aa 27       	eor	r26, r26
    39bc:	97 fd       	sbrc	r25, 7
    39be:	a0 95       	com	r26
    39c0:	ba 2f       	mov	r27, r26
    39c2:	89 87       	std	Y+9, r24	; 0x09
    39c4:	9a 87       	std	Y+10, r25	; 0x0a
    39c6:	ab 87       	std	Y+11, r26	; 0x0b
    39c8:	bc 87       	std	Y+12, r27	; 0x0c
                actual_val = *(UNITY_PTR_ATTRIBUTE const UNITY_INT16*)actual;
    39ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39ce:	fc 01       	movw	r30, r24
    39d0:	80 81       	ld	r24, Z
    39d2:	91 81       	ldd	r25, Z+1	; 0x01
    39d4:	aa 27       	eor	r26, r26
    39d6:	97 fd       	sbrc	r25, 7
    39d8:	a0 95       	com	r26
    39da:	ba 2f       	mov	r27, r26
    39dc:	8d 87       	std	Y+13, r24	; 0x0d
    39de:	9e 87       	std	Y+14, r25	; 0x0e
    39e0:	af 87       	std	Y+15, r26	; 0x0f
    39e2:	b8 8b       	std	Y+16, r27	; 0x10
                increment  = sizeof(UNITY_INT16);
    39e4:	82 e0       	ldi	r24, 0x02	; 2
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	98 87       	std	Y+8, r25	; 0x08
    39ea:	8f 83       	std	Y+7, r24	; 0x07
                break;
    39ec:	1f c0       	rjmp	.+62     	; 0x3a2c <UnityAssertNumbersArrayWithin+0x216>
                break;
#endif

            default: /* default is length 4 bytes */
            case 4:
                expect_val = *(UNITY_PTR_ATTRIBUTE const UNITY_INT32*)expected;
    39ee:	89 8d       	ldd	r24, Y+25	; 0x19
    39f0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    39f2:	fc 01       	movw	r30, r24
    39f4:	80 81       	ld	r24, Z
    39f6:	91 81       	ldd	r25, Z+1	; 0x01
    39f8:	a2 81       	ldd	r26, Z+2	; 0x02
    39fa:	b3 81       	ldd	r27, Z+3	; 0x03
    39fc:	89 87       	std	Y+9, r24	; 0x09
    39fe:	9a 87       	std	Y+10, r25	; 0x0a
    3a00:	ab 87       	std	Y+11, r26	; 0x0b
    3a02:	bc 87       	std	Y+12, r27	; 0x0c
                actual_val = *(UNITY_PTR_ATTRIBUTE const UNITY_INT32*)actual;
    3a04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a08:	fc 01       	movw	r30, r24
    3a0a:	80 81       	ld	r24, Z
    3a0c:	91 81       	ldd	r25, Z+1	; 0x01
    3a0e:	a2 81       	ldd	r26, Z+2	; 0x02
    3a10:	b3 81       	ldd	r27, Z+3	; 0x03
    3a12:	8d 87       	std	Y+13, r24	; 0x0d
    3a14:	9e 87       	std	Y+14, r25	; 0x0e
    3a16:	af 87       	std	Y+15, r26	; 0x0f
    3a18:	b8 8b       	std	Y+16, r27	; 0x10
                increment  = sizeof(UNITY_INT32);
    3a1a:	84 e0       	ldi	r24, 0x04	; 4
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    3a1e:	98 87       	std	Y+8, r25	; 0x08
    3a20:	8f 83       	std	Y+7, r24	; 0x07
                length = 4;
    3a22:	84 e0       	ldi	r24, 0x04	; 4
    3a24:	90 e0       	ldi	r25, 0x00	; 0
    3a26:	9e 83       	std	Y+6, r25	; 0x06
    3a28:	8d 83       	std	Y+5, r24	; 0x05
                break;
    3a2a:	00 00       	nop
        }

        if ((style & UNITY_DISPLAY_RANGE_INT) == UNITY_DISPLAY_RANGE_INT)
    3a2c:	8d a9       	ldd	r24, Y+53	; 0x35
    3a2e:	88 2f       	mov	r24, r24
    3a30:	90 e0       	ldi	r25, 0x00	; 0
    3a32:	80 71       	andi	r24, 0x10	; 16
    3a34:	90 70       	andi	r25, 0x00	; 0
    3a36:	00 97       	sbiw	r24, 0x00	; 0
    3a38:	09 f4       	brne	.+2      	; 0x3a3c <UnityAssertNumbersArrayWithin+0x226>
    3a3a:	5b c0       	rjmp	.+182    	; 0x3af2 <UnityAssertNumbersArrayWithin+0x2dc>
        {
            if (actual_val > expect_val)
    3a3c:	2d 85       	ldd	r18, Y+13	; 0x0d
    3a3e:	3e 85       	ldd	r19, Y+14	; 0x0e
    3a40:	4f 85       	ldd	r20, Y+15	; 0x0f
    3a42:	58 89       	ldd	r21, Y+16	; 0x10
    3a44:	89 85       	ldd	r24, Y+9	; 0x09
    3a46:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a48:	ab 85       	ldd	r26, Y+11	; 0x0b
    3a4a:	bc 85       	ldd	r27, Y+12	; 0x0c
    3a4c:	82 17       	cp	r24, r18
    3a4e:	93 07       	cpc	r25, r19
    3a50:	a4 07       	cpc	r26, r20
    3a52:	b5 07       	cpc	r27, r21
    3a54:	3c f5       	brge	.+78     	; 0x3aa4 <UnityAssertNumbersArrayWithin+0x28e>
            {
                Unity.CurrentTestFailed = (((UNITY_UINT)actual_val - (UNITY_UINT)expect_val) > delta);
    3a56:	2d 85       	ldd	r18, Y+13	; 0x0d
    3a58:	3e 85       	ldd	r19, Y+14	; 0x0e
    3a5a:	4f 85       	ldd	r20, Y+15	; 0x0f
    3a5c:	58 89       	ldd	r21, Y+16	; 0x10
    3a5e:	89 85       	ldd	r24, Y+9	; 0x09
    3a60:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a62:	ab 85       	ldd	r26, Y+11	; 0x0b
    3a64:	bc 85       	ldd	r27, Y+12	; 0x0c
    3a66:	79 01       	movw	r14, r18
    3a68:	8a 01       	movw	r16, r20
    3a6a:	e8 1a       	sub	r14, r24
    3a6c:	f9 0a       	sbc	r15, r25
    3a6e:	0a 0b       	sbc	r16, r26
    3a70:	1b 0b       	sbc	r17, r27
    3a72:	81 e0       	ldi	r24, 0x01	; 1
    3a74:	90 e0       	ldi	r25, 0x00	; 0
    3a76:	a0 e0       	ldi	r26, 0x00	; 0
    3a78:	b0 e0       	ldi	r27, 0x00	; 0
    3a7a:	2d 89       	ldd	r18, Y+21	; 0x15
    3a7c:	3e 89       	ldd	r19, Y+22	; 0x16
    3a7e:	4f 89       	ldd	r20, Y+23	; 0x17
    3a80:	58 8d       	ldd	r21, Y+24	; 0x18
    3a82:	2e 15       	cp	r18, r14
    3a84:	3f 05       	cpc	r19, r15
    3a86:	40 07       	cpc	r20, r16
    3a88:	51 07       	cpc	r21, r17
    3a8a:	18 f0       	brcs	.+6      	; 0x3a92 <UnityAssertNumbersArrayWithin+0x27c>
    3a8c:	80 e0       	ldi	r24, 0x00	; 0
    3a8e:	90 e0       	ldi	r25, 0x00	; 0
    3a90:	dc 01       	movw	r26, r24
    3a92:	80 93 60 06 	sts	0x0660, r24
    3a96:	90 93 61 06 	sts	0x0661, r25
    3a9a:	a0 93 62 06 	sts	0x0662, r26
    3a9e:	b0 93 63 06 	sts	0x0663, r27
    3aa2:	81 c0       	rjmp	.+258    	; 0x3ba6 <UnityAssertNumbersArrayWithin+0x390>
            }
            else
            {
                Unity.CurrentTestFailed = (((UNITY_UINT)expect_val - (UNITY_UINT)actual_val) > delta);
    3aa4:	29 85       	ldd	r18, Y+9	; 0x09
    3aa6:	3a 85       	ldd	r19, Y+10	; 0x0a
    3aa8:	4b 85       	ldd	r20, Y+11	; 0x0b
    3aaa:	5c 85       	ldd	r21, Y+12	; 0x0c
    3aac:	8d 85       	ldd	r24, Y+13	; 0x0d
    3aae:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ab0:	af 85       	ldd	r26, Y+15	; 0x0f
    3ab2:	b8 89       	ldd	r27, Y+16	; 0x10
    3ab4:	79 01       	movw	r14, r18
    3ab6:	8a 01       	movw	r16, r20
    3ab8:	e8 1a       	sub	r14, r24
    3aba:	f9 0a       	sbc	r15, r25
    3abc:	0a 0b       	sbc	r16, r26
    3abe:	1b 0b       	sbc	r17, r27
    3ac0:	81 e0       	ldi	r24, 0x01	; 1
    3ac2:	90 e0       	ldi	r25, 0x00	; 0
    3ac4:	a0 e0       	ldi	r26, 0x00	; 0
    3ac6:	b0 e0       	ldi	r27, 0x00	; 0
    3ac8:	2d 89       	ldd	r18, Y+21	; 0x15
    3aca:	3e 89       	ldd	r19, Y+22	; 0x16
    3acc:	4f 89       	ldd	r20, Y+23	; 0x17
    3ace:	58 8d       	ldd	r21, Y+24	; 0x18
    3ad0:	2e 15       	cp	r18, r14
    3ad2:	3f 05       	cpc	r19, r15
    3ad4:	40 07       	cpc	r20, r16
    3ad6:	51 07       	cpc	r21, r17
    3ad8:	18 f0       	brcs	.+6      	; 0x3ae0 <UnityAssertNumbersArrayWithin+0x2ca>
    3ada:	80 e0       	ldi	r24, 0x00	; 0
    3adc:	90 e0       	ldi	r25, 0x00	; 0
    3ade:	dc 01       	movw	r26, r24
    3ae0:	80 93 60 06 	sts	0x0660, r24
    3ae4:	90 93 61 06 	sts	0x0661, r25
    3ae8:	a0 93 62 06 	sts	0x0662, r26
    3aec:	b0 93 63 06 	sts	0x0663, r27
    3af0:	5a c0       	rjmp	.+180    	; 0x3ba6 <UnityAssertNumbersArrayWithin+0x390>
            }
        }
        else
        {
            if ((UNITY_UINT)actual_val > (UNITY_UINT)expect_val)
    3af2:	2d 85       	ldd	r18, Y+13	; 0x0d
    3af4:	3e 85       	ldd	r19, Y+14	; 0x0e
    3af6:	4f 85       	ldd	r20, Y+15	; 0x0f
    3af8:	58 89       	ldd	r21, Y+16	; 0x10
    3afa:	89 85       	ldd	r24, Y+9	; 0x09
    3afc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3afe:	ab 85       	ldd	r26, Y+11	; 0x0b
    3b00:	bc 85       	ldd	r27, Y+12	; 0x0c
    3b02:	82 17       	cp	r24, r18
    3b04:	93 07       	cpc	r25, r19
    3b06:	a4 07       	cpc	r26, r20
    3b08:	b5 07       	cpc	r27, r21
    3b0a:	38 f5       	brcc	.+78     	; 0x3b5a <UnityAssertNumbersArrayWithin+0x344>
            {
                Unity.CurrentTestFailed = (((UNITY_UINT)actual_val - (UNITY_UINT)expect_val) > delta);
    3b0c:	2d 85       	ldd	r18, Y+13	; 0x0d
    3b0e:	3e 85       	ldd	r19, Y+14	; 0x0e
    3b10:	4f 85       	ldd	r20, Y+15	; 0x0f
    3b12:	58 89       	ldd	r21, Y+16	; 0x10
    3b14:	89 85       	ldd	r24, Y+9	; 0x09
    3b16:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b18:	ab 85       	ldd	r26, Y+11	; 0x0b
    3b1a:	bc 85       	ldd	r27, Y+12	; 0x0c
    3b1c:	79 01       	movw	r14, r18
    3b1e:	8a 01       	movw	r16, r20
    3b20:	e8 1a       	sub	r14, r24
    3b22:	f9 0a       	sbc	r15, r25
    3b24:	0a 0b       	sbc	r16, r26
    3b26:	1b 0b       	sbc	r17, r27
    3b28:	81 e0       	ldi	r24, 0x01	; 1
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	a0 e0       	ldi	r26, 0x00	; 0
    3b2e:	b0 e0       	ldi	r27, 0x00	; 0
    3b30:	2d 89       	ldd	r18, Y+21	; 0x15
    3b32:	3e 89       	ldd	r19, Y+22	; 0x16
    3b34:	4f 89       	ldd	r20, Y+23	; 0x17
    3b36:	58 8d       	ldd	r21, Y+24	; 0x18
    3b38:	2e 15       	cp	r18, r14
    3b3a:	3f 05       	cpc	r19, r15
    3b3c:	40 07       	cpc	r20, r16
    3b3e:	51 07       	cpc	r21, r17
    3b40:	18 f0       	brcs	.+6      	; 0x3b48 <UnityAssertNumbersArrayWithin+0x332>
    3b42:	80 e0       	ldi	r24, 0x00	; 0
    3b44:	90 e0       	ldi	r25, 0x00	; 0
    3b46:	dc 01       	movw	r26, r24
    3b48:	80 93 60 06 	sts	0x0660, r24
    3b4c:	90 93 61 06 	sts	0x0661, r25
    3b50:	a0 93 62 06 	sts	0x0662, r26
    3b54:	b0 93 63 06 	sts	0x0663, r27
    3b58:	26 c0       	rjmp	.+76     	; 0x3ba6 <UnityAssertNumbersArrayWithin+0x390>
            }
            else
            {
                Unity.CurrentTestFailed = (((UNITY_UINT)expect_val - (UNITY_UINT)actual_val) > delta);
    3b5a:	29 85       	ldd	r18, Y+9	; 0x09
    3b5c:	3a 85       	ldd	r19, Y+10	; 0x0a
    3b5e:	4b 85       	ldd	r20, Y+11	; 0x0b
    3b60:	5c 85       	ldd	r21, Y+12	; 0x0c
    3b62:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b64:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b66:	af 85       	ldd	r26, Y+15	; 0x0f
    3b68:	b8 89       	ldd	r27, Y+16	; 0x10
    3b6a:	79 01       	movw	r14, r18
    3b6c:	8a 01       	movw	r16, r20
    3b6e:	e8 1a       	sub	r14, r24
    3b70:	f9 0a       	sbc	r15, r25
    3b72:	0a 0b       	sbc	r16, r26
    3b74:	1b 0b       	sbc	r17, r27
    3b76:	81 e0       	ldi	r24, 0x01	; 1
    3b78:	90 e0       	ldi	r25, 0x00	; 0
    3b7a:	a0 e0       	ldi	r26, 0x00	; 0
    3b7c:	b0 e0       	ldi	r27, 0x00	; 0
    3b7e:	2d 89       	ldd	r18, Y+21	; 0x15
    3b80:	3e 89       	ldd	r19, Y+22	; 0x16
    3b82:	4f 89       	ldd	r20, Y+23	; 0x17
    3b84:	58 8d       	ldd	r21, Y+24	; 0x18
    3b86:	2e 15       	cp	r18, r14
    3b88:	3f 05       	cpc	r19, r15
    3b8a:	40 07       	cpc	r20, r16
    3b8c:	51 07       	cpc	r21, r17
    3b8e:	18 f0       	brcs	.+6      	; 0x3b96 <UnityAssertNumbersArrayWithin+0x380>
    3b90:	80 e0       	ldi	r24, 0x00	; 0
    3b92:	90 e0       	ldi	r25, 0x00	; 0
    3b94:	dc 01       	movw	r26, r24
    3b96:	80 93 60 06 	sts	0x0660, r24
    3b9a:	90 93 61 06 	sts	0x0661, r25
    3b9e:	a0 93 62 06 	sts	0x0662, r26
    3ba2:	b0 93 63 06 	sts	0x0663, r27
            }
        }

        if (Unity.CurrentTestFailed)
    3ba6:	80 91 60 06 	lds	r24, 0x0660
    3baa:	90 91 61 06 	lds	r25, 0x0661
    3bae:	a0 91 62 06 	lds	r26, 0x0662
    3bb2:	b0 91 63 06 	lds	r27, 0x0663
    3bb6:	00 97       	sbiw	r24, 0x00	; 0
    3bb8:	a1 05       	cpc	r26, r1
    3bba:	b1 05       	cpc	r27, r1
    3bbc:	09 f4       	brne	.+2      	; 0x3bc0 <UnityAssertNumbersArrayWithin+0x3aa>
    3bbe:	b1 c0       	rjmp	.+354    	; 0x3d22 <UnityAssertNumbersArrayWithin+0x50c>
        {
            if ((style & UNITY_DISPLAY_RANGE_UINT) && (length < (UNITY_INT_WIDTH / 8)))
    3bc0:	8d a9       	ldd	r24, Y+53	; 0x35
    3bc2:	88 2f       	mov	r24, r24
    3bc4:	90 e0       	ldi	r25, 0x00	; 0
    3bc6:	80 72       	andi	r24, 0x20	; 32
    3bc8:	90 70       	andi	r25, 0x00	; 0
    3bca:	00 97       	sbiw	r24, 0x00	; 0
    3bcc:	09 f4       	brne	.+2      	; 0x3bd0 <UnityAssertNumbersArrayWithin+0x3ba>
    3bce:	49 c0       	rjmp	.+146    	; 0x3c62 <UnityAssertNumbersArrayWithin+0x44c>
    3bd0:	8d 81       	ldd	r24, Y+5	; 0x05
    3bd2:	9e 81       	ldd	r25, Y+6	; 0x06
    3bd4:	82 30       	cpi	r24, 0x02	; 2
    3bd6:	91 05       	cpc	r25, r1
    3bd8:	08 f0       	brcs	.+2      	; 0x3bdc <UnityAssertNumbersArrayWithin+0x3c6>
    3bda:	43 c0       	rjmp	.+134    	; 0x3c62 <UnityAssertNumbersArrayWithin+0x44c>
            {   /* For UINT, remove sign extension (padding 1's) from signed type casts above */
                UNITY_INT mask = 1;
    3bdc:	81 e0       	ldi	r24, 0x01	; 1
    3bde:	90 e0       	ldi	r25, 0x00	; 0
    3be0:	a0 e0       	ldi	r26, 0x00	; 0
    3be2:	b0 e0       	ldi	r27, 0x00	; 0
    3be4:	89 8b       	std	Y+17, r24	; 0x11
    3be6:	9a 8b       	std	Y+18, r25	; 0x12
    3be8:	ab 8b       	std	Y+19, r26	; 0x13
    3bea:	bc 8b       	std	Y+20, r27	; 0x14
                mask = (mask << 8 * length) - 1;
    3bec:	8d 81       	ldd	r24, Y+5	; 0x05
    3bee:	9e 81       	ldd	r25, Y+6	; 0x06
    3bf0:	88 0f       	add	r24, r24
    3bf2:	99 1f       	adc	r25, r25
    3bf4:	88 0f       	add	r24, r24
    3bf6:	99 1f       	adc	r25, r25
    3bf8:	88 0f       	add	r24, r24
    3bfa:	99 1f       	adc	r25, r25
    3bfc:	9c 01       	movw	r18, r24
    3bfe:	89 89       	ldd	r24, Y+17	; 0x11
    3c00:	9a 89       	ldd	r25, Y+18	; 0x12
    3c02:	ab 89       	ldd	r26, Y+19	; 0x13
    3c04:	bc 89       	ldd	r27, Y+20	; 0x14
    3c06:	04 c0       	rjmp	.+8      	; 0x3c10 <UnityAssertNumbersArrayWithin+0x3fa>
    3c08:	88 0f       	add	r24, r24
    3c0a:	99 1f       	adc	r25, r25
    3c0c:	aa 1f       	adc	r26, r26
    3c0e:	bb 1f       	adc	r27, r27
    3c10:	2a 95       	dec	r18
    3c12:	d2 f7       	brpl	.-12     	; 0x3c08 <UnityAssertNumbersArrayWithin+0x3f2>
    3c14:	01 97       	sbiw	r24, 0x01	; 1
    3c16:	a1 09       	sbc	r26, r1
    3c18:	b1 09       	sbc	r27, r1
    3c1a:	89 8b       	std	Y+17, r24	; 0x11
    3c1c:	9a 8b       	std	Y+18, r25	; 0x12
    3c1e:	ab 8b       	std	Y+19, r26	; 0x13
    3c20:	bc 8b       	std	Y+20, r27	; 0x14
                expect_val &= mask;
    3c22:	29 85       	ldd	r18, Y+9	; 0x09
    3c24:	3a 85       	ldd	r19, Y+10	; 0x0a
    3c26:	4b 85       	ldd	r20, Y+11	; 0x0b
    3c28:	5c 85       	ldd	r21, Y+12	; 0x0c
    3c2a:	89 89       	ldd	r24, Y+17	; 0x11
    3c2c:	9a 89       	ldd	r25, Y+18	; 0x12
    3c2e:	ab 89       	ldd	r26, Y+19	; 0x13
    3c30:	bc 89       	ldd	r27, Y+20	; 0x14
    3c32:	82 23       	and	r24, r18
    3c34:	93 23       	and	r25, r19
    3c36:	a4 23       	and	r26, r20
    3c38:	b5 23       	and	r27, r21
    3c3a:	89 87       	std	Y+9, r24	; 0x09
    3c3c:	9a 87       	std	Y+10, r25	; 0x0a
    3c3e:	ab 87       	std	Y+11, r26	; 0x0b
    3c40:	bc 87       	std	Y+12, r27	; 0x0c
                actual_val &= mask;
    3c42:	2d 85       	ldd	r18, Y+13	; 0x0d
    3c44:	3e 85       	ldd	r19, Y+14	; 0x0e
    3c46:	4f 85       	ldd	r20, Y+15	; 0x0f
    3c48:	58 89       	ldd	r21, Y+16	; 0x10
    3c4a:	89 89       	ldd	r24, Y+17	; 0x11
    3c4c:	9a 89       	ldd	r25, Y+18	; 0x12
    3c4e:	ab 89       	ldd	r26, Y+19	; 0x13
    3c50:	bc 89       	ldd	r27, Y+20	; 0x14
    3c52:	82 23       	and	r24, r18
    3c54:	93 23       	and	r25, r19
    3c56:	a4 23       	and	r26, r20
    3c58:	b5 23       	and	r27, r21
    3c5a:	8d 87       	std	Y+13, r24	; 0x0d
    3c5c:	9e 87       	std	Y+14, r25	; 0x0e
    3c5e:	af 87       	std	Y+15, r26	; 0x0f
    3c60:	b8 8b       	std	Y+16, r27	; 0x10
            }
            UnityTestResultsFailBegin(lineNumber);
    3c62:	8b a1       	ldd	r24, Y+35	; 0x23
    3c64:	9c a1       	ldd	r25, Y+36	; 0x24
    3c66:	ad a1       	ldd	r26, Y+37	; 0x25
    3c68:	be a1       	ldd	r27, Y+38	; 0x26
    3c6a:	bc 01       	movw	r22, r24
    3c6c:	cd 01       	movw	r24, r26
    3c6e:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <UnityTestResultsFailBegin>
            UnityPrint(UnityStrDelta);
    3c72:	8f e8       	ldi	r24, 0x8F	; 143
    3c74:	93 e0       	ldi	r25, 0x03	; 3
    3c76:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
            UnityPrintNumberByStyle((UNITY_INT)delta, style);
    3c7a:	8d 89       	ldd	r24, Y+21	; 0x15
    3c7c:	9e 89       	ldd	r25, Y+22	; 0x16
    3c7e:	af 89       	ldd	r26, Y+23	; 0x17
    3c80:	b8 8d       	ldd	r27, Y+24	; 0x18
    3c82:	bc 01       	movw	r22, r24
    3c84:	cd 01       	movw	r24, r26
    3c86:	4d a9       	ldd	r20, Y+53	; 0x35
    3c88:	0e 94 54 08 	call	0x10a8	; 0x10a8 <UnityPrintNumberByStyle>
            UnityPrint(UnityStrElement);
    3c8c:	8c e6       	ldi	r24, 0x6C	; 108
    3c8e:	93 e0       	ldi	r25, 0x03	; 3
    3c90:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
            UnityPrintNumberUnsigned(num_elements - elements - 1);
    3c94:	2d 8d       	ldd	r18, Y+29	; 0x1d
    3c96:	3e 8d       	ldd	r19, Y+30	; 0x1e
    3c98:	4f 8d       	ldd	r20, Y+31	; 0x1f
    3c9a:	58 a1       	ldd	r21, Y+32	; 0x20
    3c9c:	89 81       	ldd	r24, Y+1	; 0x01
    3c9e:	9a 81       	ldd	r25, Y+2	; 0x02
    3ca0:	ab 81       	ldd	r26, Y+3	; 0x03
    3ca2:	bc 81       	ldd	r27, Y+4	; 0x04
    3ca4:	79 01       	movw	r14, r18
    3ca6:	8a 01       	movw	r16, r20
    3ca8:	e8 1a       	sub	r14, r24
    3caa:	f9 0a       	sbc	r15, r25
    3cac:	0a 0b       	sbc	r16, r26
    3cae:	1b 0b       	sbc	r17, r27
    3cb0:	d8 01       	movw	r26, r16
    3cb2:	c7 01       	movw	r24, r14
    3cb4:	01 97       	sbiw	r24, 0x01	; 1
    3cb6:	a1 09       	sbc	r26, r1
    3cb8:	b1 09       	sbc	r27, r1
    3cba:	bc 01       	movw	r22, r24
    3cbc:	cd 01       	movw	r24, r26
    3cbe:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <UnityPrintNumberUnsigned>
            UnityPrint(UnityStrExpected);
    3cc2:	87 e2       	ldi	r24, 0x27	; 39
    3cc4:	93 e0       	ldi	r25, 0x03	; 3
    3cc6:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
            UnityPrintNumberByStyle(expect_val, style);
    3cca:	89 85       	ldd	r24, Y+9	; 0x09
    3ccc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cce:	ab 85       	ldd	r26, Y+11	; 0x0b
    3cd0:	bc 85       	ldd	r27, Y+12	; 0x0c
    3cd2:	bc 01       	movw	r22, r24
    3cd4:	cd 01       	movw	r24, r26
    3cd6:	4d a9       	ldd	r20, Y+53	; 0x35
    3cd8:	0e 94 54 08 	call	0x10a8	; 0x10a8 <UnityPrintNumberByStyle>
            UnityPrint(UnityStrWas);
    3cdc:	82 e3       	ldi	r24, 0x32	; 50
    3cde:	93 e0       	ldi	r25, 0x03	; 3
    3ce0:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
            UnityPrintNumberByStyle(actual_val, style);
    3ce4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ce6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ce8:	af 85       	ldd	r26, Y+15	; 0x0f
    3cea:	b8 89       	ldd	r27, Y+16	; 0x10
    3cec:	bc 01       	movw	r22, r24
    3cee:	cd 01       	movw	r24, r26
    3cf0:	4d a9       	ldd	r20, Y+53	; 0x35
    3cf2:	0e 94 54 08 	call	0x10a8	; 0x10a8 <UnityPrintNumberByStyle>
            UnityAddMsgIfSpecified(msg);
    3cf6:	89 a1       	ldd	r24, Y+33	; 0x21
    3cf8:	9a a1       	ldd	r25, Y+34	; 0x22
    3cfa:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <UnityAddMsgIfSpecified>
            UNITY_FAIL_AND_BAIL;
    3cfe:	81 e0       	ldi	r24, 0x01	; 1
    3d00:	90 e0       	ldi	r25, 0x00	; 0
    3d02:	a0 e0       	ldi	r26, 0x00	; 0
    3d04:	b0 e0       	ldi	r27, 0x00	; 0
    3d06:	80 93 60 06 	sts	0x0660, r24
    3d0a:	90 93 61 06 	sts	0x0661, r25
    3d0e:	a0 93 62 06 	sts	0x0662, r26
    3d12:	b0 93 63 06 	sts	0x0663, r27
    3d16:	88 e6       	ldi	r24, 0x68	; 104
    3d18:	96 e0       	ldi	r25, 0x06	; 6
    3d1a:	61 e0       	ldi	r22, 0x01	; 1
    3d1c:	70 e0       	ldi	r23, 0x00	; 0
    3d1e:	0e 94 48 29 	call	0x5290	; 0x5290 <longjmp>
        }
        /* Walk through array by incrementing the pointers */
        if (flags == UNITY_ARRAY_TO_ARRAY)
    3d22:	8e a9       	ldd	r24, Y+54	; 0x36
    3d24:	81 30       	cpi	r24, 0x01	; 1
    3d26:	41 f4       	brne	.+16     	; 0x3d38 <UnityAssertNumbersArrayWithin+0x522>
        {
            expected = (UNITY_INTERNAL_PTR)((const char*)expected + increment);
    3d28:	29 8d       	ldd	r18, Y+25	; 0x19
    3d2a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3d2c:	8f 81       	ldd	r24, Y+7	; 0x07
    3d2e:	98 85       	ldd	r25, Y+8	; 0x08
    3d30:	82 0f       	add	r24, r18
    3d32:	93 1f       	adc	r25, r19
    3d34:	9a 8f       	std	Y+26, r25	; 0x1a
    3d36:	89 8f       	std	Y+25, r24	; 0x19
        }
        actual = (UNITY_INTERNAL_PTR)((const char*)actual + increment);
    3d38:	2b 8d       	ldd	r18, Y+27	; 0x1b
    3d3a:	3c 8d       	ldd	r19, Y+28	; 0x1c
    3d3c:	8f 81       	ldd	r24, Y+7	; 0x07
    3d3e:	98 85       	ldd	r25, Y+8	; 0x08
    3d40:	82 0f       	add	r24, r18
    3d42:	93 1f       	adc	r25, r19
    3d44:	9c 8f       	std	Y+28, r25	; 0x1c
    3d46:	8b 8f       	std	Y+27, r24	; 0x1b
    if (UnityIsOneArrayNull(expected, actual, lineNumber, msg))
    {
        UNITY_FAIL_AND_BAIL;
    }

    while ((elements > 0) && (elements--))
    3d48:	89 81       	ldd	r24, Y+1	; 0x01
    3d4a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d4c:	ab 81       	ldd	r26, Y+3	; 0x03
    3d4e:	bc 81       	ldd	r27, Y+4	; 0x04
    3d50:	00 97       	sbiw	r24, 0x00	; 0
    3d52:	a1 05       	cpc	r26, r1
    3d54:	b1 05       	cpc	r27, r1
    3d56:	d1 f0       	breq	.+52     	; 0x3d8c <UnityAssertNumbersArrayWithin+0x576>
    3d58:	21 e0       	ldi	r18, 0x01	; 1
    3d5a:	89 81       	ldd	r24, Y+1	; 0x01
    3d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d5e:	ab 81       	ldd	r26, Y+3	; 0x03
    3d60:	bc 81       	ldd	r27, Y+4	; 0x04
    3d62:	00 97       	sbiw	r24, 0x00	; 0
    3d64:	a1 05       	cpc	r26, r1
    3d66:	b1 05       	cpc	r27, r1
    3d68:	09 f4       	brne	.+2      	; 0x3d6c <UnityAssertNumbersArrayWithin+0x556>
    3d6a:	20 e0       	ldi	r18, 0x00	; 0
    3d6c:	89 81       	ldd	r24, Y+1	; 0x01
    3d6e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d70:	ab 81       	ldd	r26, Y+3	; 0x03
    3d72:	bc 81       	ldd	r27, Y+4	; 0x04
    3d74:	01 97       	sbiw	r24, 0x01	; 1
    3d76:	a1 09       	sbc	r26, r1
    3d78:	b1 09       	sbc	r27, r1
    3d7a:	89 83       	std	Y+1, r24	; 0x01
    3d7c:	9a 83       	std	Y+2, r25	; 0x02
    3d7e:	ab 83       	std	Y+3, r26	; 0x03
    3d80:	bc 83       	std	Y+4, r27	; 0x04
    3d82:	22 23       	and	r18, r18
    3d84:	09 f0       	breq	.+2      	; 0x3d88 <UnityAssertNumbersArrayWithin+0x572>
    3d86:	ec cd       	rjmp	.-1064   	; 0x3960 <UnityAssertNumbersArrayWithin+0x14a>
    3d88:	01 c0       	rjmp	.+2      	; 0x3d8c <UnityAssertNumbersArrayWithin+0x576>
        UnityPrintPointlessAndBail();
    }

    if (expected == actual)
    {
        return; /* Both are NULL or same pointer */
    3d8a:	00 00       	nop
        {
            expected = (UNITY_INTERNAL_PTR)((const char*)expected + increment);
        }
        actual = (UNITY_INTERNAL_PTR)((const char*)actual + increment);
    }
}
    3d8c:	a6 96       	adiw	r28, 0x26	; 38
    3d8e:	0f b6       	in	r0, 0x3f	; 63
    3d90:	f8 94       	cli
    3d92:	de bf       	out	0x3e, r29	; 62
    3d94:	0f be       	out	0x3f, r0	; 63
    3d96:	cd bf       	out	0x3d, r28	; 61
    3d98:	cf 91       	pop	r28
    3d9a:	df 91       	pop	r29
    3d9c:	1f 91       	pop	r17
    3d9e:	0f 91       	pop	r16
    3da0:	ff 90       	pop	r15
    3da2:	ef 90       	pop	r14
    3da4:	df 90       	pop	r13
    3da6:	cf 90       	pop	r12
    3da8:	bf 90       	pop	r11
    3daa:	af 90       	pop	r10
    3dac:	9f 90       	pop	r9
    3dae:	8f 90       	pop	r8
    3db0:	08 95       	ret

00003db2 <UnityAssertEqualString>:
/*-----------------------------------------------*/
void UnityAssertEqualString(const char* expected,
                            const char* actual,
                            const char* msg,
                            const UNITY_LINE_TYPE lineNumber)
{
    3db2:	0f 93       	push	r16
    3db4:	1f 93       	push	r17
    3db6:	df 93       	push	r29
    3db8:	cf 93       	push	r28
    3dba:	cd b7       	in	r28, 0x3d	; 61
    3dbc:	de b7       	in	r29, 0x3e	; 62
    3dbe:	2e 97       	sbiw	r28, 0x0e	; 14
    3dc0:	0f b6       	in	r0, 0x3f	; 63
    3dc2:	f8 94       	cli
    3dc4:	de bf       	out	0x3e, r29	; 62
    3dc6:	0f be       	out	0x3f, r0	; 63
    3dc8:	cd bf       	out	0x3d, r28	; 61
    3dca:	9e 83       	std	Y+6, r25	; 0x06
    3dcc:	8d 83       	std	Y+5, r24	; 0x05
    3dce:	78 87       	std	Y+8, r23	; 0x08
    3dd0:	6f 83       	std	Y+7, r22	; 0x07
    3dd2:	5a 87       	std	Y+10, r21	; 0x0a
    3dd4:	49 87       	std	Y+9, r20	; 0x09
    3dd6:	0b 87       	std	Y+11, r16	; 0x0b
    3dd8:	1c 87       	std	Y+12, r17	; 0x0c
    3dda:	2d 87       	std	Y+13, r18	; 0x0d
    3ddc:	3e 87       	std	Y+14, r19	; 0x0e
    UNITY_UINT32 i;

    RETURN_IF_FAIL_OR_IGNORE;
    3dde:	80 91 60 06 	lds	r24, 0x0660
    3de2:	90 91 61 06 	lds	r25, 0x0661
    3de6:	a0 91 62 06 	lds	r26, 0x0662
    3dea:	b0 91 63 06 	lds	r27, 0x0663
    3dee:	00 97       	sbiw	r24, 0x00	; 0
    3df0:	a1 05       	cpc	r26, r1
    3df2:	b1 05       	cpc	r27, r1
    3df4:	09 f0       	breq	.+2      	; 0x3df8 <UnityAssertEqualString+0x46>
    3df6:	a0 c0       	rjmp	.+320    	; 0x3f38 <UnityAssertEqualString+0x186>
    3df8:	80 91 64 06 	lds	r24, 0x0664
    3dfc:	90 91 65 06 	lds	r25, 0x0665
    3e00:	a0 91 66 06 	lds	r26, 0x0666
    3e04:	b0 91 67 06 	lds	r27, 0x0667
    3e08:	00 97       	sbiw	r24, 0x00	; 0
    3e0a:	a1 05       	cpc	r26, r1
    3e0c:	b1 05       	cpc	r27, r1
    3e0e:	09 f0       	breq	.+2      	; 0x3e12 <UnityAssertEqualString+0x60>
    3e10:	93 c0       	rjmp	.+294    	; 0x3f38 <UnityAssertEqualString+0x186>

    /* if both pointers not null compare the strings */
    if (expected && actual)
    3e12:	8d 81       	ldd	r24, Y+5	; 0x05
    3e14:	9e 81       	ldd	r25, Y+6	; 0x06
    3e16:	00 97       	sbiw	r24, 0x00	; 0
    3e18:	09 f4       	brne	.+2      	; 0x3e1c <UnityAssertEqualString+0x6a>
    3e1a:	4a c0       	rjmp	.+148    	; 0x3eb0 <UnityAssertEqualString+0xfe>
    3e1c:	8f 81       	ldd	r24, Y+7	; 0x07
    3e1e:	98 85       	ldd	r25, Y+8	; 0x08
    3e20:	00 97       	sbiw	r24, 0x00	; 0
    3e22:	09 f4       	brne	.+2      	; 0x3e26 <UnityAssertEqualString+0x74>
    3e24:	45 c0       	rjmp	.+138    	; 0x3eb0 <UnityAssertEqualString+0xfe>
    {
        for (i = 0; expected[i] || actual[i]; i++)
    3e26:	19 82       	std	Y+1, r1	; 0x01
    3e28:	1a 82       	std	Y+2, r1	; 0x02
    3e2a:	1b 82       	std	Y+3, r1	; 0x03
    3e2c:	1c 82       	std	Y+4, r1	; 0x04
    3e2e:	2b c0       	rjmp	.+86     	; 0x3e86 <UnityAssertEqualString+0xd4>
        {
            if (expected[i] != actual[i])
    3e30:	89 81       	ldd	r24, Y+1	; 0x01
    3e32:	9a 81       	ldd	r25, Y+2	; 0x02
    3e34:	2d 81       	ldd	r18, Y+5	; 0x05
    3e36:	3e 81       	ldd	r19, Y+6	; 0x06
    3e38:	82 0f       	add	r24, r18
    3e3a:	93 1f       	adc	r25, r19
    3e3c:	fc 01       	movw	r30, r24
    3e3e:	40 81       	ld	r20, Z
    3e40:	89 81       	ldd	r24, Y+1	; 0x01
    3e42:	9a 81       	ldd	r25, Y+2	; 0x02
    3e44:	2f 81       	ldd	r18, Y+7	; 0x07
    3e46:	38 85       	ldd	r19, Y+8	; 0x08
    3e48:	82 0f       	add	r24, r18
    3e4a:	93 1f       	adc	r25, r19
    3e4c:	fc 01       	movw	r30, r24
    3e4e:	80 81       	ld	r24, Z
    3e50:	48 17       	cp	r20, r24
    3e52:	71 f0       	breq	.+28     	; 0x3e70 <UnityAssertEqualString+0xbe>
            {
                Unity.CurrentTestFailed = 1;
    3e54:	81 e0       	ldi	r24, 0x01	; 1
    3e56:	90 e0       	ldi	r25, 0x00	; 0
    3e58:	a0 e0       	ldi	r26, 0x00	; 0
    3e5a:	b0 e0       	ldi	r27, 0x00	; 0
    3e5c:	80 93 60 06 	sts	0x0660, r24
    3e60:	90 93 61 06 	sts	0x0661, r25
    3e64:	a0 93 62 06 	sts	0x0662, r26
    3e68:	b0 93 63 06 	sts	0x0663, r27
                break;
    3e6c:	00 00       	nop
    UNITY_UINT32 i;

    RETURN_IF_FAIL_OR_IGNORE;

    /* if both pointers not null compare the strings */
    if (expected && actual)
    3e6e:	33 c0       	rjmp	.+102    	; 0x3ed6 <UnityAssertEqualString+0x124>
    {
        for (i = 0; expected[i] || actual[i]; i++)
    3e70:	89 81       	ldd	r24, Y+1	; 0x01
    3e72:	9a 81       	ldd	r25, Y+2	; 0x02
    3e74:	ab 81       	ldd	r26, Y+3	; 0x03
    3e76:	bc 81       	ldd	r27, Y+4	; 0x04
    3e78:	01 96       	adiw	r24, 0x01	; 1
    3e7a:	a1 1d       	adc	r26, r1
    3e7c:	b1 1d       	adc	r27, r1
    3e7e:	89 83       	std	Y+1, r24	; 0x01
    3e80:	9a 83       	std	Y+2, r25	; 0x02
    3e82:	ab 83       	std	Y+3, r26	; 0x03
    3e84:	bc 83       	std	Y+4, r27	; 0x04
    3e86:	89 81       	ldd	r24, Y+1	; 0x01
    3e88:	9a 81       	ldd	r25, Y+2	; 0x02
    3e8a:	2d 81       	ldd	r18, Y+5	; 0x05
    3e8c:	3e 81       	ldd	r19, Y+6	; 0x06
    3e8e:	82 0f       	add	r24, r18
    3e90:	93 1f       	adc	r25, r19
    3e92:	fc 01       	movw	r30, r24
    3e94:	80 81       	ld	r24, Z
    3e96:	88 23       	and	r24, r24
    3e98:	59 f6       	brne	.-106    	; 0x3e30 <UnityAssertEqualString+0x7e>
    3e9a:	89 81       	ldd	r24, Y+1	; 0x01
    3e9c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e9e:	2f 81       	ldd	r18, Y+7	; 0x07
    3ea0:	38 85       	ldd	r19, Y+8	; 0x08
    3ea2:	82 0f       	add	r24, r18
    3ea4:	93 1f       	adc	r25, r19
    3ea6:	fc 01       	movw	r30, r24
    3ea8:	80 81       	ld	r24, Z
    3eaa:	88 23       	and	r24, r24
    3eac:	09 f6       	brne	.-126    	; 0x3e30 <UnityAssertEqualString+0x7e>
    UNITY_UINT32 i;

    RETURN_IF_FAIL_OR_IGNORE;

    /* if both pointers not null compare the strings */
    if (expected && actual)
    3eae:	13 c0       	rjmp	.+38     	; 0x3ed6 <UnityAssertEqualString+0x124>
            }
        }
    }
    else
    { /* handle case of one pointers being null (if both null, test should pass) */
        if (expected != actual)
    3eb0:	2d 81       	ldd	r18, Y+5	; 0x05
    3eb2:	3e 81       	ldd	r19, Y+6	; 0x06
    3eb4:	8f 81       	ldd	r24, Y+7	; 0x07
    3eb6:	98 85       	ldd	r25, Y+8	; 0x08
    3eb8:	28 17       	cp	r18, r24
    3eba:	39 07       	cpc	r19, r25
    3ebc:	61 f0       	breq	.+24     	; 0x3ed6 <UnityAssertEqualString+0x124>
        {
            Unity.CurrentTestFailed = 1;
    3ebe:	81 e0       	ldi	r24, 0x01	; 1
    3ec0:	90 e0       	ldi	r25, 0x00	; 0
    3ec2:	a0 e0       	ldi	r26, 0x00	; 0
    3ec4:	b0 e0       	ldi	r27, 0x00	; 0
    3ec6:	80 93 60 06 	sts	0x0660, r24
    3eca:	90 93 61 06 	sts	0x0661, r25
    3ece:	a0 93 62 06 	sts	0x0662, r26
    3ed2:	b0 93 63 06 	sts	0x0663, r27
        }
    }

    if (Unity.CurrentTestFailed)
    3ed6:	80 91 60 06 	lds	r24, 0x0660
    3eda:	90 91 61 06 	lds	r25, 0x0661
    3ede:	a0 91 62 06 	lds	r26, 0x0662
    3ee2:	b0 91 63 06 	lds	r27, 0x0663
    3ee6:	00 97       	sbiw	r24, 0x00	; 0
    3ee8:	a1 05       	cpc	r26, r1
    3eea:	b1 05       	cpc	r27, r1
    3eec:	29 f1       	breq	.+74     	; 0x3f38 <UnityAssertEqualString+0x186>
    {
        UnityTestResultsFailBegin(lineNumber);
    3eee:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ef0:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ef2:	ad 85       	ldd	r26, Y+13	; 0x0d
    3ef4:	be 85       	ldd	r27, Y+14	; 0x0e
    3ef6:	bc 01       	movw	r22, r24
    3ef8:	cd 01       	movw	r24, r26
    3efa:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <UnityTestResultsFailBegin>
        UnityPrintExpectedAndActualStrings(expected, actual);
    3efe:	8d 81       	ldd	r24, Y+5	; 0x05
    3f00:	9e 81       	ldd	r25, Y+6	; 0x06
    3f02:	2f 81       	ldd	r18, Y+7	; 0x07
    3f04:	38 85       	ldd	r19, Y+8	; 0x08
    3f06:	b9 01       	movw	r22, r18
    3f08:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <UnityPrintExpectedAndActualStrings>
        UnityAddMsgIfSpecified(msg);
    3f0c:	89 85       	ldd	r24, Y+9	; 0x09
    3f0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f10:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <UnityAddMsgIfSpecified>
        UNITY_FAIL_AND_BAIL;
    3f14:	81 e0       	ldi	r24, 0x01	; 1
    3f16:	90 e0       	ldi	r25, 0x00	; 0
    3f18:	a0 e0       	ldi	r26, 0x00	; 0
    3f1a:	b0 e0       	ldi	r27, 0x00	; 0
    3f1c:	80 93 60 06 	sts	0x0660, r24
    3f20:	90 93 61 06 	sts	0x0661, r25
    3f24:	a0 93 62 06 	sts	0x0662, r26
    3f28:	b0 93 63 06 	sts	0x0663, r27
    3f2c:	88 e6       	ldi	r24, 0x68	; 104
    3f2e:	96 e0       	ldi	r25, 0x06	; 6
    3f30:	61 e0       	ldi	r22, 0x01	; 1
    3f32:	70 e0       	ldi	r23, 0x00	; 0
    3f34:	0e 94 48 29 	call	0x5290	; 0x5290 <longjmp>
    }
}
    3f38:	2e 96       	adiw	r28, 0x0e	; 14
    3f3a:	0f b6       	in	r0, 0x3f	; 63
    3f3c:	f8 94       	cli
    3f3e:	de bf       	out	0x3e, r29	; 62
    3f40:	0f be       	out	0x3f, r0	; 63
    3f42:	cd bf       	out	0x3d, r28	; 61
    3f44:	cf 91       	pop	r28
    3f46:	df 91       	pop	r29
    3f48:	1f 91       	pop	r17
    3f4a:	0f 91       	pop	r16
    3f4c:	08 95       	ret

00003f4e <UnityAssertEqualStringLen>:
void UnityAssertEqualStringLen(const char* expected,
                               const char* actual,
                               const UNITY_UINT32 length,
                               const char* msg,
                               const UNITY_LINE_TYPE lineNumber)
{
    3f4e:	cf 92       	push	r12
    3f50:	df 92       	push	r13
    3f52:	ef 92       	push	r14
    3f54:	ff 92       	push	r15
    3f56:	0f 93       	push	r16
    3f58:	1f 93       	push	r17
    3f5a:	df 93       	push	r29
    3f5c:	cf 93       	push	r28
    3f5e:	cd b7       	in	r28, 0x3d	; 61
    3f60:	de b7       	in	r29, 0x3e	; 62
    3f62:	62 97       	sbiw	r28, 0x12	; 18
    3f64:	0f b6       	in	r0, 0x3f	; 63
    3f66:	f8 94       	cli
    3f68:	de bf       	out	0x3e, r29	; 62
    3f6a:	0f be       	out	0x3f, r0	; 63
    3f6c:	cd bf       	out	0x3d, r28	; 61
    3f6e:	9e 83       	std	Y+6, r25	; 0x06
    3f70:	8d 83       	std	Y+5, r24	; 0x05
    3f72:	78 87       	std	Y+8, r23	; 0x08
    3f74:	6f 83       	std	Y+7, r22	; 0x07
    3f76:	29 87       	std	Y+9, r18	; 0x09
    3f78:	3a 87       	std	Y+10, r19	; 0x0a
    3f7a:	4b 87       	std	Y+11, r20	; 0x0b
    3f7c:	5c 87       	std	Y+12, r21	; 0x0c
    3f7e:	1e 87       	std	Y+14, r17	; 0x0e
    3f80:	0d 87       	std	Y+13, r16	; 0x0d
    3f82:	cf 86       	std	Y+15, r12	; 0x0f
    3f84:	d8 8a       	std	Y+16, r13	; 0x10
    3f86:	e9 8a       	std	Y+17, r14	; 0x11
    3f88:	fa 8a       	std	Y+18, r15	; 0x12
    UNITY_UINT32 i;

    RETURN_IF_FAIL_OR_IGNORE;
    3f8a:	80 91 60 06 	lds	r24, 0x0660
    3f8e:	90 91 61 06 	lds	r25, 0x0661
    3f92:	a0 91 62 06 	lds	r26, 0x0662
    3f96:	b0 91 63 06 	lds	r27, 0x0663
    3f9a:	00 97       	sbiw	r24, 0x00	; 0
    3f9c:	a1 05       	cpc	r26, r1
    3f9e:	b1 05       	cpc	r27, r1
    3fa0:	09 f0       	breq	.+2      	; 0x3fa4 <UnityAssertEqualStringLen+0x56>
    3fa2:	b4 c0       	rjmp	.+360    	; 0x410c <UnityAssertEqualStringLen+0x1be>
    3fa4:	80 91 64 06 	lds	r24, 0x0664
    3fa8:	90 91 65 06 	lds	r25, 0x0665
    3fac:	a0 91 66 06 	lds	r26, 0x0666
    3fb0:	b0 91 67 06 	lds	r27, 0x0667
    3fb4:	00 97       	sbiw	r24, 0x00	; 0
    3fb6:	a1 05       	cpc	r26, r1
    3fb8:	b1 05       	cpc	r27, r1
    3fba:	09 f0       	breq	.+2      	; 0x3fbe <UnityAssertEqualStringLen+0x70>
    3fbc:	a7 c0       	rjmp	.+334    	; 0x410c <UnityAssertEqualStringLen+0x1be>

    /* if both pointers not null compare the strings */
    if (expected && actual)
    3fbe:	8d 81       	ldd	r24, Y+5	; 0x05
    3fc0:	9e 81       	ldd	r25, Y+6	; 0x06
    3fc2:	00 97       	sbiw	r24, 0x00	; 0
    3fc4:	09 f4       	brne	.+2      	; 0x3fc8 <UnityAssertEqualStringLen+0x7a>
    3fc6:	59 c0       	rjmp	.+178    	; 0x407a <UnityAssertEqualStringLen+0x12c>
    3fc8:	8f 81       	ldd	r24, Y+7	; 0x07
    3fca:	98 85       	ldd	r25, Y+8	; 0x08
    3fcc:	00 97       	sbiw	r24, 0x00	; 0
    3fce:	09 f4       	brne	.+2      	; 0x3fd2 <UnityAssertEqualStringLen+0x84>
    3fd0:	54 c0       	rjmp	.+168    	; 0x407a <UnityAssertEqualStringLen+0x12c>
    {
        for (i = 0; (i < length) && (expected[i] || actual[i]); i++)
    3fd2:	19 82       	std	Y+1, r1	; 0x01
    3fd4:	1a 82       	std	Y+2, r1	; 0x02
    3fd6:	1b 82       	std	Y+3, r1	; 0x03
    3fd8:	1c 82       	std	Y+4, r1	; 0x04
    3fda:	2b c0       	rjmp	.+86     	; 0x4032 <UnityAssertEqualStringLen+0xe4>
        {
            if (expected[i] != actual[i])
    3fdc:	89 81       	ldd	r24, Y+1	; 0x01
    3fde:	9a 81       	ldd	r25, Y+2	; 0x02
    3fe0:	2d 81       	ldd	r18, Y+5	; 0x05
    3fe2:	3e 81       	ldd	r19, Y+6	; 0x06
    3fe4:	82 0f       	add	r24, r18
    3fe6:	93 1f       	adc	r25, r19
    3fe8:	fc 01       	movw	r30, r24
    3fea:	40 81       	ld	r20, Z
    3fec:	89 81       	ldd	r24, Y+1	; 0x01
    3fee:	9a 81       	ldd	r25, Y+2	; 0x02
    3ff0:	2f 81       	ldd	r18, Y+7	; 0x07
    3ff2:	38 85       	ldd	r19, Y+8	; 0x08
    3ff4:	82 0f       	add	r24, r18
    3ff6:	93 1f       	adc	r25, r19
    3ff8:	fc 01       	movw	r30, r24
    3ffa:	80 81       	ld	r24, Z
    3ffc:	48 17       	cp	r20, r24
    3ffe:	71 f0       	breq	.+28     	; 0x401c <UnityAssertEqualStringLen+0xce>
            {
                Unity.CurrentTestFailed = 1;
    4000:	81 e0       	ldi	r24, 0x01	; 1
    4002:	90 e0       	ldi	r25, 0x00	; 0
    4004:	a0 e0       	ldi	r26, 0x00	; 0
    4006:	b0 e0       	ldi	r27, 0x00	; 0
    4008:	80 93 60 06 	sts	0x0660, r24
    400c:	90 93 61 06 	sts	0x0661, r25
    4010:	a0 93 62 06 	sts	0x0662, r26
    4014:	b0 93 63 06 	sts	0x0663, r27
                break;
    4018:	00 00       	nop
    UNITY_UINT32 i;

    RETURN_IF_FAIL_OR_IGNORE;

    /* if both pointers not null compare the strings */
    if (expected && actual)
    401a:	44 c0       	rjmp	.+136    	; 0x40a4 <UnityAssertEqualStringLen+0x156>
    {
        for (i = 0; (i < length) && (expected[i] || actual[i]); i++)
    401c:	89 81       	ldd	r24, Y+1	; 0x01
    401e:	9a 81       	ldd	r25, Y+2	; 0x02
    4020:	ab 81       	ldd	r26, Y+3	; 0x03
    4022:	bc 81       	ldd	r27, Y+4	; 0x04
    4024:	01 96       	adiw	r24, 0x01	; 1
    4026:	a1 1d       	adc	r26, r1
    4028:	b1 1d       	adc	r27, r1
    402a:	89 83       	std	Y+1, r24	; 0x01
    402c:	9a 83       	std	Y+2, r25	; 0x02
    402e:	ab 83       	std	Y+3, r26	; 0x03
    4030:	bc 83       	std	Y+4, r27	; 0x04
    4032:	29 81       	ldd	r18, Y+1	; 0x01
    4034:	3a 81       	ldd	r19, Y+2	; 0x02
    4036:	4b 81       	ldd	r20, Y+3	; 0x03
    4038:	5c 81       	ldd	r21, Y+4	; 0x04
    403a:	89 85       	ldd	r24, Y+9	; 0x09
    403c:	9a 85       	ldd	r25, Y+10	; 0x0a
    403e:	ab 85       	ldd	r26, Y+11	; 0x0b
    4040:	bc 85       	ldd	r27, Y+12	; 0x0c
    4042:	28 17       	cp	r18, r24
    4044:	39 07       	cpc	r19, r25
    4046:	4a 07       	cpc	r20, r26
    4048:	5b 07       	cpc	r21, r27
    404a:	58 f5       	brcc	.+86     	; 0x40a2 <UnityAssertEqualStringLen+0x154>
    404c:	89 81       	ldd	r24, Y+1	; 0x01
    404e:	9a 81       	ldd	r25, Y+2	; 0x02
    4050:	2d 81       	ldd	r18, Y+5	; 0x05
    4052:	3e 81       	ldd	r19, Y+6	; 0x06
    4054:	82 0f       	add	r24, r18
    4056:	93 1f       	adc	r25, r19
    4058:	fc 01       	movw	r30, r24
    405a:	80 81       	ld	r24, Z
    405c:	88 23       	and	r24, r24
    405e:	09 f0       	breq	.+2      	; 0x4062 <UnityAssertEqualStringLen+0x114>
    4060:	bd cf       	rjmp	.-134    	; 0x3fdc <UnityAssertEqualStringLen+0x8e>
    4062:	89 81       	ldd	r24, Y+1	; 0x01
    4064:	9a 81       	ldd	r25, Y+2	; 0x02
    4066:	2f 81       	ldd	r18, Y+7	; 0x07
    4068:	38 85       	ldd	r19, Y+8	; 0x08
    406a:	82 0f       	add	r24, r18
    406c:	93 1f       	adc	r25, r19
    406e:	fc 01       	movw	r30, r24
    4070:	80 81       	ld	r24, Z
    4072:	88 23       	and	r24, r24
    4074:	09 f0       	breq	.+2      	; 0x4078 <UnityAssertEqualStringLen+0x12a>
    4076:	b2 cf       	rjmp	.-156    	; 0x3fdc <UnityAssertEqualStringLen+0x8e>
    UNITY_UINT32 i;

    RETURN_IF_FAIL_OR_IGNORE;

    /* if both pointers not null compare the strings */
    if (expected && actual)
    4078:	15 c0       	rjmp	.+42     	; 0x40a4 <UnityAssertEqualStringLen+0x156>
            }
        }
    }
    else
    { /* handle case of one pointers being null (if both null, test should pass) */
        if (expected != actual)
    407a:	2d 81       	ldd	r18, Y+5	; 0x05
    407c:	3e 81       	ldd	r19, Y+6	; 0x06
    407e:	8f 81       	ldd	r24, Y+7	; 0x07
    4080:	98 85       	ldd	r25, Y+8	; 0x08
    4082:	28 17       	cp	r18, r24
    4084:	39 07       	cpc	r19, r25
    4086:	71 f0       	breq	.+28     	; 0x40a4 <UnityAssertEqualStringLen+0x156>
        {
            Unity.CurrentTestFailed = 1;
    4088:	81 e0       	ldi	r24, 0x01	; 1
    408a:	90 e0       	ldi	r25, 0x00	; 0
    408c:	a0 e0       	ldi	r26, 0x00	; 0
    408e:	b0 e0       	ldi	r27, 0x00	; 0
    4090:	80 93 60 06 	sts	0x0660, r24
    4094:	90 93 61 06 	sts	0x0661, r25
    4098:	a0 93 62 06 	sts	0x0662, r26
    409c:	b0 93 63 06 	sts	0x0663, r27
    40a0:	01 c0       	rjmp	.+2      	; 0x40a4 <UnityAssertEqualStringLen+0x156>
    UNITY_UINT32 i;

    RETURN_IF_FAIL_OR_IGNORE;

    /* if both pointers not null compare the strings */
    if (expected && actual)
    40a2:	00 00       	nop
        {
            Unity.CurrentTestFailed = 1;
        }
    }

    if (Unity.CurrentTestFailed)
    40a4:	80 91 60 06 	lds	r24, 0x0660
    40a8:	90 91 61 06 	lds	r25, 0x0661
    40ac:	a0 91 62 06 	lds	r26, 0x0662
    40b0:	b0 91 63 06 	lds	r27, 0x0663
    40b4:	00 97       	sbiw	r24, 0x00	; 0
    40b6:	a1 05       	cpc	r26, r1
    40b8:	b1 05       	cpc	r27, r1
    40ba:	41 f1       	breq	.+80     	; 0x410c <UnityAssertEqualStringLen+0x1be>
    {
        UnityTestResultsFailBegin(lineNumber);
    40bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    40be:	98 89       	ldd	r25, Y+16	; 0x10
    40c0:	a9 89       	ldd	r26, Y+17	; 0x11
    40c2:	ba 89       	ldd	r27, Y+18	; 0x12
    40c4:	bc 01       	movw	r22, r24
    40c6:	cd 01       	movw	r24, r26
    40c8:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <UnityTestResultsFailBegin>
        UnityPrintExpectedAndActualStringsLen(expected, actual, length);
    40cc:	8d 81       	ldd	r24, Y+5	; 0x05
    40ce:	9e 81       	ldd	r25, Y+6	; 0x06
    40d0:	6f 81       	ldd	r22, Y+7	; 0x07
    40d2:	78 85       	ldd	r23, Y+8	; 0x08
    40d4:	29 85       	ldd	r18, Y+9	; 0x09
    40d6:	3a 85       	ldd	r19, Y+10	; 0x0a
    40d8:	4b 85       	ldd	r20, Y+11	; 0x0b
    40da:	5c 85       	ldd	r21, Y+12	; 0x0c
    40dc:	0e 94 10 10 	call	0x2020	; 0x2020 <UnityPrintExpectedAndActualStringsLen>
        UnityAddMsgIfSpecified(msg);
    40e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    40e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    40e4:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <UnityAddMsgIfSpecified>
        UNITY_FAIL_AND_BAIL;
    40e8:	81 e0       	ldi	r24, 0x01	; 1
    40ea:	90 e0       	ldi	r25, 0x00	; 0
    40ec:	a0 e0       	ldi	r26, 0x00	; 0
    40ee:	b0 e0       	ldi	r27, 0x00	; 0
    40f0:	80 93 60 06 	sts	0x0660, r24
    40f4:	90 93 61 06 	sts	0x0661, r25
    40f8:	a0 93 62 06 	sts	0x0662, r26
    40fc:	b0 93 63 06 	sts	0x0663, r27
    4100:	88 e6       	ldi	r24, 0x68	; 104
    4102:	96 e0       	ldi	r25, 0x06	; 6
    4104:	61 e0       	ldi	r22, 0x01	; 1
    4106:	70 e0       	ldi	r23, 0x00	; 0
    4108:	0e 94 48 29 	call	0x5290	; 0x5290 <longjmp>
    }
}
    410c:	62 96       	adiw	r28, 0x12	; 18
    410e:	0f b6       	in	r0, 0x3f	; 63
    4110:	f8 94       	cli
    4112:	de bf       	out	0x3e, r29	; 62
    4114:	0f be       	out	0x3f, r0	; 63
    4116:	cd bf       	out	0x3d, r28	; 61
    4118:	cf 91       	pop	r28
    411a:	df 91       	pop	r29
    411c:	1f 91       	pop	r17
    411e:	0f 91       	pop	r16
    4120:	ff 90       	pop	r15
    4122:	ef 90       	pop	r14
    4124:	df 90       	pop	r13
    4126:	cf 90       	pop	r12
    4128:	08 95       	ret

0000412a <UnityAssertEqualStringArray>:
                                 const char** actual,
                                 const UNITY_UINT32 num_elements,
                                 const char* msg,
                                 const UNITY_LINE_TYPE lineNumber,
                                 const UNITY_FLAGS_T flags)
{
    412a:	af 92       	push	r10
    412c:	cf 92       	push	r12
    412e:	df 92       	push	r13
    4130:	ef 92       	push	r14
    4132:	ff 92       	push	r15
    4134:	0f 93       	push	r16
    4136:	1f 93       	push	r17
    4138:	df 93       	push	r29
    413a:	cf 93       	push	r28
    413c:	cd b7       	in	r28, 0x3d	; 61
    413e:	de b7       	in	r29, 0x3e	; 62
    4140:	6b 97       	sbiw	r28, 0x1b	; 27
    4142:	0f b6       	in	r0, 0x3f	; 63
    4144:	f8 94       	cli
    4146:	de bf       	out	0x3e, r29	; 62
    4148:	0f be       	out	0x3f, r0	; 63
    414a:	cd bf       	out	0x3d, r28	; 61
    414c:	9e 87       	std	Y+14, r25	; 0x0e
    414e:	8d 87       	std	Y+13, r24	; 0x0d
    4150:	78 8b       	std	Y+16, r23	; 0x10
    4152:	6f 87       	std	Y+15, r22	; 0x0f
    4154:	29 8b       	std	Y+17, r18	; 0x11
    4156:	3a 8b       	std	Y+18, r19	; 0x12
    4158:	4b 8b       	std	Y+19, r20	; 0x13
    415a:	5c 8b       	std	Y+20, r21	; 0x14
    415c:	1e 8b       	std	Y+22, r17	; 0x16
    415e:	0d 8b       	std	Y+21, r16	; 0x15
    4160:	cf 8a       	std	Y+23, r12	; 0x17
    4162:	d8 8e       	std	Y+24, r13	; 0x18
    4164:	e9 8e       	std	Y+25, r14	; 0x19
    4166:	fa 8e       	std	Y+26, r15	; 0x1a
    4168:	ab 8e       	std	Y+27, r10	; 0x1b
    UNITY_UINT32 i = 0;
    416a:	19 82       	std	Y+1, r1	; 0x01
    416c:	1a 82       	std	Y+2, r1	; 0x02
    416e:	1b 82       	std	Y+3, r1	; 0x03
    4170:	1c 82       	std	Y+4, r1	; 0x04
    UNITY_UINT32 j = 0;
    4172:	1d 82       	std	Y+5, r1	; 0x05
    4174:	1e 82       	std	Y+6, r1	; 0x06
    4176:	1f 82       	std	Y+7, r1	; 0x07
    4178:	18 86       	std	Y+8, r1	; 0x08
    const char* expd = NULL;
    417a:	1a 86       	std	Y+10, r1	; 0x0a
    417c:	19 86       	std	Y+9, r1	; 0x09
    const char* act = NULL;
    417e:	1c 86       	std	Y+12, r1	; 0x0c
    4180:	1b 86       	std	Y+11, r1	; 0x0b

    RETURN_IF_FAIL_OR_IGNORE;
    4182:	80 91 60 06 	lds	r24, 0x0660
    4186:	90 91 61 06 	lds	r25, 0x0661
    418a:	a0 91 62 06 	lds	r26, 0x0662
    418e:	b0 91 63 06 	lds	r27, 0x0663
    4192:	00 97       	sbiw	r24, 0x00	; 0
    4194:	a1 05       	cpc	r26, r1
    4196:	b1 05       	cpc	r27, r1
    4198:	09 f0       	breq	.+2      	; 0x419c <UnityAssertEqualStringArray+0x72>
    419a:	47 c1       	rjmp	.+654    	; 0x442a <UnityAssertEqualStringArray+0x300>
    419c:	80 91 64 06 	lds	r24, 0x0664
    41a0:	90 91 65 06 	lds	r25, 0x0665
    41a4:	a0 91 66 06 	lds	r26, 0x0666
    41a8:	b0 91 67 06 	lds	r27, 0x0667
    41ac:	00 97       	sbiw	r24, 0x00	; 0
    41ae:	a1 05       	cpc	r26, r1
    41b0:	b1 05       	cpc	r27, r1
    41b2:	09 f0       	breq	.+2      	; 0x41b6 <UnityAssertEqualStringArray+0x8c>
    41b4:	3a c1       	rjmp	.+628    	; 0x442a <UnityAssertEqualStringArray+0x300>

    /* if no elements, it's an error */
    if (num_elements == 0)
    41b6:	89 89       	ldd	r24, Y+17	; 0x11
    41b8:	9a 89       	ldd	r25, Y+18	; 0x12
    41ba:	ab 89       	ldd	r26, Y+19	; 0x13
    41bc:	bc 89       	ldd	r27, Y+20	; 0x14
    41be:	00 97       	sbiw	r24, 0x00	; 0
    41c0:	a1 05       	cpc	r26, r1
    41c2:	b1 05       	cpc	r27, r1
    41c4:	11 f5       	brne	.+68     	; 0x420a <UnityAssertEqualStringArray+0xe0>
    {
        UnityPrintPointlessAndBail();
    41c6:	8f 89       	ldd	r24, Y+23	; 0x17
    41c8:	98 8d       	ldd	r25, Y+24	; 0x18
    41ca:	a9 8d       	ldd	r26, Y+25	; 0x19
    41cc:	ba 8d       	ldd	r27, Y+26	; 0x1a
    41ce:	bc 01       	movw	r22, r24
    41d0:	cd 01       	movw	r24, r26
    41d2:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <UnityTestResultsFailBegin>
    41d6:	89 ea       	ldi	r24, 0xA9	; 169
    41d8:	93 e0       	ldi	r25, 0x03	; 3
    41da:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
    41de:	8d 89       	ldd	r24, Y+21	; 0x15
    41e0:	9e 89       	ldd	r25, Y+22	; 0x16
    41e2:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <UnityAddMsgIfSpecified>
    41e6:	81 e0       	ldi	r24, 0x01	; 1
    41e8:	90 e0       	ldi	r25, 0x00	; 0
    41ea:	a0 e0       	ldi	r26, 0x00	; 0
    41ec:	b0 e0       	ldi	r27, 0x00	; 0
    41ee:	80 93 60 06 	sts	0x0660, r24
    41f2:	90 93 61 06 	sts	0x0661, r25
    41f6:	a0 93 62 06 	sts	0x0662, r26
    41fa:	b0 93 63 06 	sts	0x0663, r27
    41fe:	88 e6       	ldi	r24, 0x68	; 104
    4200:	96 e0       	ldi	r25, 0x06	; 6
    4202:	61 e0       	ldi	r22, 0x01	; 1
    4204:	70 e0       	ldi	r23, 0x00	; 0
    4206:	0e 94 48 29 	call	0x5290	; 0x5290 <longjmp>
    }

    if ((const void*)expected == (const void*)actual)
    420a:	2d 85       	ldd	r18, Y+13	; 0x0d
    420c:	3e 85       	ldd	r19, Y+14	; 0x0e
    420e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4210:	98 89       	ldd	r25, Y+16	; 0x10
    4212:	28 17       	cp	r18, r24
    4214:	39 07       	cpc	r19, r25
    4216:	09 f4       	brne	.+2      	; 0x421a <UnityAssertEqualStringArray+0xf0>
    4218:	07 c1       	rjmp	.+526    	; 0x4428 <UnityAssertEqualStringArray+0x2fe>
    {
        return; /* Both are NULL or same pointer */
    }

    if (UnityIsOneArrayNull((UNITY_INTERNAL_PTR)expected, (UNITY_INTERNAL_PTR)actual, lineNumber, msg))
    421a:	8d 85       	ldd	r24, Y+13	; 0x0d
    421c:	9e 85       	ldd	r25, Y+14	; 0x0e
    421e:	6f 85       	ldd	r22, Y+15	; 0x0f
    4220:	78 89       	ldd	r23, Y+16	; 0x10
    4222:	2f 89       	ldd	r18, Y+23	; 0x17
    4224:	38 8d       	ldd	r19, Y+24	; 0x18
    4226:	49 8d       	ldd	r20, Y+25	; 0x19
    4228:	5a 8d       	ldd	r21, Y+26	; 0x1a
    422a:	ed 89       	ldd	r30, Y+21	; 0x15
    422c:	fe 89       	ldd	r31, Y+22	; 0x16
    422e:	8f 01       	movw	r16, r30
    4230:	0e 94 7d 10 	call	0x20fa	; 0x20fa <UnityIsOneArrayNull>
    4234:	00 97       	sbiw	r24, 0x00	; 0
    4236:	91 f0       	breq	.+36     	; 0x425c <UnityAssertEqualStringArray+0x132>
    {
        UNITY_FAIL_AND_BAIL;
    4238:	81 e0       	ldi	r24, 0x01	; 1
    423a:	90 e0       	ldi	r25, 0x00	; 0
    423c:	a0 e0       	ldi	r26, 0x00	; 0
    423e:	b0 e0       	ldi	r27, 0x00	; 0
    4240:	80 93 60 06 	sts	0x0660, r24
    4244:	90 93 61 06 	sts	0x0661, r25
    4248:	a0 93 62 06 	sts	0x0662, r26
    424c:	b0 93 63 06 	sts	0x0663, r27
    4250:	88 e6       	ldi	r24, 0x68	; 104
    4252:	96 e0       	ldi	r25, 0x06	; 6
    4254:	61 e0       	ldi	r22, 0x01	; 1
    4256:	70 e0       	ldi	r23, 0x00	; 0
    4258:	0e 94 48 29 	call	0x5290	; 0x5290 <longjmp>
    }

    if (flags != UNITY_ARRAY_TO_ARRAY)
    425c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    425e:	81 30       	cpi	r24, 0x01	; 1
    4260:	21 f0       	breq	.+8      	; 0x426a <UnityAssertEqualStringArray+0x140>
    {
        expd = (const char*)expected;
    4262:	8d 85       	ldd	r24, Y+13	; 0x0d
    4264:	9e 85       	ldd	r25, Y+14	; 0x0e
    4266:	9a 87       	std	Y+10, r25	; 0x0a
    4268:	89 87       	std	Y+9, r24	; 0x09
    }

    do
    {
        act = actual[j];
    426a:	8d 81       	ldd	r24, Y+5	; 0x05
    426c:	9e 81       	ldd	r25, Y+6	; 0x06
    426e:	88 0f       	add	r24, r24
    4270:	99 1f       	adc	r25, r25
    4272:	2f 85       	ldd	r18, Y+15	; 0x0f
    4274:	38 89       	ldd	r19, Y+16	; 0x10
    4276:	82 0f       	add	r24, r18
    4278:	93 1f       	adc	r25, r19
    427a:	fc 01       	movw	r30, r24
    427c:	80 81       	ld	r24, Z
    427e:	91 81       	ldd	r25, Z+1	; 0x01
    4280:	9c 87       	std	Y+12, r25	; 0x0c
    4282:	8b 87       	std	Y+11, r24	; 0x0b
        if (flags == UNITY_ARRAY_TO_ARRAY)
    4284:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4286:	81 30       	cpi	r24, 0x01	; 1
    4288:	69 f4       	brne	.+26     	; 0x42a4 <UnityAssertEqualStringArray+0x17a>
        {
            expd = ((const char* const*)expected)[j];
    428a:	2d 85       	ldd	r18, Y+13	; 0x0d
    428c:	3e 85       	ldd	r19, Y+14	; 0x0e
    428e:	8d 81       	ldd	r24, Y+5	; 0x05
    4290:	9e 81       	ldd	r25, Y+6	; 0x06
    4292:	88 0f       	add	r24, r24
    4294:	99 1f       	adc	r25, r25
    4296:	82 0f       	add	r24, r18
    4298:	93 1f       	adc	r25, r19
    429a:	fc 01       	movw	r30, r24
    429c:	80 81       	ld	r24, Z
    429e:	91 81       	ldd	r25, Z+1	; 0x01
    42a0:	9a 87       	std	Y+10, r25	; 0x0a
    42a2:	89 87       	std	Y+9, r24	; 0x09
        }

        /* if both pointers not null compare the strings */
        if (expd && act)
    42a4:	89 85       	ldd	r24, Y+9	; 0x09
    42a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    42a8:	00 97       	sbiw	r24, 0x00	; 0
    42aa:	09 f4       	brne	.+2      	; 0x42ae <UnityAssertEqualStringArray+0x184>
    42ac:	4a c0       	rjmp	.+148    	; 0x4342 <UnityAssertEqualStringArray+0x218>
    42ae:	8b 85       	ldd	r24, Y+11	; 0x0b
    42b0:	9c 85       	ldd	r25, Y+12	; 0x0c
    42b2:	00 97       	sbiw	r24, 0x00	; 0
    42b4:	09 f4       	brne	.+2      	; 0x42b8 <UnityAssertEqualStringArray+0x18e>
    42b6:	45 c0       	rjmp	.+138    	; 0x4342 <UnityAssertEqualStringArray+0x218>
        {
            for (i = 0; expd[i] || act[i]; i++)
    42b8:	19 82       	std	Y+1, r1	; 0x01
    42ba:	1a 82       	std	Y+2, r1	; 0x02
    42bc:	1b 82       	std	Y+3, r1	; 0x03
    42be:	1c 82       	std	Y+4, r1	; 0x04
    42c0:	2b c0       	rjmp	.+86     	; 0x4318 <UnityAssertEqualStringArray+0x1ee>
            {
                if (expd[i] != act[i])
    42c2:	89 81       	ldd	r24, Y+1	; 0x01
    42c4:	9a 81       	ldd	r25, Y+2	; 0x02
    42c6:	29 85       	ldd	r18, Y+9	; 0x09
    42c8:	3a 85       	ldd	r19, Y+10	; 0x0a
    42ca:	82 0f       	add	r24, r18
    42cc:	93 1f       	adc	r25, r19
    42ce:	fc 01       	movw	r30, r24
    42d0:	40 81       	ld	r20, Z
    42d2:	89 81       	ldd	r24, Y+1	; 0x01
    42d4:	9a 81       	ldd	r25, Y+2	; 0x02
    42d6:	2b 85       	ldd	r18, Y+11	; 0x0b
    42d8:	3c 85       	ldd	r19, Y+12	; 0x0c
    42da:	82 0f       	add	r24, r18
    42dc:	93 1f       	adc	r25, r19
    42de:	fc 01       	movw	r30, r24
    42e0:	80 81       	ld	r24, Z
    42e2:	48 17       	cp	r20, r24
    42e4:	71 f0       	breq	.+28     	; 0x4302 <UnityAssertEqualStringArray+0x1d8>
                {
                    Unity.CurrentTestFailed = 1;
    42e6:	81 e0       	ldi	r24, 0x01	; 1
    42e8:	90 e0       	ldi	r25, 0x00	; 0
    42ea:	a0 e0       	ldi	r26, 0x00	; 0
    42ec:	b0 e0       	ldi	r27, 0x00	; 0
    42ee:	80 93 60 06 	sts	0x0660, r24
    42f2:	90 93 61 06 	sts	0x0661, r25
    42f6:	a0 93 62 06 	sts	0x0662, r26
    42fa:	b0 93 63 06 	sts	0x0663, r27
                    break;
    42fe:	00 00       	nop
        {
            expd = ((const char* const*)expected)[j];
        }

        /* if both pointers not null compare the strings */
        if (expd && act)
    4300:	33 c0       	rjmp	.+102    	; 0x4368 <UnityAssertEqualStringArray+0x23e>
        {
            for (i = 0; expd[i] || act[i]; i++)
    4302:	89 81       	ldd	r24, Y+1	; 0x01
    4304:	9a 81       	ldd	r25, Y+2	; 0x02
    4306:	ab 81       	ldd	r26, Y+3	; 0x03
    4308:	bc 81       	ldd	r27, Y+4	; 0x04
    430a:	01 96       	adiw	r24, 0x01	; 1
    430c:	a1 1d       	adc	r26, r1
    430e:	b1 1d       	adc	r27, r1
    4310:	89 83       	std	Y+1, r24	; 0x01
    4312:	9a 83       	std	Y+2, r25	; 0x02
    4314:	ab 83       	std	Y+3, r26	; 0x03
    4316:	bc 83       	std	Y+4, r27	; 0x04
    4318:	89 81       	ldd	r24, Y+1	; 0x01
    431a:	9a 81       	ldd	r25, Y+2	; 0x02
    431c:	29 85       	ldd	r18, Y+9	; 0x09
    431e:	3a 85       	ldd	r19, Y+10	; 0x0a
    4320:	82 0f       	add	r24, r18
    4322:	93 1f       	adc	r25, r19
    4324:	fc 01       	movw	r30, r24
    4326:	80 81       	ld	r24, Z
    4328:	88 23       	and	r24, r24
    432a:	59 f6       	brne	.-106    	; 0x42c2 <UnityAssertEqualStringArray+0x198>
    432c:	89 81       	ldd	r24, Y+1	; 0x01
    432e:	9a 81       	ldd	r25, Y+2	; 0x02
    4330:	2b 85       	ldd	r18, Y+11	; 0x0b
    4332:	3c 85       	ldd	r19, Y+12	; 0x0c
    4334:	82 0f       	add	r24, r18
    4336:	93 1f       	adc	r25, r19
    4338:	fc 01       	movw	r30, r24
    433a:	80 81       	ld	r24, Z
    433c:	88 23       	and	r24, r24
    433e:	09 f6       	brne	.-126    	; 0x42c2 <UnityAssertEqualStringArray+0x198>
        {
            expd = ((const char* const*)expected)[j];
        }

        /* if both pointers not null compare the strings */
        if (expd && act)
    4340:	13 c0       	rjmp	.+38     	; 0x4368 <UnityAssertEqualStringArray+0x23e>
                }
            }
        }
        else
        { /* handle case of one pointers being null (if both null, test should pass) */
            if (expd != act)
    4342:	29 85       	ldd	r18, Y+9	; 0x09
    4344:	3a 85       	ldd	r19, Y+10	; 0x0a
    4346:	8b 85       	ldd	r24, Y+11	; 0x0b
    4348:	9c 85       	ldd	r25, Y+12	; 0x0c
    434a:	28 17       	cp	r18, r24
    434c:	39 07       	cpc	r19, r25
    434e:	61 f0       	breq	.+24     	; 0x4368 <UnityAssertEqualStringArray+0x23e>
            {
                Unity.CurrentTestFailed = 1;
    4350:	81 e0       	ldi	r24, 0x01	; 1
    4352:	90 e0       	ldi	r25, 0x00	; 0
    4354:	a0 e0       	ldi	r26, 0x00	; 0
    4356:	b0 e0       	ldi	r27, 0x00	; 0
    4358:	80 93 60 06 	sts	0x0660, r24
    435c:	90 93 61 06 	sts	0x0661, r25
    4360:	a0 93 62 06 	sts	0x0662, r26
    4364:	b0 93 63 06 	sts	0x0663, r27
            }
        }

        if (Unity.CurrentTestFailed)
    4368:	80 91 60 06 	lds	r24, 0x0660
    436c:	90 91 61 06 	lds	r25, 0x0661
    4370:	a0 91 62 06 	lds	r26, 0x0662
    4374:	b0 91 63 06 	lds	r27, 0x0663
    4378:	00 97       	sbiw	r24, 0x00	; 0
    437a:	a1 05       	cpc	r26, r1
    437c:	b1 05       	cpc	r27, r1
    437e:	d1 f1       	breq	.+116    	; 0x43f4 <UnityAssertEqualStringArray+0x2ca>
        {
            UnityTestResultsFailBegin(lineNumber);
    4380:	8f 89       	ldd	r24, Y+23	; 0x17
    4382:	98 8d       	ldd	r25, Y+24	; 0x18
    4384:	a9 8d       	ldd	r26, Y+25	; 0x19
    4386:	ba 8d       	ldd	r27, Y+26	; 0x1a
    4388:	bc 01       	movw	r22, r24
    438a:	cd 01       	movw	r24, r26
    438c:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <UnityTestResultsFailBegin>
            if (num_elements > 1)
    4390:	89 89       	ldd	r24, Y+17	; 0x11
    4392:	9a 89       	ldd	r25, Y+18	; 0x12
    4394:	ab 89       	ldd	r26, Y+19	; 0x13
    4396:	bc 89       	ldd	r27, Y+20	; 0x14
    4398:	82 30       	cpi	r24, 0x02	; 2
    439a:	91 05       	cpc	r25, r1
    439c:	a1 05       	cpc	r26, r1
    439e:	b1 05       	cpc	r27, r1
    43a0:	60 f0       	brcs	.+24     	; 0x43ba <UnityAssertEqualStringArray+0x290>
            {
                UnityPrint(UnityStrElement);
    43a2:	8c e6       	ldi	r24, 0x6C	; 108
    43a4:	93 e0       	ldi	r25, 0x03	; 3
    43a6:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
                UnityPrintNumberUnsigned(j);
    43aa:	8d 81       	ldd	r24, Y+5	; 0x05
    43ac:	9e 81       	ldd	r25, Y+6	; 0x06
    43ae:	af 81       	ldd	r26, Y+7	; 0x07
    43b0:	b8 85       	ldd	r27, Y+8	; 0x08
    43b2:	bc 01       	movw	r22, r24
    43b4:	cd 01       	movw	r24, r26
    43b6:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <UnityPrintNumberUnsigned>
            }
            UnityPrintExpectedAndActualStrings(expd, act);
    43ba:	89 85       	ldd	r24, Y+9	; 0x09
    43bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    43be:	2b 85       	ldd	r18, Y+11	; 0x0b
    43c0:	3c 85       	ldd	r19, Y+12	; 0x0c
    43c2:	b9 01       	movw	r22, r18
    43c4:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <UnityPrintExpectedAndActualStrings>
            UnityAddMsgIfSpecified(msg);
    43c8:	8d 89       	ldd	r24, Y+21	; 0x15
    43ca:	9e 89       	ldd	r25, Y+22	; 0x16
    43cc:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <UnityAddMsgIfSpecified>
            UNITY_FAIL_AND_BAIL;
    43d0:	81 e0       	ldi	r24, 0x01	; 1
    43d2:	90 e0       	ldi	r25, 0x00	; 0
    43d4:	a0 e0       	ldi	r26, 0x00	; 0
    43d6:	b0 e0       	ldi	r27, 0x00	; 0
    43d8:	80 93 60 06 	sts	0x0660, r24
    43dc:	90 93 61 06 	sts	0x0661, r25
    43e0:	a0 93 62 06 	sts	0x0662, r26
    43e4:	b0 93 63 06 	sts	0x0663, r27
    43e8:	88 e6       	ldi	r24, 0x68	; 104
    43ea:	96 e0       	ldi	r25, 0x06	; 6
    43ec:	61 e0       	ldi	r22, 0x01	; 1
    43ee:	70 e0       	ldi	r23, 0x00	; 0
    43f0:	0e 94 48 29 	call	0x5290	; 0x5290 <longjmp>
        }
    } while (++j < num_elements);
    43f4:	8d 81       	ldd	r24, Y+5	; 0x05
    43f6:	9e 81       	ldd	r25, Y+6	; 0x06
    43f8:	af 81       	ldd	r26, Y+7	; 0x07
    43fa:	b8 85       	ldd	r27, Y+8	; 0x08
    43fc:	01 96       	adiw	r24, 0x01	; 1
    43fe:	a1 1d       	adc	r26, r1
    4400:	b1 1d       	adc	r27, r1
    4402:	8d 83       	std	Y+5, r24	; 0x05
    4404:	9e 83       	std	Y+6, r25	; 0x06
    4406:	af 83       	std	Y+7, r26	; 0x07
    4408:	b8 87       	std	Y+8, r27	; 0x08
    440a:	2d 81       	ldd	r18, Y+5	; 0x05
    440c:	3e 81       	ldd	r19, Y+6	; 0x06
    440e:	4f 81       	ldd	r20, Y+7	; 0x07
    4410:	58 85       	ldd	r21, Y+8	; 0x08
    4412:	89 89       	ldd	r24, Y+17	; 0x11
    4414:	9a 89       	ldd	r25, Y+18	; 0x12
    4416:	ab 89       	ldd	r26, Y+19	; 0x13
    4418:	bc 89       	ldd	r27, Y+20	; 0x14
    441a:	28 17       	cp	r18, r24
    441c:	39 07       	cpc	r19, r25
    441e:	4a 07       	cpc	r20, r26
    4420:	5b 07       	cpc	r21, r27
    4422:	08 f4       	brcc	.+2      	; 0x4426 <UnityAssertEqualStringArray+0x2fc>
    4424:	22 cf       	rjmp	.-444    	; 0x426a <UnityAssertEqualStringArray+0x140>
    4426:	01 c0       	rjmp	.+2      	; 0x442a <UnityAssertEqualStringArray+0x300>
        UnityPrintPointlessAndBail();
    }

    if ((const void*)expected == (const void*)actual)
    {
        return; /* Both are NULL or same pointer */
    4428:	00 00       	nop
            UnityPrintExpectedAndActualStrings(expd, act);
            UnityAddMsgIfSpecified(msg);
            UNITY_FAIL_AND_BAIL;
        }
    } while (++j < num_elements);
}
    442a:	6b 96       	adiw	r28, 0x1b	; 27
    442c:	0f b6       	in	r0, 0x3f	; 63
    442e:	f8 94       	cli
    4430:	de bf       	out	0x3e, r29	; 62
    4432:	0f be       	out	0x3f, r0	; 63
    4434:	cd bf       	out	0x3d, r28	; 61
    4436:	cf 91       	pop	r28
    4438:	df 91       	pop	r29
    443a:	1f 91       	pop	r17
    443c:	0f 91       	pop	r16
    443e:	ff 90       	pop	r15
    4440:	ef 90       	pop	r14
    4442:	df 90       	pop	r13
    4444:	cf 90       	pop	r12
    4446:	af 90       	pop	r10
    4448:	08 95       	ret

0000444a <UnityAssertEqualMemory>:
                            const UNITY_UINT32 length,
                            const UNITY_UINT32 num_elements,
                            const char* msg,
                            const UNITY_LINE_TYPE lineNumber,
                            const UNITY_FLAGS_T flags)
{
    444a:	8f 92       	push	r8
    444c:	9f 92       	push	r9
    444e:	af 92       	push	r10
    4450:	bf 92       	push	r11
    4452:	cf 92       	push	r12
    4454:	df 92       	push	r13
    4456:	ef 92       	push	r14
    4458:	ff 92       	push	r15
    445a:	0f 93       	push	r16
    445c:	1f 93       	push	r17
    445e:	df 93       	push	r29
    4460:	cf 93       	push	r28
    4462:	cd b7       	in	r28, 0x3d	; 61
    4464:	de b7       	in	r29, 0x3e	; 62
    4466:	6e 97       	sbiw	r28, 0x1e	; 30
    4468:	0f b6       	in	r0, 0x3f	; 63
    446a:	f8 94       	cli
    446c:	de bf       	out	0x3e, r29	; 62
    446e:	0f be       	out	0x3f, r0	; 63
    4470:	cd bf       	out	0x3d, r28	; 61
    4472:	9e 87       	std	Y+14, r25	; 0x0e
    4474:	8d 87       	std	Y+13, r24	; 0x0d
    4476:	78 8b       	std	Y+16, r23	; 0x10
    4478:	6f 87       	std	Y+15, r22	; 0x0f
    447a:	29 8b       	std	Y+17, r18	; 0x11
    447c:	3a 8b       	std	Y+18, r19	; 0x12
    447e:	4b 8b       	std	Y+19, r20	; 0x13
    4480:	5c 8b       	std	Y+20, r21	; 0x14
    4482:	ed 8a       	std	Y+21, r14	; 0x15
    4484:	fe 8a       	std	Y+22, r15	; 0x16
    4486:	0f 8b       	std	Y+23, r16	; 0x17
    4488:	18 8f       	std	Y+24, r17	; 0x18
    448a:	da 8e       	std	Y+26, r13	; 0x1a
    448c:	c9 8e       	std	Y+25, r12	; 0x19
    448e:	8b 8e       	std	Y+27, r8	; 0x1b
    4490:	9c 8e       	std	Y+28, r9	; 0x1c
    4492:	ad 8e       	std	Y+29, r10	; 0x1d
    4494:	be 8e       	std	Y+30, r11	; 0x1e
    UNITY_PTR_ATTRIBUTE const unsigned char* ptr_exp = (UNITY_PTR_ATTRIBUTE const unsigned char*)expected;
    4496:	8d 85       	ldd	r24, Y+13	; 0x0d
    4498:	9e 85       	ldd	r25, Y+14	; 0x0e
    449a:	9a 83       	std	Y+2, r25	; 0x02
    449c:	89 83       	std	Y+1, r24	; 0x01
    UNITY_PTR_ATTRIBUTE const unsigned char* ptr_act = (UNITY_PTR_ATTRIBUTE const unsigned char*)actual;
    449e:	8f 85       	ldd	r24, Y+15	; 0x0f
    44a0:	98 89       	ldd	r25, Y+16	; 0x10
    44a2:	9c 83       	std	Y+4, r25	; 0x04
    44a4:	8b 83       	std	Y+3, r24	; 0x03
    UNITY_UINT32 elements = num_elements;
    44a6:	8d 89       	ldd	r24, Y+21	; 0x15
    44a8:	9e 89       	ldd	r25, Y+22	; 0x16
    44aa:	af 89       	ldd	r26, Y+23	; 0x17
    44ac:	b8 8d       	ldd	r27, Y+24	; 0x18
    44ae:	8d 83       	std	Y+5, r24	; 0x05
    44b0:	9e 83       	std	Y+6, r25	; 0x06
    44b2:	af 83       	std	Y+7, r26	; 0x07
    44b4:	b8 87       	std	Y+8, r27	; 0x08
    UNITY_UINT32 bytes;

    RETURN_IF_FAIL_OR_IGNORE;
    44b6:	80 91 60 06 	lds	r24, 0x0660
    44ba:	90 91 61 06 	lds	r25, 0x0661
    44be:	a0 91 62 06 	lds	r26, 0x0662
    44c2:	b0 91 63 06 	lds	r27, 0x0663
    44c6:	00 97       	sbiw	r24, 0x00	; 0
    44c8:	a1 05       	cpc	r26, r1
    44ca:	b1 05       	cpc	r27, r1
    44cc:	09 f0       	breq	.+2      	; 0x44d0 <UnityAssertEqualMemory+0x86>
    44ce:	45 c1       	rjmp	.+650    	; 0x475a <UnityAssertEqualMemory+0x310>
    44d0:	80 91 64 06 	lds	r24, 0x0664
    44d4:	90 91 65 06 	lds	r25, 0x0665
    44d8:	a0 91 66 06 	lds	r26, 0x0666
    44dc:	b0 91 67 06 	lds	r27, 0x0667
    44e0:	00 97       	sbiw	r24, 0x00	; 0
    44e2:	a1 05       	cpc	r26, r1
    44e4:	b1 05       	cpc	r27, r1
    44e6:	09 f0       	breq	.+2      	; 0x44ea <UnityAssertEqualMemory+0xa0>
    44e8:	38 c1       	rjmp	.+624    	; 0x475a <UnityAssertEqualMemory+0x310>

    if ((elements == 0) || (length == 0))
    44ea:	8d 81       	ldd	r24, Y+5	; 0x05
    44ec:	9e 81       	ldd	r25, Y+6	; 0x06
    44ee:	af 81       	ldd	r26, Y+7	; 0x07
    44f0:	b8 85       	ldd	r27, Y+8	; 0x08
    44f2:	00 97       	sbiw	r24, 0x00	; 0
    44f4:	a1 05       	cpc	r26, r1
    44f6:	b1 05       	cpc	r27, r1
    44f8:	41 f0       	breq	.+16     	; 0x450a <UnityAssertEqualMemory+0xc0>
    44fa:	89 89       	ldd	r24, Y+17	; 0x11
    44fc:	9a 89       	ldd	r25, Y+18	; 0x12
    44fe:	ab 89       	ldd	r26, Y+19	; 0x13
    4500:	bc 89       	ldd	r27, Y+20	; 0x14
    4502:	00 97       	sbiw	r24, 0x00	; 0
    4504:	a1 05       	cpc	r26, r1
    4506:	b1 05       	cpc	r27, r1
    4508:	11 f5       	brne	.+68     	; 0x454e <UnityAssertEqualMemory+0x104>
    {
        UnityPrintPointlessAndBail();
    450a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    450c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    450e:	ad 8d       	ldd	r26, Y+29	; 0x1d
    4510:	be 8d       	ldd	r27, Y+30	; 0x1e
    4512:	bc 01       	movw	r22, r24
    4514:	cd 01       	movw	r24, r26
    4516:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <UnityTestResultsFailBegin>
    451a:	89 ea       	ldi	r24, 0xA9	; 169
    451c:	93 e0       	ldi	r25, 0x03	; 3
    451e:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
    4522:	89 8d       	ldd	r24, Y+25	; 0x19
    4524:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4526:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <UnityAddMsgIfSpecified>
    452a:	81 e0       	ldi	r24, 0x01	; 1
    452c:	90 e0       	ldi	r25, 0x00	; 0
    452e:	a0 e0       	ldi	r26, 0x00	; 0
    4530:	b0 e0       	ldi	r27, 0x00	; 0
    4532:	80 93 60 06 	sts	0x0660, r24
    4536:	90 93 61 06 	sts	0x0661, r25
    453a:	a0 93 62 06 	sts	0x0662, r26
    453e:	b0 93 63 06 	sts	0x0663, r27
    4542:	88 e6       	ldi	r24, 0x68	; 104
    4544:	96 e0       	ldi	r25, 0x06	; 6
    4546:	61 e0       	ldi	r22, 0x01	; 1
    4548:	70 e0       	ldi	r23, 0x00	; 0
    454a:	0e 94 48 29 	call	0x5290	; 0x5290 <longjmp>
    }

    if (expected == actual)
    454e:	2d 85       	ldd	r18, Y+13	; 0x0d
    4550:	3e 85       	ldd	r19, Y+14	; 0x0e
    4552:	8f 85       	ldd	r24, Y+15	; 0x0f
    4554:	98 89       	ldd	r25, Y+16	; 0x10
    4556:	28 17       	cp	r18, r24
    4558:	39 07       	cpc	r19, r25
    455a:	09 f4       	brne	.+2      	; 0x455e <UnityAssertEqualMemory+0x114>
    455c:	fd c0       	rjmp	.+506    	; 0x4758 <UnityAssertEqualMemory+0x30e>
    {
        return; /* Both are NULL or same pointer */
    }

    if (UnityIsOneArrayNull(expected, actual, lineNumber, msg))
    455e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4560:	9e 85       	ldd	r25, Y+14	; 0x0e
    4562:	6f 85       	ldd	r22, Y+15	; 0x0f
    4564:	78 89       	ldd	r23, Y+16	; 0x10
    4566:	2b 8d       	ldd	r18, Y+27	; 0x1b
    4568:	3c 8d       	ldd	r19, Y+28	; 0x1c
    456a:	4d 8d       	ldd	r20, Y+29	; 0x1d
    456c:	5e 8d       	ldd	r21, Y+30	; 0x1e
    456e:	e9 8d       	ldd	r30, Y+25	; 0x19
    4570:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4572:	8f 01       	movw	r16, r30
    4574:	0e 94 7d 10 	call	0x20fa	; 0x20fa <UnityIsOneArrayNull>
    4578:	00 97       	sbiw	r24, 0x00	; 0
    457a:	09 f4       	brne	.+2      	; 0x457e <UnityAssertEqualMemory+0x134>
    457c:	d3 c0       	rjmp	.+422    	; 0x4724 <UnityAssertEqualMemory+0x2da>
    {
        UNITY_FAIL_AND_BAIL;
    457e:	81 e0       	ldi	r24, 0x01	; 1
    4580:	90 e0       	ldi	r25, 0x00	; 0
    4582:	a0 e0       	ldi	r26, 0x00	; 0
    4584:	b0 e0       	ldi	r27, 0x00	; 0
    4586:	80 93 60 06 	sts	0x0660, r24
    458a:	90 93 61 06 	sts	0x0661, r25
    458e:	a0 93 62 06 	sts	0x0662, r26
    4592:	b0 93 63 06 	sts	0x0663, r27
    4596:	88 e6       	ldi	r24, 0x68	; 104
    4598:	96 e0       	ldi	r25, 0x06	; 6
    459a:	61 e0       	ldi	r22, 0x01	; 1
    459c:	70 e0       	ldi	r23, 0x00	; 0
    459e:	0e 94 48 29 	call	0x5290	; 0x5290 <longjmp>
    }

    while (elements--)
    {
        bytes = length;
    45a2:	89 89       	ldd	r24, Y+17	; 0x11
    45a4:	9a 89       	ldd	r25, Y+18	; 0x12
    45a6:	ab 89       	ldd	r26, Y+19	; 0x13
    45a8:	bc 89       	ldd	r27, Y+20	; 0x14
    45aa:	89 87       	std	Y+9, r24	; 0x09
    45ac:	9a 87       	std	Y+10, r25	; 0x0a
    45ae:	ab 87       	std	Y+11, r26	; 0x0b
    45b0:	bc 87       	std	Y+12, r27	; 0x0c
        while (bytes--)
    45b2:	98 c0       	rjmp	.+304    	; 0x46e4 <UnityAssertEqualMemory+0x29a>
        {
            if (*ptr_exp != *ptr_act)
    45b4:	89 81       	ldd	r24, Y+1	; 0x01
    45b6:	9a 81       	ldd	r25, Y+2	; 0x02
    45b8:	fc 01       	movw	r30, r24
    45ba:	20 81       	ld	r18, Z
    45bc:	8b 81       	ldd	r24, Y+3	; 0x03
    45be:	9c 81       	ldd	r25, Y+4	; 0x04
    45c0:	fc 01       	movw	r30, r24
    45c2:	80 81       	ld	r24, Z
    45c4:	28 17       	cp	r18, r24
    45c6:	09 f4       	brne	.+2      	; 0x45ca <UnityAssertEqualMemory+0x180>
    45c8:	83 c0       	rjmp	.+262    	; 0x46d0 <UnityAssertEqualMemory+0x286>
            {
                UnityTestResultsFailBegin(lineNumber);
    45ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45ce:	ad 8d       	ldd	r26, Y+29	; 0x1d
    45d0:	be 8d       	ldd	r27, Y+30	; 0x1e
    45d2:	bc 01       	movw	r22, r24
    45d4:	cd 01       	movw	r24, r26
    45d6:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <UnityTestResultsFailBegin>
                UnityPrint(UnityStrMemory);
    45da:	8d e7       	ldi	r24, 0x7D	; 125
    45dc:	93 e0       	ldi	r25, 0x03	; 3
    45de:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
                if (num_elements > 1)
    45e2:	8d 89       	ldd	r24, Y+21	; 0x15
    45e4:	9e 89       	ldd	r25, Y+22	; 0x16
    45e6:	af 89       	ldd	r26, Y+23	; 0x17
    45e8:	b8 8d       	ldd	r27, Y+24	; 0x18
    45ea:	82 30       	cpi	r24, 0x02	; 2
    45ec:	91 05       	cpc	r25, r1
    45ee:	a1 05       	cpc	r26, r1
    45f0:	b1 05       	cpc	r27, r1
    45f2:	d8 f0       	brcs	.+54     	; 0x462a <UnityAssertEqualMemory+0x1e0>
                {
                    UnityPrint(UnityStrElement);
    45f4:	8c e6       	ldi	r24, 0x6C	; 108
    45f6:	93 e0       	ldi	r25, 0x03	; 3
    45f8:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
                    UnityPrintNumberUnsigned(num_elements - elements - 1);
    45fc:	2d 89       	ldd	r18, Y+21	; 0x15
    45fe:	3e 89       	ldd	r19, Y+22	; 0x16
    4600:	4f 89       	ldd	r20, Y+23	; 0x17
    4602:	58 8d       	ldd	r21, Y+24	; 0x18
    4604:	8d 81       	ldd	r24, Y+5	; 0x05
    4606:	9e 81       	ldd	r25, Y+6	; 0x06
    4608:	af 81       	ldd	r26, Y+7	; 0x07
    460a:	b8 85       	ldd	r27, Y+8	; 0x08
    460c:	79 01       	movw	r14, r18
    460e:	8a 01       	movw	r16, r20
    4610:	e8 1a       	sub	r14, r24
    4612:	f9 0a       	sbc	r15, r25
    4614:	0a 0b       	sbc	r16, r26
    4616:	1b 0b       	sbc	r17, r27
    4618:	d8 01       	movw	r26, r16
    461a:	c7 01       	movw	r24, r14
    461c:	01 97       	sbiw	r24, 0x01	; 1
    461e:	a1 09       	sbc	r26, r1
    4620:	b1 09       	sbc	r27, r1
    4622:	bc 01       	movw	r22, r24
    4624:	cd 01       	movw	r24, r26
    4626:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <UnityPrintNumberUnsigned>
                }
                UnityPrint(UnityStrByte);
    462a:	86 e7       	ldi	r24, 0x76	; 118
    462c:	93 e0       	ldi	r25, 0x03	; 3
    462e:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
                UnityPrintNumberUnsigned(length - bytes - 1);
    4632:	29 89       	ldd	r18, Y+17	; 0x11
    4634:	3a 89       	ldd	r19, Y+18	; 0x12
    4636:	4b 89       	ldd	r20, Y+19	; 0x13
    4638:	5c 89       	ldd	r21, Y+20	; 0x14
    463a:	89 85       	ldd	r24, Y+9	; 0x09
    463c:	9a 85       	ldd	r25, Y+10	; 0x0a
    463e:	ab 85       	ldd	r26, Y+11	; 0x0b
    4640:	bc 85       	ldd	r27, Y+12	; 0x0c
    4642:	79 01       	movw	r14, r18
    4644:	8a 01       	movw	r16, r20
    4646:	e8 1a       	sub	r14, r24
    4648:	f9 0a       	sbc	r15, r25
    464a:	0a 0b       	sbc	r16, r26
    464c:	1b 0b       	sbc	r17, r27
    464e:	d8 01       	movw	r26, r16
    4650:	c7 01       	movw	r24, r14
    4652:	01 97       	sbiw	r24, 0x01	; 1
    4654:	a1 09       	sbc	r26, r1
    4656:	b1 09       	sbc	r27, r1
    4658:	bc 01       	movw	r22, r24
    465a:	cd 01       	movw	r24, r26
    465c:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <UnityPrintNumberUnsigned>
                UnityPrint(UnityStrExpected);
    4660:	87 e2       	ldi	r24, 0x27	; 39
    4662:	93 e0       	ldi	r25, 0x03	; 3
    4664:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
                UnityPrintNumberByStyle(*ptr_exp, UNITY_DISPLAY_STYLE_HEX8);
    4668:	89 81       	ldd	r24, Y+1	; 0x01
    466a:	9a 81       	ldd	r25, Y+2	; 0x02
    466c:	fc 01       	movw	r30, r24
    466e:	80 81       	ld	r24, Z
    4670:	88 2f       	mov	r24, r24
    4672:	90 e0       	ldi	r25, 0x00	; 0
    4674:	a0 e0       	ldi	r26, 0x00	; 0
    4676:	b0 e0       	ldi	r27, 0x00	; 0
    4678:	bc 01       	movw	r22, r24
    467a:	cd 01       	movw	r24, r26
    467c:	41 e4       	ldi	r20, 0x41	; 65
    467e:	0e 94 54 08 	call	0x10a8	; 0x10a8 <UnityPrintNumberByStyle>
                UnityPrint(UnityStrWas);
    4682:	82 e3       	ldi	r24, 0x32	; 50
    4684:	93 e0       	ldi	r25, 0x03	; 3
    4686:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
                UnityPrintNumberByStyle(*ptr_act, UNITY_DISPLAY_STYLE_HEX8);
    468a:	8b 81       	ldd	r24, Y+3	; 0x03
    468c:	9c 81       	ldd	r25, Y+4	; 0x04
    468e:	fc 01       	movw	r30, r24
    4690:	80 81       	ld	r24, Z
    4692:	88 2f       	mov	r24, r24
    4694:	90 e0       	ldi	r25, 0x00	; 0
    4696:	a0 e0       	ldi	r26, 0x00	; 0
    4698:	b0 e0       	ldi	r27, 0x00	; 0
    469a:	bc 01       	movw	r22, r24
    469c:	cd 01       	movw	r24, r26
    469e:	41 e4       	ldi	r20, 0x41	; 65
    46a0:	0e 94 54 08 	call	0x10a8	; 0x10a8 <UnityPrintNumberByStyle>
                UnityAddMsgIfSpecified(msg);
    46a4:	89 8d       	ldd	r24, Y+25	; 0x19
    46a6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    46a8:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <UnityAddMsgIfSpecified>
                UNITY_FAIL_AND_BAIL;
    46ac:	81 e0       	ldi	r24, 0x01	; 1
    46ae:	90 e0       	ldi	r25, 0x00	; 0
    46b0:	a0 e0       	ldi	r26, 0x00	; 0
    46b2:	b0 e0       	ldi	r27, 0x00	; 0
    46b4:	80 93 60 06 	sts	0x0660, r24
    46b8:	90 93 61 06 	sts	0x0661, r25
    46bc:	a0 93 62 06 	sts	0x0662, r26
    46c0:	b0 93 63 06 	sts	0x0663, r27
    46c4:	88 e6       	ldi	r24, 0x68	; 104
    46c6:	96 e0       	ldi	r25, 0x06	; 6
    46c8:	61 e0       	ldi	r22, 0x01	; 1
    46ca:	70 e0       	ldi	r23, 0x00	; 0
    46cc:	0e 94 48 29 	call	0x5290	; 0x5290 <longjmp>
            }
            ptr_exp++;
    46d0:	89 81       	ldd	r24, Y+1	; 0x01
    46d2:	9a 81       	ldd	r25, Y+2	; 0x02
    46d4:	01 96       	adiw	r24, 0x01	; 1
    46d6:	9a 83       	std	Y+2, r25	; 0x02
    46d8:	89 83       	std	Y+1, r24	; 0x01
            ptr_act++;
    46da:	8b 81       	ldd	r24, Y+3	; 0x03
    46dc:	9c 81       	ldd	r25, Y+4	; 0x04
    46de:	01 96       	adiw	r24, 0x01	; 1
    46e0:	9c 83       	std	Y+4, r25	; 0x04
    46e2:	8b 83       	std	Y+3, r24	; 0x03
    }

    while (elements--)
    {
        bytes = length;
        while (bytes--)
    46e4:	21 e0       	ldi	r18, 0x01	; 1
    46e6:	89 85       	ldd	r24, Y+9	; 0x09
    46e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    46ea:	ab 85       	ldd	r26, Y+11	; 0x0b
    46ec:	bc 85       	ldd	r27, Y+12	; 0x0c
    46ee:	00 97       	sbiw	r24, 0x00	; 0
    46f0:	a1 05       	cpc	r26, r1
    46f2:	b1 05       	cpc	r27, r1
    46f4:	09 f4       	brne	.+2      	; 0x46f8 <UnityAssertEqualMemory+0x2ae>
    46f6:	20 e0       	ldi	r18, 0x00	; 0
    46f8:	89 85       	ldd	r24, Y+9	; 0x09
    46fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    46fc:	ab 85       	ldd	r26, Y+11	; 0x0b
    46fe:	bc 85       	ldd	r27, Y+12	; 0x0c
    4700:	01 97       	sbiw	r24, 0x01	; 1
    4702:	a1 09       	sbc	r26, r1
    4704:	b1 09       	sbc	r27, r1
    4706:	89 87       	std	Y+9, r24	; 0x09
    4708:	9a 87       	std	Y+10, r25	; 0x0a
    470a:	ab 87       	std	Y+11, r26	; 0x0b
    470c:	bc 87       	std	Y+12, r27	; 0x0c
    470e:	22 23       	and	r18, r18
    4710:	09 f0       	breq	.+2      	; 0x4714 <UnityAssertEqualMemory+0x2ca>
    4712:	50 cf       	rjmp	.-352    	; 0x45b4 <UnityAssertEqualMemory+0x16a>
                UNITY_FAIL_AND_BAIL;
            }
            ptr_exp++;
            ptr_act++;
        }
        if (flags == UNITY_ARRAY_TO_VAL)
    4714:	8d a5       	ldd	r24, Y+45	; 0x2d
    4716:	88 23       	and	r24, r24
    4718:	31 f4       	brne	.+12     	; 0x4726 <UnityAssertEqualMemory+0x2dc>
        {
            ptr_exp = (UNITY_PTR_ATTRIBUTE const unsigned char*)expected;
    471a:	8d 85       	ldd	r24, Y+13	; 0x0d
    471c:	9e 85       	ldd	r25, Y+14	; 0x0e
    471e:	9a 83       	std	Y+2, r25	; 0x02
    4720:	89 83       	std	Y+1, r24	; 0x01
    4722:	01 c0       	rjmp	.+2      	; 0x4726 <UnityAssertEqualMemory+0x2dc>
    if (UnityIsOneArrayNull(expected, actual, lineNumber, msg))
    {
        UNITY_FAIL_AND_BAIL;
    }

    while (elements--)
    4724:	00 00       	nop
    4726:	21 e0       	ldi	r18, 0x01	; 1
    4728:	8d 81       	ldd	r24, Y+5	; 0x05
    472a:	9e 81       	ldd	r25, Y+6	; 0x06
    472c:	af 81       	ldd	r26, Y+7	; 0x07
    472e:	b8 85       	ldd	r27, Y+8	; 0x08
    4730:	00 97       	sbiw	r24, 0x00	; 0
    4732:	a1 05       	cpc	r26, r1
    4734:	b1 05       	cpc	r27, r1
    4736:	09 f4       	brne	.+2      	; 0x473a <UnityAssertEqualMemory+0x2f0>
    4738:	20 e0       	ldi	r18, 0x00	; 0
    473a:	8d 81       	ldd	r24, Y+5	; 0x05
    473c:	9e 81       	ldd	r25, Y+6	; 0x06
    473e:	af 81       	ldd	r26, Y+7	; 0x07
    4740:	b8 85       	ldd	r27, Y+8	; 0x08
    4742:	01 97       	sbiw	r24, 0x01	; 1
    4744:	a1 09       	sbc	r26, r1
    4746:	b1 09       	sbc	r27, r1
    4748:	8d 83       	std	Y+5, r24	; 0x05
    474a:	9e 83       	std	Y+6, r25	; 0x06
    474c:	af 83       	std	Y+7, r26	; 0x07
    474e:	b8 87       	std	Y+8, r27	; 0x08
    4750:	22 23       	and	r18, r18
    4752:	09 f0       	breq	.+2      	; 0x4756 <UnityAssertEqualMemory+0x30c>
    4754:	26 cf       	rjmp	.-436    	; 0x45a2 <UnityAssertEqualMemory+0x158>
    4756:	01 c0       	rjmp	.+2      	; 0x475a <UnityAssertEqualMemory+0x310>
        UnityPrintPointlessAndBail();
    }

    if (expected == actual)
    {
        return; /* Both are NULL or same pointer */
    4758:	00 00       	nop
        if (flags == UNITY_ARRAY_TO_VAL)
        {
            ptr_exp = (UNITY_PTR_ATTRIBUTE const unsigned char*)expected;
        }
    }
}
    475a:	6e 96       	adiw	r28, 0x1e	; 30
    475c:	0f b6       	in	r0, 0x3f	; 63
    475e:	f8 94       	cli
    4760:	de bf       	out	0x3e, r29	; 62
    4762:	0f be       	out	0x3f, r0	; 63
    4764:	cd bf       	out	0x3d, r28	; 61
    4766:	cf 91       	pop	r28
    4768:	df 91       	pop	r29
    476a:	1f 91       	pop	r17
    476c:	0f 91       	pop	r16
    476e:	ff 90       	pop	r15
    4770:	ef 90       	pop	r14
    4772:	df 90       	pop	r13
    4774:	cf 90       	pop	r12
    4776:	bf 90       	pop	r11
    4778:	af 90       	pop	r10
    477a:	9f 90       	pop	r9
    477c:	8f 90       	pop	r8
    477e:	08 95       	ret

00004780 <UnityNumToPtr>:
    double d;
#endif
} UnityQuickCompare;

UNITY_INTERNAL_PTR UnityNumToPtr(const UNITY_INT num, const UNITY_UINT8 size)
{
    4780:	df 93       	push	r29
    4782:	cf 93       	push	r28
    4784:	00 d0       	rcall	.+0      	; 0x4786 <UnityNumToPtr+0x6>
    4786:	00 d0       	rcall	.+0      	; 0x4788 <UnityNumToPtr+0x8>
    4788:	0f 92       	push	r0
    478a:	cd b7       	in	r28, 0x3d	; 61
    478c:	de b7       	in	r29, 0x3e	; 62
    478e:	69 83       	std	Y+1, r22	; 0x01
    4790:	7a 83       	std	Y+2, r23	; 0x02
    4792:	8b 83       	std	Y+3, r24	; 0x03
    4794:	9c 83       	std	Y+4, r25	; 0x04
    4796:	4d 83       	std	Y+5, r20	; 0x05
    switch(size)
    4798:	8d 81       	ldd	r24, Y+5	; 0x05
    479a:	88 2f       	mov	r24, r24
    479c:	90 e0       	ldi	r25, 0x00	; 0
    479e:	81 30       	cpi	r24, 0x01	; 1
    47a0:	91 05       	cpc	r25, r1
    47a2:	21 f0       	breq	.+8      	; 0x47ac <UnityNumToPtr+0x2c>
    47a4:	82 30       	cpi	r24, 0x02	; 2
    47a6:	91 05       	cpc	r25, r1
    47a8:	39 f0       	breq	.+14     	; 0x47b8 <UnityNumToPtr+0x38>
    47aa:	0f c0       	rjmp	.+30     	; 0x47ca <UnityNumToPtr+0x4a>
    {
        case 1:
            UnityQuickCompare.i8 = (UNITY_INT8)num;
    47ac:	89 81       	ldd	r24, Y+1	; 0x01
    47ae:	80 93 44 05 	sts	0x0544, r24
            return (UNITY_INTERNAL_PTR)(&UnityQuickCompare.i8);
    47b2:	84 e4       	ldi	r24, 0x44	; 68
    47b4:	95 e0       	ldi	r25, 0x05	; 5
    47b6:	17 c0       	rjmp	.+46     	; 0x47e6 <UnityNumToPtr+0x66>

        case 2:
            UnityQuickCompare.i16 = (UNITY_INT16)num;
    47b8:	89 81       	ldd	r24, Y+1	; 0x01
    47ba:	9a 81       	ldd	r25, Y+2	; 0x02
    47bc:	90 93 45 05 	sts	0x0545, r25
    47c0:	80 93 44 05 	sts	0x0544, r24
            return (UNITY_INTERNAL_PTR)(&UnityQuickCompare.i16);
    47c4:	84 e4       	ldi	r24, 0x44	; 68
    47c6:	95 e0       	ldi	r25, 0x05	; 5
    47c8:	0e c0       	rjmp	.+28     	; 0x47e6 <UnityNumToPtr+0x66>
            UnityQuickCompare.i64 = (UNITY_INT64)num;
            return (UNITY_INTERNAL_PTR)(&UnityQuickCompare.i64);
#endif

        default: /* 4 bytes */
            UnityQuickCompare.i32 = (UNITY_INT32)num;
    47ca:	89 81       	ldd	r24, Y+1	; 0x01
    47cc:	9a 81       	ldd	r25, Y+2	; 0x02
    47ce:	ab 81       	ldd	r26, Y+3	; 0x03
    47d0:	bc 81       	ldd	r27, Y+4	; 0x04
    47d2:	80 93 44 05 	sts	0x0544, r24
    47d6:	90 93 45 05 	sts	0x0545, r25
    47da:	a0 93 46 05 	sts	0x0546, r26
    47de:	b0 93 47 05 	sts	0x0547, r27
            return (UNITY_INTERNAL_PTR)(&UnityQuickCompare.i32);
    47e2:	84 e4       	ldi	r24, 0x44	; 68
    47e4:	95 e0       	ldi	r25, 0x05	; 5
    }
}
    47e6:	0f 90       	pop	r0
    47e8:	0f 90       	pop	r0
    47ea:	0f 90       	pop	r0
    47ec:	0f 90       	pop	r0
    47ee:	0f 90       	pop	r0
    47f0:	cf 91       	pop	r28
    47f2:	df 91       	pop	r29
    47f4:	08 95       	ret

000047f6 <UnityFloatToPtr>:

#ifndef UNITY_EXCLUDE_FLOAT
/*-----------------------------------------------*/
UNITY_INTERNAL_PTR UnityFloatToPtr(const float num)
{
    47f6:	df 93       	push	r29
    47f8:	cf 93       	push	r28
    47fa:	00 d0       	rcall	.+0      	; 0x47fc <UnityFloatToPtr+0x6>
    47fc:	00 d0       	rcall	.+0      	; 0x47fe <UnityFloatToPtr+0x8>
    47fe:	cd b7       	in	r28, 0x3d	; 61
    4800:	de b7       	in	r29, 0x3e	; 62
    4802:	69 83       	std	Y+1, r22	; 0x01
    4804:	7a 83       	std	Y+2, r23	; 0x02
    4806:	8b 83       	std	Y+3, r24	; 0x03
    4808:	9c 83       	std	Y+4, r25	; 0x04
    UnityQuickCompare.f = num;
    480a:	89 81       	ldd	r24, Y+1	; 0x01
    480c:	9a 81       	ldd	r25, Y+2	; 0x02
    480e:	ab 81       	ldd	r26, Y+3	; 0x03
    4810:	bc 81       	ldd	r27, Y+4	; 0x04
    4812:	80 93 44 05 	sts	0x0544, r24
    4816:	90 93 45 05 	sts	0x0545, r25
    481a:	a0 93 46 05 	sts	0x0546, r26
    481e:	b0 93 47 05 	sts	0x0547, r27
    return (UNITY_INTERNAL_PTR)(&UnityQuickCompare.f);
    4822:	84 e4       	ldi	r24, 0x44	; 68
    4824:	95 e0       	ldi	r25, 0x05	; 5
}
    4826:	0f 90       	pop	r0
    4828:	0f 90       	pop	r0
    482a:	0f 90       	pop	r0
    482c:	0f 90       	pop	r0
    482e:	cf 91       	pop	r28
    4830:	df 91       	pop	r29
    4832:	08 95       	ret

00004834 <UnityFail>:
 * Control Functions
 *-----------------------------------------------*/

/*-----------------------------------------------*/
void UnityFail(const char* msg, const UNITY_LINE_TYPE line)
{
    4834:	df 93       	push	r29
    4836:	cf 93       	push	r28
    4838:	00 d0       	rcall	.+0      	; 0x483a <UnityFail+0x6>
    483a:	00 d0       	rcall	.+0      	; 0x483c <UnityFail+0x8>
    483c:	00 d0       	rcall	.+0      	; 0x483e <UnityFail+0xa>
    483e:	cd b7       	in	r28, 0x3d	; 61
    4840:	de b7       	in	r29, 0x3e	; 62
    4842:	9a 83       	std	Y+2, r25	; 0x02
    4844:	89 83       	std	Y+1, r24	; 0x01
    4846:	4b 83       	std	Y+3, r20	; 0x03
    4848:	5c 83       	std	Y+4, r21	; 0x04
    484a:	6d 83       	std	Y+5, r22	; 0x05
    484c:	7e 83       	std	Y+6, r23	; 0x06
    RETURN_IF_FAIL_OR_IGNORE;
    484e:	80 91 60 06 	lds	r24, 0x0660
    4852:	90 91 61 06 	lds	r25, 0x0661
    4856:	a0 91 62 06 	lds	r26, 0x0662
    485a:	b0 91 63 06 	lds	r27, 0x0663
    485e:	00 97       	sbiw	r24, 0x00	; 0
    4860:	a1 05       	cpc	r26, r1
    4862:	b1 05       	cpc	r27, r1
    4864:	09 f0       	breq	.+2      	; 0x4868 <UnityFail+0x34>
    4866:	74 c0       	rjmp	.+232    	; 0x4950 <UnityFail+0x11c>
    4868:	80 91 64 06 	lds	r24, 0x0664
    486c:	90 91 65 06 	lds	r25, 0x0665
    4870:	a0 91 66 06 	lds	r26, 0x0666
    4874:	b0 91 67 06 	lds	r27, 0x0667
    4878:	00 97       	sbiw	r24, 0x00	; 0
    487a:	a1 05       	cpc	r26, r1
    487c:	b1 05       	cpc	r27, r1
    487e:	09 f0       	breq	.+2      	; 0x4882 <UnityFail+0x4e>
    4880:	67 c0       	rjmp	.+206    	; 0x4950 <UnityFail+0x11c>

    UnityTestResultsBegin(Unity.TestFile, line);
    4882:	80 91 48 06 	lds	r24, 0x0648
    4886:	90 91 49 06 	lds	r25, 0x0649
    488a:	2b 81       	ldd	r18, Y+3	; 0x03
    488c:	3c 81       	ldd	r19, Y+4	; 0x04
    488e:	4d 81       	ldd	r20, Y+5	; 0x05
    4890:	5e 81       	ldd	r21, Y+6	; 0x06
    4892:	ba 01       	movw	r22, r20
    4894:	a9 01       	movw	r20, r18
    4896:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <UnityTestResultsBegin>
    UnityPrint(UnityStrFail);
    489a:	83 e1       	ldi	r24, 0x13	; 19
    489c:	93 e0       	ldi	r25, 0x03	; 3
    489e:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
    if (msg != NULL)
    48a2:	89 81       	ldd	r24, Y+1	; 0x01
    48a4:	9a 81       	ldd	r25, Y+2	; 0x02
    48a6:	00 97       	sbiw	r24, 0x00	; 0
    48a8:	09 f4       	brne	.+2      	; 0x48ac <UnityFail+0x78>
    48aa:	40 c0       	rjmp	.+128    	; 0x492c <UnityFail+0xf8>
    {
        UNITY_OUTPUT_CHAR(':');
    48ac:	20 91 81 06 	lds	r18, 0x0681
    48b0:	30 91 82 06 	lds	r19, 0x0682
    48b4:	8a e3       	ldi	r24, 0x3A	; 58
    48b6:	90 e0       	ldi	r25, 0x00	; 0
    48b8:	b9 01       	movw	r22, r18
    48ba:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>

#ifndef UNITY_EXCLUDE_DETAILS
        if (Unity.CurrentDetail1)
    48be:	80 91 4c 06 	lds	r24, 0x064C
    48c2:	90 91 4d 06 	lds	r25, 0x064D
    48c6:	00 97       	sbiw	r24, 0x00	; 0
    48c8:	f1 f0       	breq	.+60     	; 0x4906 <UnityFail+0xd2>
        {
            UnityPrint(UnityStrDetail1Name);
    48ca:	8c e0       	ldi	r24, 0x0C	; 12
    48cc:	95 e0       	ldi	r25, 0x05	; 5
    48ce:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
            UnityPrint(Unity.CurrentDetail1);
    48d2:	80 91 4c 06 	lds	r24, 0x064C
    48d6:	90 91 4d 06 	lds	r25, 0x064D
    48da:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
            if (Unity.CurrentDetail2)
    48de:	80 91 4e 06 	lds	r24, 0x064E
    48e2:	90 91 4f 06 	lds	r25, 0x064F
    48e6:	00 97       	sbiw	r24, 0x00	; 0
    48e8:	51 f0       	breq	.+20     	; 0x48fe <UnityFail+0xca>
            {
                UnityPrint(UnityStrDetail2Name);
    48ea:	86 e1       	ldi	r24, 0x16	; 22
    48ec:	95 e0       	ldi	r25, 0x05	; 5
    48ee:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
                UnityPrint(Unity.CurrentDetail2);
    48f2:	80 91 4e 06 	lds	r24, 0x064E
    48f6:	90 91 4f 06 	lds	r25, 0x064F
    48fa:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
            }
            UnityPrint(UnityStrSpacer);
    48fe:	84 e2       	ldi	r24, 0x24	; 36
    4900:	93 e0       	ldi	r25, 0x03	; 3
    4902:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
        }
#endif
        if (msg[0] != ' ')
    4906:	89 81       	ldd	r24, Y+1	; 0x01
    4908:	9a 81       	ldd	r25, Y+2	; 0x02
    490a:	fc 01       	movw	r30, r24
    490c:	80 81       	ld	r24, Z
    490e:	80 32       	cpi	r24, 0x20	; 32
    4910:	49 f0       	breq	.+18     	; 0x4924 <UnityFail+0xf0>
        {
            UNITY_OUTPUT_CHAR(' ');
    4912:	20 91 81 06 	lds	r18, 0x0681
    4916:	30 91 82 06 	lds	r19, 0x0682
    491a:	80 e2       	ldi	r24, 0x20	; 32
    491c:	90 e0       	ldi	r25, 0x00	; 0
    491e:	b9 01       	movw	r22, r18
    4920:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
        }
        UnityPrint(msg);
    4924:	89 81       	ldd	r24, Y+1	; 0x01
    4926:	9a 81       	ldd	r25, Y+2	; 0x02
    4928:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
    }

    UNITY_FAIL_AND_BAIL;
    492c:	81 e0       	ldi	r24, 0x01	; 1
    492e:	90 e0       	ldi	r25, 0x00	; 0
    4930:	a0 e0       	ldi	r26, 0x00	; 0
    4932:	b0 e0       	ldi	r27, 0x00	; 0
    4934:	80 93 60 06 	sts	0x0660, r24
    4938:	90 93 61 06 	sts	0x0661, r25
    493c:	a0 93 62 06 	sts	0x0662, r26
    4940:	b0 93 63 06 	sts	0x0663, r27
    4944:	88 e6       	ldi	r24, 0x68	; 104
    4946:	96 e0       	ldi	r25, 0x06	; 6
    4948:	61 e0       	ldi	r22, 0x01	; 1
    494a:	70 e0       	ldi	r23, 0x00	; 0
    494c:	0e 94 48 29 	call	0x5290	; 0x5290 <longjmp>
}
    4950:	26 96       	adiw	r28, 0x06	; 6
    4952:	0f b6       	in	r0, 0x3f	; 63
    4954:	f8 94       	cli
    4956:	de bf       	out	0x3e, r29	; 62
    4958:	0f be       	out	0x3f, r0	; 63
    495a:	cd bf       	out	0x3d, r28	; 61
    495c:	cf 91       	pop	r28
    495e:	df 91       	pop	r29
    4960:	08 95       	ret

00004962 <UnityIgnore>:

/*-----------------------------------------------*/
void UnityIgnore(const char* msg, const UNITY_LINE_TYPE line)
{
    4962:	df 93       	push	r29
    4964:	cf 93       	push	r28
    4966:	00 d0       	rcall	.+0      	; 0x4968 <UnityIgnore+0x6>
    4968:	00 d0       	rcall	.+0      	; 0x496a <UnityIgnore+0x8>
    496a:	00 d0       	rcall	.+0      	; 0x496c <UnityIgnore+0xa>
    496c:	cd b7       	in	r28, 0x3d	; 61
    496e:	de b7       	in	r29, 0x3e	; 62
    4970:	9a 83       	std	Y+2, r25	; 0x02
    4972:	89 83       	std	Y+1, r24	; 0x01
    4974:	4b 83       	std	Y+3, r20	; 0x03
    4976:	5c 83       	std	Y+4, r21	; 0x04
    4978:	6d 83       	std	Y+5, r22	; 0x05
    497a:	7e 83       	std	Y+6, r23	; 0x06
    RETURN_IF_FAIL_OR_IGNORE;
    497c:	80 91 60 06 	lds	r24, 0x0660
    4980:	90 91 61 06 	lds	r25, 0x0661
    4984:	a0 91 62 06 	lds	r26, 0x0662
    4988:	b0 91 63 06 	lds	r27, 0x0663
    498c:	00 97       	sbiw	r24, 0x00	; 0
    498e:	a1 05       	cpc	r26, r1
    4990:	b1 05       	cpc	r27, r1
    4992:	09 f0       	breq	.+2      	; 0x4996 <UnityIgnore+0x34>
    4994:	48 c0       	rjmp	.+144    	; 0x4a26 <UnityIgnore+0xc4>
    4996:	80 91 64 06 	lds	r24, 0x0664
    499a:	90 91 65 06 	lds	r25, 0x0665
    499e:	a0 91 66 06 	lds	r26, 0x0666
    49a2:	b0 91 67 06 	lds	r27, 0x0667
    49a6:	00 97       	sbiw	r24, 0x00	; 0
    49a8:	a1 05       	cpc	r26, r1
    49aa:	b1 05       	cpc	r27, r1
    49ac:	e1 f5       	brne	.+120    	; 0x4a26 <UnityIgnore+0xc4>

    UnityTestResultsBegin(Unity.TestFile, line);
    49ae:	80 91 48 06 	lds	r24, 0x0648
    49b2:	90 91 49 06 	lds	r25, 0x0649
    49b6:	2b 81       	ldd	r18, Y+3	; 0x03
    49b8:	3c 81       	ldd	r19, Y+4	; 0x04
    49ba:	4d 81       	ldd	r20, Y+5	; 0x05
    49bc:	5e 81       	ldd	r21, Y+6	; 0x06
    49be:	ba 01       	movw	r22, r20
    49c0:	a9 01       	movw	r20, r18
    49c2:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <UnityTestResultsBegin>
    UnityPrint(UnityStrIgnore);
    49c6:	88 e1       	ldi	r24, 0x18	; 24
    49c8:	93 e0       	ldi	r25, 0x03	; 3
    49ca:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
    if (msg != NULL)
    49ce:	89 81       	ldd	r24, Y+1	; 0x01
    49d0:	9a 81       	ldd	r25, Y+2	; 0x02
    49d2:	00 97       	sbiw	r24, 0x00	; 0
    49d4:	b1 f0       	breq	.+44     	; 0x4a02 <UnityIgnore+0xa0>
    {
        UNITY_OUTPUT_CHAR(':');
    49d6:	20 91 81 06 	lds	r18, 0x0681
    49da:	30 91 82 06 	lds	r19, 0x0682
    49de:	8a e3       	ldi	r24, 0x3A	; 58
    49e0:	90 e0       	ldi	r25, 0x00	; 0
    49e2:	b9 01       	movw	r22, r18
    49e4:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
        UNITY_OUTPUT_CHAR(' ');
    49e8:	20 91 81 06 	lds	r18, 0x0681
    49ec:	30 91 82 06 	lds	r19, 0x0682
    49f0:	80 e2       	ldi	r24, 0x20	; 32
    49f2:	90 e0       	ldi	r25, 0x00	; 0
    49f4:	b9 01       	movw	r22, r18
    49f6:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
        UnityPrint(msg);
    49fa:	89 81       	ldd	r24, Y+1	; 0x01
    49fc:	9a 81       	ldd	r25, Y+2	; 0x02
    49fe:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
    }
    UNITY_IGNORE_AND_BAIL;
    4a02:	81 e0       	ldi	r24, 0x01	; 1
    4a04:	90 e0       	ldi	r25, 0x00	; 0
    4a06:	a0 e0       	ldi	r26, 0x00	; 0
    4a08:	b0 e0       	ldi	r27, 0x00	; 0
    4a0a:	80 93 64 06 	sts	0x0664, r24
    4a0e:	90 93 65 06 	sts	0x0665, r25
    4a12:	a0 93 66 06 	sts	0x0666, r26
    4a16:	b0 93 67 06 	sts	0x0667, r27
    4a1a:	88 e6       	ldi	r24, 0x68	; 104
    4a1c:	96 e0       	ldi	r25, 0x06	; 6
    4a1e:	61 e0       	ldi	r22, 0x01	; 1
    4a20:	70 e0       	ldi	r23, 0x00	; 0
    4a22:	0e 94 48 29 	call	0x5290	; 0x5290 <longjmp>
}
    4a26:	26 96       	adiw	r28, 0x06	; 6
    4a28:	0f b6       	in	r0, 0x3f	; 63
    4a2a:	f8 94       	cli
    4a2c:	de bf       	out	0x3e, r29	; 62
    4a2e:	0f be       	out	0x3f, r0	; 63
    4a30:	cd bf       	out	0x3d, r28	; 61
    4a32:	cf 91       	pop	r28
    4a34:	df 91       	pop	r29
    4a36:	08 95       	ret

00004a38 <UnityMessage>:

/*-----------------------------------------------*/
void UnityMessage(const char* msg, const UNITY_LINE_TYPE line)
{
    4a38:	df 93       	push	r29
    4a3a:	cf 93       	push	r28
    4a3c:	00 d0       	rcall	.+0      	; 0x4a3e <UnityMessage+0x6>
    4a3e:	00 d0       	rcall	.+0      	; 0x4a40 <UnityMessage+0x8>
    4a40:	00 d0       	rcall	.+0      	; 0x4a42 <UnityMessage+0xa>
    4a42:	cd b7       	in	r28, 0x3d	; 61
    4a44:	de b7       	in	r29, 0x3e	; 62
    4a46:	9a 83       	std	Y+2, r25	; 0x02
    4a48:	89 83       	std	Y+1, r24	; 0x01
    4a4a:	4b 83       	std	Y+3, r20	; 0x03
    4a4c:	5c 83       	std	Y+4, r21	; 0x04
    4a4e:	6d 83       	std	Y+5, r22	; 0x05
    4a50:	7e 83       	std	Y+6, r23	; 0x06
    UnityTestResultsBegin(Unity.TestFile, line);
    4a52:	80 91 48 06 	lds	r24, 0x0648
    4a56:	90 91 49 06 	lds	r25, 0x0649
    4a5a:	2b 81       	ldd	r18, Y+3	; 0x03
    4a5c:	3c 81       	ldd	r19, Y+4	; 0x04
    4a5e:	4d 81       	ldd	r20, Y+5	; 0x05
    4a60:	5e 81       	ldd	r21, Y+6	; 0x06
    4a62:	ba 01       	movw	r22, r20
    4a64:	a9 01       	movw	r20, r18
    4a66:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <UnityTestResultsBegin>
    UnityPrint("INFO");
    4a6a:	8b e2       	ldi	r24, 0x2B	; 43
    4a6c:	95 e0       	ldi	r25, 0x05	; 5
    4a6e:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
    if (msg != NULL)
    4a72:	89 81       	ldd	r24, Y+1	; 0x01
    4a74:	9a 81       	ldd	r25, Y+2	; 0x02
    4a76:	00 97       	sbiw	r24, 0x00	; 0
    4a78:	b1 f0       	breq	.+44     	; 0x4aa6 <UnityMessage+0x6e>
    {
      UNITY_OUTPUT_CHAR(':');
    4a7a:	20 91 81 06 	lds	r18, 0x0681
    4a7e:	30 91 82 06 	lds	r19, 0x0682
    4a82:	8a e3       	ldi	r24, 0x3A	; 58
    4a84:	90 e0       	ldi	r25, 0x00	; 0
    4a86:	b9 01       	movw	r22, r18
    4a88:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
      UNITY_OUTPUT_CHAR(' ');
    4a8c:	20 91 81 06 	lds	r18, 0x0681
    4a90:	30 91 82 06 	lds	r19, 0x0682
    4a94:	80 e2       	ldi	r24, 0x20	; 32
    4a96:	90 e0       	ldi	r25, 0x00	; 0
    4a98:	b9 01       	movw	r22, r18
    4a9a:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
      UnityPrint(msg);
    4a9e:	89 81       	ldd	r24, Y+1	; 0x01
    4aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    4aa2:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
    }
    UNITY_PRINT_EOL();
    4aa6:	20 91 81 06 	lds	r18, 0x0681
    4aaa:	30 91 82 06 	lds	r19, 0x0682
    4aae:	8a e0       	ldi	r24, 0x0A	; 10
    4ab0:	90 e0       	ldi	r25, 0x00	; 0
    4ab2:	b9 01       	movw	r22, r18
    4ab4:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
}
    4ab8:	26 96       	adiw	r28, 0x06	; 6
    4aba:	0f b6       	in	r0, 0x3f	; 63
    4abc:	f8 94       	cli
    4abe:	de bf       	out	0x3e, r29	; 62
    4ac0:	0f be       	out	0x3f, r0	; 63
    4ac2:	cd bf       	out	0x3d, r28	; 61
    4ac4:	cf 91       	pop	r28
    4ac6:	df 91       	pop	r29
    4ac8:	08 95       	ret

00004aca <UnityDefaultTestRun>:

/*-----------------------------------------------*/
void UnityDefaultTestRun(UnityTestFunction Func, const char* FuncName, const int FuncLineNum)
{
    4aca:	df 93       	push	r29
    4acc:	cf 93       	push	r28
    4ace:	00 d0       	rcall	.+0      	; 0x4ad0 <UnityDefaultTestRun+0x6>
    4ad0:	00 d0       	rcall	.+0      	; 0x4ad2 <UnityDefaultTestRun+0x8>
    4ad2:	00 d0       	rcall	.+0      	; 0x4ad4 <UnityDefaultTestRun+0xa>
    4ad4:	cd b7       	in	r28, 0x3d	; 61
    4ad6:	de b7       	in	r29, 0x3e	; 62
    4ad8:	9a 83       	std	Y+2, r25	; 0x02
    4ada:	89 83       	std	Y+1, r24	; 0x01
    4adc:	7c 83       	std	Y+4, r23	; 0x04
    4ade:	6b 83       	std	Y+3, r22	; 0x03
    4ae0:	5e 83       	std	Y+6, r21	; 0x06
    4ae2:	4d 83       	std	Y+5, r20	; 0x05
    Unity.CurrentTestName = FuncName;
    4ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    4ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    4ae8:	90 93 4b 06 	sts	0x064B, r25
    4aec:	80 93 4a 06 	sts	0x064A, r24
    Unity.CurrentTestLineNumber = (UNITY_LINE_TYPE)FuncLineNum;
    4af0:	8d 81       	ldd	r24, Y+5	; 0x05
    4af2:	9e 81       	ldd	r25, Y+6	; 0x06
    4af4:	aa 27       	eor	r26, r26
    4af6:	97 fd       	sbrc	r25, 7
    4af8:	a0 95       	com	r26
    4afa:	ba 2f       	mov	r27, r26
    4afc:	80 93 50 06 	sts	0x0650, r24
    4b00:	90 93 51 06 	sts	0x0651, r25
    4b04:	a0 93 52 06 	sts	0x0652, r26
    4b08:	b0 93 53 06 	sts	0x0653, r27
    Unity.NumberOfTests++;
    4b0c:	80 91 54 06 	lds	r24, 0x0654
    4b10:	90 91 55 06 	lds	r25, 0x0655
    4b14:	a0 91 56 06 	lds	r26, 0x0656
    4b18:	b0 91 57 06 	lds	r27, 0x0657
    4b1c:	01 96       	adiw	r24, 0x01	; 1
    4b1e:	a1 1d       	adc	r26, r1
    4b20:	b1 1d       	adc	r27, r1
    4b22:	80 93 54 06 	sts	0x0654, r24
    4b26:	90 93 55 06 	sts	0x0655, r25
    4b2a:	a0 93 56 06 	sts	0x0656, r26
    4b2e:	b0 93 57 06 	sts	0x0657, r27
    UNITY_CLR_DETAILS();
    4b32:	10 92 4d 06 	sts	0x064D, r1
    4b36:	10 92 4c 06 	sts	0x064C, r1
    4b3a:	10 92 4f 06 	sts	0x064F, r1
    4b3e:	10 92 4e 06 	sts	0x064E, r1
    UNITY_EXEC_TIME_START();
    if (TEST_PROTECT())
    4b42:	88 e6       	ldi	r24, 0x68	; 104
    4b44:	96 e0       	ldi	r25, 0x06	; 6
    4b46:	0e 94 28 29 	call	0x5250	; 0x5250 <setjmp>
    4b4a:	00 97       	sbiw	r24, 0x00	; 0
    4b4c:	31 f4       	brne	.+12     	; 0x4b5a <UnityDefaultTestRun+0x90>
    {
        setUp();
    4b4e:	0e 94 18 06 	call	0xc30	; 0xc30 <setUp>
        Func();
    4b52:	89 81       	ldd	r24, Y+1	; 0x01
    4b54:	9a 81       	ldd	r25, Y+2	; 0x02
    4b56:	fc 01       	movw	r30, r24
    4b58:	09 95       	icall
    }
    if (TEST_PROTECT())
    4b5a:	88 e6       	ldi	r24, 0x68	; 104
    4b5c:	96 e0       	ldi	r25, 0x06	; 6
    4b5e:	0e 94 28 29 	call	0x5250	; 0x5250 <setjmp>
    4b62:	00 97       	sbiw	r24, 0x00	; 0
    4b64:	11 f4       	brne	.+4      	; 0x4b6a <UnityDefaultTestRun+0xa0>
    {
        tearDown();
    4b66:	0e 94 1f 06 	call	0xc3e	; 0xc3e <tearDown>
    }
    UNITY_EXEC_TIME_STOP();
    UnityConcludeTest();
    4b6a:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <UnityConcludeTest>
}
    4b6e:	26 96       	adiw	r28, 0x06	; 6
    4b70:	0f b6       	in	r0, 0x3f	; 63
    4b72:	f8 94       	cli
    4b74:	de bf       	out	0x3e, r29	; 62
    4b76:	0f be       	out	0x3f, r0	; 63
    4b78:	cd bf       	out	0x3d, r28	; 61
    4b7a:	cf 91       	pop	r28
    4b7c:	df 91       	pop	r29
    4b7e:	08 95       	ret

00004b80 <UnityBegin>:

/*-----------------------------------------------*/
void UnityBegin(const char* filename)
{
    4b80:	df 93       	push	r29
    4b82:	cf 93       	push	r28
    4b84:	00 d0       	rcall	.+0      	; 0x4b86 <UnityBegin+0x6>
    4b86:	cd b7       	in	r28, 0x3d	; 61
    4b88:	de b7       	in	r29, 0x3e	; 62
    4b8a:	9a 83       	std	Y+2, r25	; 0x02
    4b8c:	89 83       	std	Y+1, r24	; 0x01
    Unity.TestFile = filename;
    4b8e:	89 81       	ldd	r24, Y+1	; 0x01
    4b90:	9a 81       	ldd	r25, Y+2	; 0x02
    4b92:	90 93 49 06 	sts	0x0649, r25
    4b96:	80 93 48 06 	sts	0x0648, r24
    Unity.CurrentTestName = NULL;
    4b9a:	10 92 4b 06 	sts	0x064B, r1
    4b9e:	10 92 4a 06 	sts	0x064A, r1
    Unity.CurrentTestLineNumber = 0;
    4ba2:	10 92 50 06 	sts	0x0650, r1
    4ba6:	10 92 51 06 	sts	0x0651, r1
    4baa:	10 92 52 06 	sts	0x0652, r1
    4bae:	10 92 53 06 	sts	0x0653, r1
    Unity.NumberOfTests = 0;
    4bb2:	10 92 54 06 	sts	0x0654, r1
    4bb6:	10 92 55 06 	sts	0x0655, r1
    4bba:	10 92 56 06 	sts	0x0656, r1
    4bbe:	10 92 57 06 	sts	0x0657, r1
    Unity.TestFailures = 0;
    4bc2:	10 92 58 06 	sts	0x0658, r1
    4bc6:	10 92 59 06 	sts	0x0659, r1
    4bca:	10 92 5a 06 	sts	0x065A, r1
    4bce:	10 92 5b 06 	sts	0x065B, r1
    Unity.TestIgnores = 0;
    4bd2:	10 92 5c 06 	sts	0x065C, r1
    4bd6:	10 92 5d 06 	sts	0x065D, r1
    4bda:	10 92 5e 06 	sts	0x065E, r1
    4bde:	10 92 5f 06 	sts	0x065F, r1
    Unity.CurrentTestFailed = 0;
    4be2:	10 92 60 06 	sts	0x0660, r1
    4be6:	10 92 61 06 	sts	0x0661, r1
    4bea:	10 92 62 06 	sts	0x0662, r1
    4bee:	10 92 63 06 	sts	0x0663, r1
    Unity.CurrentTestIgnored = 0;
    4bf2:	10 92 64 06 	sts	0x0664, r1
    4bf6:	10 92 65 06 	sts	0x0665, r1
    4bfa:	10 92 66 06 	sts	0x0666, r1
    4bfe:	10 92 67 06 	sts	0x0667, r1

    UNITY_CLR_DETAILS();
    4c02:	10 92 4d 06 	sts	0x064D, r1
    4c06:	10 92 4c 06 	sts	0x064C, r1
    4c0a:	10 92 4f 06 	sts	0x064F, r1
    4c0e:	10 92 4e 06 	sts	0x064E, r1
    UNITY_OUTPUT_START();
}
    4c12:	0f 90       	pop	r0
    4c14:	0f 90       	pop	r0
    4c16:	cf 91       	pop	r28
    4c18:	df 91       	pop	r29
    4c1a:	08 95       	ret

00004c1c <UnityEnd>:

/*-----------------------------------------------*/
int UnityEnd(void)
{
    4c1c:	df 93       	push	r29
    4c1e:	cf 93       	push	r28
    4c20:	cd b7       	in	r28, 0x3d	; 61
    4c22:	de b7       	in	r29, 0x3e	; 62
    UNITY_PRINT_EOL();
    4c24:	20 91 81 06 	lds	r18, 0x0681
    4c28:	30 91 82 06 	lds	r19, 0x0682
    4c2c:	8a e0       	ldi	r24, 0x0A	; 10
    4c2e:	90 e0       	ldi	r25, 0x00	; 0
    4c30:	b9 01       	movw	r22, r18
    4c32:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
    UnityPrint(UnityStrBreaker);
    4c36:	87 ed       	ldi	r24, 0xD7	; 215
    4c38:	94 e0       	ldi	r25, 0x04	; 4
    4c3a:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
    UNITY_PRINT_EOL();
    4c3e:	20 91 81 06 	lds	r18, 0x0681
    4c42:	30 91 82 06 	lds	r19, 0x0682
    4c46:	8a e0       	ldi	r24, 0x0A	; 10
    4c48:	90 e0       	ldi	r25, 0x00	; 0
    4c4a:	b9 01       	movw	r22, r18
    4c4c:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
    UnityPrintNumber((UNITY_INT)(Unity.NumberOfTests));
    4c50:	80 91 54 06 	lds	r24, 0x0654
    4c54:	90 91 55 06 	lds	r25, 0x0655
    4c58:	a0 91 56 06 	lds	r26, 0x0656
    4c5c:	b0 91 57 06 	lds	r27, 0x0657
    4c60:	bc 01       	movw	r22, r24
    4c62:	cd 01       	movw	r24, r26
    4c64:	0e 94 a6 08 	call	0x114c	; 0x114c <UnityPrintNumber>
    UnityPrint(UnityStrResultsTests);
    4c68:	8f ee       	ldi	r24, 0xEF	; 239
    4c6a:	94 e0       	ldi	r25, 0x04	; 4
    4c6c:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
    UnityPrintNumber((UNITY_INT)(Unity.TestFailures));
    4c70:	80 91 58 06 	lds	r24, 0x0658
    4c74:	90 91 59 06 	lds	r25, 0x0659
    4c78:	a0 91 5a 06 	lds	r26, 0x065A
    4c7c:	b0 91 5b 06 	lds	r27, 0x065B
    4c80:	bc 01       	movw	r22, r24
    4c82:	cd 01       	movw	r24, r26
    4c84:	0e 94 a6 08 	call	0x114c	; 0x114c <UnityPrintNumber>
    UnityPrint(UnityStrResultsFailures);
    4c88:	87 ef       	ldi	r24, 0xF7	; 247
    4c8a:	94 e0       	ldi	r25, 0x04	; 4
    4c8c:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
    UnityPrintNumber((UNITY_INT)(Unity.TestIgnores));
    4c90:	80 91 5c 06 	lds	r24, 0x065C
    4c94:	90 91 5d 06 	lds	r25, 0x065D
    4c98:	a0 91 5e 06 	lds	r26, 0x065E
    4c9c:	b0 91 5f 06 	lds	r27, 0x065F
    4ca0:	bc 01       	movw	r22, r24
    4ca2:	cd 01       	movw	r24, r26
    4ca4:	0e 94 a6 08 	call	0x114c	; 0x114c <UnityPrintNumber>
    UnityPrint(UnityStrResultsIgnored);
    4ca8:	82 e0       	ldi	r24, 0x02	; 2
    4caa:	95 e0       	ldi	r25, 0x05	; 5
    4cac:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
    UNITY_PRINT_EOL();
    4cb0:	20 91 81 06 	lds	r18, 0x0681
    4cb4:	30 91 82 06 	lds	r19, 0x0682
    4cb8:	8a e0       	ldi	r24, 0x0A	; 10
    4cba:	90 e0       	ldi	r25, 0x00	; 0
    4cbc:	b9 01       	movw	r22, r18
    4cbe:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
    if (Unity.TestFailures == 0U)
    4cc2:	80 91 58 06 	lds	r24, 0x0658
    4cc6:	90 91 59 06 	lds	r25, 0x0659
    4cca:	a0 91 5a 06 	lds	r26, 0x065A
    4cce:	b0 91 5b 06 	lds	r27, 0x065B
    4cd2:	00 97       	sbiw	r24, 0x00	; 0
    4cd4:	a1 05       	cpc	r26, r1
    4cd6:	b1 05       	cpc	r27, r1
    4cd8:	29 f4       	brne	.+10     	; 0x4ce4 <UnityEnd+0xc8>
    {
        UnityPrint(UnityStrOk);
    4cda:	8b e0       	ldi	r24, 0x0B	; 11
    4cdc:	93 e0       	ldi	r25, 0x03	; 3
    4cde:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
    4ce2:	04 c0       	rjmp	.+8      	; 0x4cec <UnityEnd+0xd0>
    }
    else
    {
        UnityPrint(UnityStrFail);
    4ce4:	83 e1       	ldi	r24, 0x13	; 19
    4ce6:	93 e0       	ldi	r25, 0x03	; 3
    4ce8:	0e 94 7d 07 	call	0xefa	; 0xefa <UnityPrint>
#ifdef UNITY_DIFFERENTIATE_FINAL_FAIL
        UNITY_OUTPUT_CHAR('E'); UNITY_OUTPUT_CHAR('D');
#endif
    }
    UNITY_PRINT_EOL();
    4cec:	20 91 81 06 	lds	r18, 0x0681
    4cf0:	30 91 82 06 	lds	r19, 0x0682
    4cf4:	8a e0       	ldi	r24, 0x0A	; 10
    4cf6:	90 e0       	ldi	r25, 0x00	; 0
    4cf8:	b9 01       	movw	r22, r18
    4cfa:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
    UNITY_FLUSH_CALL();
    UNITY_OUTPUT_COMPLETE();
    return (int)(Unity.TestFailures);
    4cfe:	80 91 58 06 	lds	r24, 0x0658
    4d02:	90 91 59 06 	lds	r25, 0x0659
    4d06:	a0 91 5a 06 	lds	r26, 0x065A
    4d0a:	b0 91 5b 06 	lds	r27, 0x065B
}
    4d0e:	cf 91       	pop	r28
    4d10:	df 91       	pop	r29
    4d12:	08 95       	ret

00004d14 <__subsf3>:
    4d14:	50 58       	subi	r21, 0x80	; 128

00004d16 <__addsf3>:
    4d16:	bb 27       	eor	r27, r27
    4d18:	aa 27       	eor	r26, r26
    4d1a:	0e d0       	rcall	.+28     	; 0x4d38 <__addsf3x>
    4d1c:	75 c1       	rjmp	.+746    	; 0x5008 <__fp_round>
    4d1e:	66 d1       	rcall	.+716    	; 0x4fec <__fp_pscA>
    4d20:	30 f0       	brcs	.+12     	; 0x4d2e <__addsf3+0x18>
    4d22:	6b d1       	rcall	.+726    	; 0x4ffa <__fp_pscB>
    4d24:	20 f0       	brcs	.+8      	; 0x4d2e <__addsf3+0x18>
    4d26:	31 f4       	brne	.+12     	; 0x4d34 <__addsf3+0x1e>
    4d28:	9f 3f       	cpi	r25, 0xFF	; 255
    4d2a:	11 f4       	brne	.+4      	; 0x4d30 <__addsf3+0x1a>
    4d2c:	1e f4       	brtc	.+6      	; 0x4d34 <__addsf3+0x1e>
    4d2e:	5b c1       	rjmp	.+694    	; 0x4fe6 <__fp_nan>
    4d30:	0e f4       	brtc	.+2      	; 0x4d34 <__addsf3+0x1e>
    4d32:	e0 95       	com	r30
    4d34:	e7 fb       	bst	r30, 7
    4d36:	51 c1       	rjmp	.+674    	; 0x4fda <__fp_inf>

00004d38 <__addsf3x>:
    4d38:	e9 2f       	mov	r30, r25
    4d3a:	77 d1       	rcall	.+750    	; 0x502a <__fp_split3>
    4d3c:	80 f3       	brcs	.-32     	; 0x4d1e <__addsf3+0x8>
    4d3e:	ba 17       	cp	r27, r26
    4d40:	62 07       	cpc	r22, r18
    4d42:	73 07       	cpc	r23, r19
    4d44:	84 07       	cpc	r24, r20
    4d46:	95 07       	cpc	r25, r21
    4d48:	18 f0       	brcs	.+6      	; 0x4d50 <__addsf3x+0x18>
    4d4a:	71 f4       	brne	.+28     	; 0x4d68 <__addsf3x+0x30>
    4d4c:	9e f5       	brtc	.+102    	; 0x4db4 <__addsf3x+0x7c>
    4d4e:	8f c1       	rjmp	.+798    	; 0x506e <__fp_zero>
    4d50:	0e f4       	brtc	.+2      	; 0x4d54 <__addsf3x+0x1c>
    4d52:	e0 95       	com	r30
    4d54:	0b 2e       	mov	r0, r27
    4d56:	ba 2f       	mov	r27, r26
    4d58:	a0 2d       	mov	r26, r0
    4d5a:	0b 01       	movw	r0, r22
    4d5c:	b9 01       	movw	r22, r18
    4d5e:	90 01       	movw	r18, r0
    4d60:	0c 01       	movw	r0, r24
    4d62:	ca 01       	movw	r24, r20
    4d64:	a0 01       	movw	r20, r0
    4d66:	11 24       	eor	r1, r1
    4d68:	ff 27       	eor	r31, r31
    4d6a:	59 1b       	sub	r21, r25
    4d6c:	99 f0       	breq	.+38     	; 0x4d94 <__addsf3x+0x5c>
    4d6e:	59 3f       	cpi	r21, 0xF9	; 249
    4d70:	50 f4       	brcc	.+20     	; 0x4d86 <__addsf3x+0x4e>
    4d72:	50 3e       	cpi	r21, 0xE0	; 224
    4d74:	68 f1       	brcs	.+90     	; 0x4dd0 <__addsf3x+0x98>
    4d76:	1a 16       	cp	r1, r26
    4d78:	f0 40       	sbci	r31, 0x00	; 0
    4d7a:	a2 2f       	mov	r26, r18
    4d7c:	23 2f       	mov	r18, r19
    4d7e:	34 2f       	mov	r19, r20
    4d80:	44 27       	eor	r20, r20
    4d82:	58 5f       	subi	r21, 0xF8	; 248
    4d84:	f3 cf       	rjmp	.-26     	; 0x4d6c <__addsf3x+0x34>
    4d86:	46 95       	lsr	r20
    4d88:	37 95       	ror	r19
    4d8a:	27 95       	ror	r18
    4d8c:	a7 95       	ror	r26
    4d8e:	f0 40       	sbci	r31, 0x00	; 0
    4d90:	53 95       	inc	r21
    4d92:	c9 f7       	brne	.-14     	; 0x4d86 <__addsf3x+0x4e>
    4d94:	7e f4       	brtc	.+30     	; 0x4db4 <__addsf3x+0x7c>
    4d96:	1f 16       	cp	r1, r31
    4d98:	ba 0b       	sbc	r27, r26
    4d9a:	62 0b       	sbc	r22, r18
    4d9c:	73 0b       	sbc	r23, r19
    4d9e:	84 0b       	sbc	r24, r20
    4da0:	ba f0       	brmi	.+46     	; 0x4dd0 <__addsf3x+0x98>
    4da2:	91 50       	subi	r25, 0x01	; 1
    4da4:	a1 f0       	breq	.+40     	; 0x4dce <__addsf3x+0x96>
    4da6:	ff 0f       	add	r31, r31
    4da8:	bb 1f       	adc	r27, r27
    4daa:	66 1f       	adc	r22, r22
    4dac:	77 1f       	adc	r23, r23
    4dae:	88 1f       	adc	r24, r24
    4db0:	c2 f7       	brpl	.-16     	; 0x4da2 <__addsf3x+0x6a>
    4db2:	0e c0       	rjmp	.+28     	; 0x4dd0 <__addsf3x+0x98>
    4db4:	ba 0f       	add	r27, r26
    4db6:	62 1f       	adc	r22, r18
    4db8:	73 1f       	adc	r23, r19
    4dba:	84 1f       	adc	r24, r20
    4dbc:	48 f4       	brcc	.+18     	; 0x4dd0 <__addsf3x+0x98>
    4dbe:	87 95       	ror	r24
    4dc0:	77 95       	ror	r23
    4dc2:	67 95       	ror	r22
    4dc4:	b7 95       	ror	r27
    4dc6:	f7 95       	ror	r31
    4dc8:	9e 3f       	cpi	r25, 0xFE	; 254
    4dca:	08 f0       	brcs	.+2      	; 0x4dce <__addsf3x+0x96>
    4dcc:	b3 cf       	rjmp	.-154    	; 0x4d34 <__addsf3+0x1e>
    4dce:	93 95       	inc	r25
    4dd0:	88 0f       	add	r24, r24
    4dd2:	08 f0       	brcs	.+2      	; 0x4dd6 <__addsf3x+0x9e>
    4dd4:	99 27       	eor	r25, r25
    4dd6:	ee 0f       	add	r30, r30
    4dd8:	97 95       	ror	r25
    4dda:	87 95       	ror	r24
    4ddc:	08 95       	ret

00004dde <__cmpsf2>:
    4dde:	d9 d0       	rcall	.+434    	; 0x4f92 <__fp_cmp>
    4de0:	08 f4       	brcc	.+2      	; 0x4de4 <__cmpsf2+0x6>
    4de2:	81 e0       	ldi	r24, 0x01	; 1
    4de4:	08 95       	ret

00004de6 <__divsf3>:
    4de6:	0c d0       	rcall	.+24     	; 0x4e00 <__divsf3x>
    4de8:	0f c1       	rjmp	.+542    	; 0x5008 <__fp_round>
    4dea:	07 d1       	rcall	.+526    	; 0x4ffa <__fp_pscB>
    4dec:	40 f0       	brcs	.+16     	; 0x4dfe <__divsf3+0x18>
    4dee:	fe d0       	rcall	.+508    	; 0x4fec <__fp_pscA>
    4df0:	30 f0       	brcs	.+12     	; 0x4dfe <__divsf3+0x18>
    4df2:	21 f4       	brne	.+8      	; 0x4dfc <__divsf3+0x16>
    4df4:	5f 3f       	cpi	r21, 0xFF	; 255
    4df6:	19 f0       	breq	.+6      	; 0x4dfe <__divsf3+0x18>
    4df8:	f0 c0       	rjmp	.+480    	; 0x4fda <__fp_inf>
    4dfa:	51 11       	cpse	r21, r1
    4dfc:	39 c1       	rjmp	.+626    	; 0x5070 <__fp_szero>
    4dfe:	f3 c0       	rjmp	.+486    	; 0x4fe6 <__fp_nan>

00004e00 <__divsf3x>:
    4e00:	14 d1       	rcall	.+552    	; 0x502a <__fp_split3>
    4e02:	98 f3       	brcs	.-26     	; 0x4dea <__divsf3+0x4>

00004e04 <__divsf3_pse>:
    4e04:	99 23       	and	r25, r25
    4e06:	c9 f3       	breq	.-14     	; 0x4dfa <__divsf3+0x14>
    4e08:	55 23       	and	r21, r21
    4e0a:	b1 f3       	breq	.-20     	; 0x4df8 <__divsf3+0x12>
    4e0c:	95 1b       	sub	r25, r21
    4e0e:	55 0b       	sbc	r21, r21
    4e10:	bb 27       	eor	r27, r27
    4e12:	aa 27       	eor	r26, r26
    4e14:	62 17       	cp	r22, r18
    4e16:	73 07       	cpc	r23, r19
    4e18:	84 07       	cpc	r24, r20
    4e1a:	38 f0       	brcs	.+14     	; 0x4e2a <__divsf3_pse+0x26>
    4e1c:	9f 5f       	subi	r25, 0xFF	; 255
    4e1e:	5f 4f       	sbci	r21, 0xFF	; 255
    4e20:	22 0f       	add	r18, r18
    4e22:	33 1f       	adc	r19, r19
    4e24:	44 1f       	adc	r20, r20
    4e26:	aa 1f       	adc	r26, r26
    4e28:	a9 f3       	breq	.-22     	; 0x4e14 <__divsf3_pse+0x10>
    4e2a:	33 d0       	rcall	.+102    	; 0x4e92 <__divsf3_pse+0x8e>
    4e2c:	0e 2e       	mov	r0, r30
    4e2e:	3a f0       	brmi	.+14     	; 0x4e3e <__divsf3_pse+0x3a>
    4e30:	e0 e8       	ldi	r30, 0x80	; 128
    4e32:	30 d0       	rcall	.+96     	; 0x4e94 <__divsf3_pse+0x90>
    4e34:	91 50       	subi	r25, 0x01	; 1
    4e36:	50 40       	sbci	r21, 0x00	; 0
    4e38:	e6 95       	lsr	r30
    4e3a:	00 1c       	adc	r0, r0
    4e3c:	ca f7       	brpl	.-14     	; 0x4e30 <__divsf3_pse+0x2c>
    4e3e:	29 d0       	rcall	.+82     	; 0x4e92 <__divsf3_pse+0x8e>
    4e40:	fe 2f       	mov	r31, r30
    4e42:	27 d0       	rcall	.+78     	; 0x4e92 <__divsf3_pse+0x8e>
    4e44:	66 0f       	add	r22, r22
    4e46:	77 1f       	adc	r23, r23
    4e48:	88 1f       	adc	r24, r24
    4e4a:	bb 1f       	adc	r27, r27
    4e4c:	26 17       	cp	r18, r22
    4e4e:	37 07       	cpc	r19, r23
    4e50:	48 07       	cpc	r20, r24
    4e52:	ab 07       	cpc	r26, r27
    4e54:	b0 e8       	ldi	r27, 0x80	; 128
    4e56:	09 f0       	breq	.+2      	; 0x4e5a <__divsf3_pse+0x56>
    4e58:	bb 0b       	sbc	r27, r27
    4e5a:	80 2d       	mov	r24, r0
    4e5c:	bf 01       	movw	r22, r30
    4e5e:	ff 27       	eor	r31, r31
    4e60:	93 58       	subi	r25, 0x83	; 131
    4e62:	5f 4f       	sbci	r21, 0xFF	; 255
    4e64:	2a f0       	brmi	.+10     	; 0x4e70 <__divsf3_pse+0x6c>
    4e66:	9e 3f       	cpi	r25, 0xFE	; 254
    4e68:	51 05       	cpc	r21, r1
    4e6a:	68 f0       	brcs	.+26     	; 0x4e86 <__divsf3_pse+0x82>
    4e6c:	b6 c0       	rjmp	.+364    	; 0x4fda <__fp_inf>
    4e6e:	00 c1       	rjmp	.+512    	; 0x5070 <__fp_szero>
    4e70:	5f 3f       	cpi	r21, 0xFF	; 255
    4e72:	ec f3       	brlt	.-6      	; 0x4e6e <__divsf3_pse+0x6a>
    4e74:	98 3e       	cpi	r25, 0xE8	; 232
    4e76:	dc f3       	brlt	.-10     	; 0x4e6e <__divsf3_pse+0x6a>
    4e78:	86 95       	lsr	r24
    4e7a:	77 95       	ror	r23
    4e7c:	67 95       	ror	r22
    4e7e:	b7 95       	ror	r27
    4e80:	f7 95       	ror	r31
    4e82:	9f 5f       	subi	r25, 0xFF	; 255
    4e84:	c9 f7       	brne	.-14     	; 0x4e78 <__divsf3_pse+0x74>
    4e86:	88 0f       	add	r24, r24
    4e88:	91 1d       	adc	r25, r1
    4e8a:	96 95       	lsr	r25
    4e8c:	87 95       	ror	r24
    4e8e:	97 f9       	bld	r25, 7
    4e90:	08 95       	ret
    4e92:	e1 e0       	ldi	r30, 0x01	; 1
    4e94:	66 0f       	add	r22, r22
    4e96:	77 1f       	adc	r23, r23
    4e98:	88 1f       	adc	r24, r24
    4e9a:	bb 1f       	adc	r27, r27
    4e9c:	62 17       	cp	r22, r18
    4e9e:	73 07       	cpc	r23, r19
    4ea0:	84 07       	cpc	r24, r20
    4ea2:	ba 07       	cpc	r27, r26
    4ea4:	20 f0       	brcs	.+8      	; 0x4eae <__divsf3_pse+0xaa>
    4ea6:	62 1b       	sub	r22, r18
    4ea8:	73 0b       	sbc	r23, r19
    4eaa:	84 0b       	sbc	r24, r20
    4eac:	ba 0b       	sbc	r27, r26
    4eae:	ee 1f       	adc	r30, r30
    4eb0:	88 f7       	brcc	.-30     	; 0x4e94 <__divsf3_pse+0x90>
    4eb2:	e0 95       	com	r30
    4eb4:	08 95       	ret

00004eb6 <__fixsfsi>:
    4eb6:	04 d0       	rcall	.+8      	; 0x4ec0 <__fixunssfsi>
    4eb8:	68 94       	set
    4eba:	b1 11       	cpse	r27, r1
    4ebc:	d9 c0       	rjmp	.+434    	; 0x5070 <__fp_szero>
    4ebe:	08 95       	ret

00004ec0 <__fixunssfsi>:
    4ec0:	bc d0       	rcall	.+376    	; 0x503a <__fp_splitA>
    4ec2:	88 f0       	brcs	.+34     	; 0x4ee6 <__fixunssfsi+0x26>
    4ec4:	9f 57       	subi	r25, 0x7F	; 127
    4ec6:	90 f0       	brcs	.+36     	; 0x4eec <__fixunssfsi+0x2c>
    4ec8:	b9 2f       	mov	r27, r25
    4eca:	99 27       	eor	r25, r25
    4ecc:	b7 51       	subi	r27, 0x17	; 23
    4ece:	a0 f0       	brcs	.+40     	; 0x4ef8 <__fixunssfsi+0x38>
    4ed0:	d1 f0       	breq	.+52     	; 0x4f06 <__fixunssfsi+0x46>
    4ed2:	66 0f       	add	r22, r22
    4ed4:	77 1f       	adc	r23, r23
    4ed6:	88 1f       	adc	r24, r24
    4ed8:	99 1f       	adc	r25, r25
    4eda:	1a f0       	brmi	.+6      	; 0x4ee2 <__fixunssfsi+0x22>
    4edc:	ba 95       	dec	r27
    4ede:	c9 f7       	brne	.-14     	; 0x4ed2 <__fixunssfsi+0x12>
    4ee0:	12 c0       	rjmp	.+36     	; 0x4f06 <__fixunssfsi+0x46>
    4ee2:	b1 30       	cpi	r27, 0x01	; 1
    4ee4:	81 f0       	breq	.+32     	; 0x4f06 <__fixunssfsi+0x46>
    4ee6:	c3 d0       	rcall	.+390    	; 0x506e <__fp_zero>
    4ee8:	b1 e0       	ldi	r27, 0x01	; 1
    4eea:	08 95       	ret
    4eec:	c0 c0       	rjmp	.+384    	; 0x506e <__fp_zero>
    4eee:	67 2f       	mov	r22, r23
    4ef0:	78 2f       	mov	r23, r24
    4ef2:	88 27       	eor	r24, r24
    4ef4:	b8 5f       	subi	r27, 0xF8	; 248
    4ef6:	39 f0       	breq	.+14     	; 0x4f06 <__fixunssfsi+0x46>
    4ef8:	b9 3f       	cpi	r27, 0xF9	; 249
    4efa:	cc f3       	brlt	.-14     	; 0x4eee <__fixunssfsi+0x2e>
    4efc:	86 95       	lsr	r24
    4efe:	77 95       	ror	r23
    4f00:	67 95       	ror	r22
    4f02:	b3 95       	inc	r27
    4f04:	d9 f7       	brne	.-10     	; 0x4efc <__fixunssfsi+0x3c>
    4f06:	3e f4       	brtc	.+14     	; 0x4f16 <__fixunssfsi+0x56>
    4f08:	90 95       	com	r25
    4f0a:	80 95       	com	r24
    4f0c:	70 95       	com	r23
    4f0e:	61 95       	neg	r22
    4f10:	7f 4f       	sbci	r23, 0xFF	; 255
    4f12:	8f 4f       	sbci	r24, 0xFF	; 255
    4f14:	9f 4f       	sbci	r25, 0xFF	; 255
    4f16:	08 95       	ret

00004f18 <__floatunsisf>:
    4f18:	e8 94       	clt
    4f1a:	09 c0       	rjmp	.+18     	; 0x4f2e <__floatsisf+0x12>

00004f1c <__floatsisf>:
    4f1c:	97 fb       	bst	r25, 7
    4f1e:	3e f4       	brtc	.+14     	; 0x4f2e <__floatsisf+0x12>
    4f20:	90 95       	com	r25
    4f22:	80 95       	com	r24
    4f24:	70 95       	com	r23
    4f26:	61 95       	neg	r22
    4f28:	7f 4f       	sbci	r23, 0xFF	; 255
    4f2a:	8f 4f       	sbci	r24, 0xFF	; 255
    4f2c:	9f 4f       	sbci	r25, 0xFF	; 255
    4f2e:	99 23       	and	r25, r25
    4f30:	a9 f0       	breq	.+42     	; 0x4f5c <__floatsisf+0x40>
    4f32:	f9 2f       	mov	r31, r25
    4f34:	96 e9       	ldi	r25, 0x96	; 150
    4f36:	bb 27       	eor	r27, r27
    4f38:	93 95       	inc	r25
    4f3a:	f6 95       	lsr	r31
    4f3c:	87 95       	ror	r24
    4f3e:	77 95       	ror	r23
    4f40:	67 95       	ror	r22
    4f42:	b7 95       	ror	r27
    4f44:	f1 11       	cpse	r31, r1
    4f46:	f8 cf       	rjmp	.-16     	; 0x4f38 <__floatsisf+0x1c>
    4f48:	fa f4       	brpl	.+62     	; 0x4f88 <__floatsisf+0x6c>
    4f4a:	bb 0f       	add	r27, r27
    4f4c:	11 f4       	brne	.+4      	; 0x4f52 <__floatsisf+0x36>
    4f4e:	60 ff       	sbrs	r22, 0
    4f50:	1b c0       	rjmp	.+54     	; 0x4f88 <__floatsisf+0x6c>
    4f52:	6f 5f       	subi	r22, 0xFF	; 255
    4f54:	7f 4f       	sbci	r23, 0xFF	; 255
    4f56:	8f 4f       	sbci	r24, 0xFF	; 255
    4f58:	9f 4f       	sbci	r25, 0xFF	; 255
    4f5a:	16 c0       	rjmp	.+44     	; 0x4f88 <__floatsisf+0x6c>
    4f5c:	88 23       	and	r24, r24
    4f5e:	11 f0       	breq	.+4      	; 0x4f64 <__floatsisf+0x48>
    4f60:	96 e9       	ldi	r25, 0x96	; 150
    4f62:	11 c0       	rjmp	.+34     	; 0x4f86 <__floatsisf+0x6a>
    4f64:	77 23       	and	r23, r23
    4f66:	21 f0       	breq	.+8      	; 0x4f70 <__floatsisf+0x54>
    4f68:	9e e8       	ldi	r25, 0x8E	; 142
    4f6a:	87 2f       	mov	r24, r23
    4f6c:	76 2f       	mov	r23, r22
    4f6e:	05 c0       	rjmp	.+10     	; 0x4f7a <__floatsisf+0x5e>
    4f70:	66 23       	and	r22, r22
    4f72:	71 f0       	breq	.+28     	; 0x4f90 <__floatsisf+0x74>
    4f74:	96 e8       	ldi	r25, 0x86	; 134
    4f76:	86 2f       	mov	r24, r22
    4f78:	70 e0       	ldi	r23, 0x00	; 0
    4f7a:	60 e0       	ldi	r22, 0x00	; 0
    4f7c:	2a f0       	brmi	.+10     	; 0x4f88 <__floatsisf+0x6c>
    4f7e:	9a 95       	dec	r25
    4f80:	66 0f       	add	r22, r22
    4f82:	77 1f       	adc	r23, r23
    4f84:	88 1f       	adc	r24, r24
    4f86:	da f7       	brpl	.-10     	; 0x4f7e <__floatsisf+0x62>
    4f88:	88 0f       	add	r24, r24
    4f8a:	96 95       	lsr	r25
    4f8c:	87 95       	ror	r24
    4f8e:	97 f9       	bld	r25, 7
    4f90:	08 95       	ret

00004f92 <__fp_cmp>:
    4f92:	99 0f       	add	r25, r25
    4f94:	00 08       	sbc	r0, r0
    4f96:	55 0f       	add	r21, r21
    4f98:	aa 0b       	sbc	r26, r26
    4f9a:	e0 e8       	ldi	r30, 0x80	; 128
    4f9c:	fe ef       	ldi	r31, 0xFE	; 254
    4f9e:	16 16       	cp	r1, r22
    4fa0:	17 06       	cpc	r1, r23
    4fa2:	e8 07       	cpc	r30, r24
    4fa4:	f9 07       	cpc	r31, r25
    4fa6:	c0 f0       	brcs	.+48     	; 0x4fd8 <__fp_cmp+0x46>
    4fa8:	12 16       	cp	r1, r18
    4faa:	13 06       	cpc	r1, r19
    4fac:	e4 07       	cpc	r30, r20
    4fae:	f5 07       	cpc	r31, r21
    4fb0:	98 f0       	brcs	.+38     	; 0x4fd8 <__fp_cmp+0x46>
    4fb2:	62 1b       	sub	r22, r18
    4fb4:	73 0b       	sbc	r23, r19
    4fb6:	84 0b       	sbc	r24, r20
    4fb8:	95 0b       	sbc	r25, r21
    4fba:	39 f4       	brne	.+14     	; 0x4fca <__fp_cmp+0x38>
    4fbc:	0a 26       	eor	r0, r26
    4fbe:	61 f0       	breq	.+24     	; 0x4fd8 <__fp_cmp+0x46>
    4fc0:	23 2b       	or	r18, r19
    4fc2:	24 2b       	or	r18, r20
    4fc4:	25 2b       	or	r18, r21
    4fc6:	21 f4       	brne	.+8      	; 0x4fd0 <__fp_cmp+0x3e>
    4fc8:	08 95       	ret
    4fca:	0a 26       	eor	r0, r26
    4fcc:	09 f4       	brne	.+2      	; 0x4fd0 <__fp_cmp+0x3e>
    4fce:	a1 40       	sbci	r26, 0x01	; 1
    4fd0:	a6 95       	lsr	r26
    4fd2:	8f ef       	ldi	r24, 0xFF	; 255
    4fd4:	81 1d       	adc	r24, r1
    4fd6:	81 1d       	adc	r24, r1
    4fd8:	08 95       	ret

00004fda <__fp_inf>:
    4fda:	97 f9       	bld	r25, 7
    4fdc:	9f 67       	ori	r25, 0x7F	; 127
    4fde:	80 e8       	ldi	r24, 0x80	; 128
    4fe0:	70 e0       	ldi	r23, 0x00	; 0
    4fe2:	60 e0       	ldi	r22, 0x00	; 0
    4fe4:	08 95       	ret

00004fe6 <__fp_nan>:
    4fe6:	9f ef       	ldi	r25, 0xFF	; 255
    4fe8:	80 ec       	ldi	r24, 0xC0	; 192
    4fea:	08 95       	ret

00004fec <__fp_pscA>:
    4fec:	00 24       	eor	r0, r0
    4fee:	0a 94       	dec	r0
    4ff0:	16 16       	cp	r1, r22
    4ff2:	17 06       	cpc	r1, r23
    4ff4:	18 06       	cpc	r1, r24
    4ff6:	09 06       	cpc	r0, r25
    4ff8:	08 95       	ret

00004ffa <__fp_pscB>:
    4ffa:	00 24       	eor	r0, r0
    4ffc:	0a 94       	dec	r0
    4ffe:	12 16       	cp	r1, r18
    5000:	13 06       	cpc	r1, r19
    5002:	14 06       	cpc	r1, r20
    5004:	05 06       	cpc	r0, r21
    5006:	08 95       	ret

00005008 <__fp_round>:
    5008:	09 2e       	mov	r0, r25
    500a:	03 94       	inc	r0
    500c:	00 0c       	add	r0, r0
    500e:	11 f4       	brne	.+4      	; 0x5014 <__fp_round+0xc>
    5010:	88 23       	and	r24, r24
    5012:	52 f0       	brmi	.+20     	; 0x5028 <__fp_round+0x20>
    5014:	bb 0f       	add	r27, r27
    5016:	40 f4       	brcc	.+16     	; 0x5028 <__fp_round+0x20>
    5018:	bf 2b       	or	r27, r31
    501a:	11 f4       	brne	.+4      	; 0x5020 <__fp_round+0x18>
    501c:	60 ff       	sbrs	r22, 0
    501e:	04 c0       	rjmp	.+8      	; 0x5028 <__fp_round+0x20>
    5020:	6f 5f       	subi	r22, 0xFF	; 255
    5022:	7f 4f       	sbci	r23, 0xFF	; 255
    5024:	8f 4f       	sbci	r24, 0xFF	; 255
    5026:	9f 4f       	sbci	r25, 0xFF	; 255
    5028:	08 95       	ret

0000502a <__fp_split3>:
    502a:	57 fd       	sbrc	r21, 7
    502c:	90 58       	subi	r25, 0x80	; 128
    502e:	44 0f       	add	r20, r20
    5030:	55 1f       	adc	r21, r21
    5032:	59 f0       	breq	.+22     	; 0x504a <__fp_splitA+0x10>
    5034:	5f 3f       	cpi	r21, 0xFF	; 255
    5036:	71 f0       	breq	.+28     	; 0x5054 <__fp_splitA+0x1a>
    5038:	47 95       	ror	r20

0000503a <__fp_splitA>:
    503a:	88 0f       	add	r24, r24
    503c:	97 fb       	bst	r25, 7
    503e:	99 1f       	adc	r25, r25
    5040:	61 f0       	breq	.+24     	; 0x505a <__fp_splitA+0x20>
    5042:	9f 3f       	cpi	r25, 0xFF	; 255
    5044:	79 f0       	breq	.+30     	; 0x5064 <__fp_splitA+0x2a>
    5046:	87 95       	ror	r24
    5048:	08 95       	ret
    504a:	12 16       	cp	r1, r18
    504c:	13 06       	cpc	r1, r19
    504e:	14 06       	cpc	r1, r20
    5050:	55 1f       	adc	r21, r21
    5052:	f2 cf       	rjmp	.-28     	; 0x5038 <__fp_split3+0xe>
    5054:	46 95       	lsr	r20
    5056:	f1 df       	rcall	.-30     	; 0x503a <__fp_splitA>
    5058:	08 c0       	rjmp	.+16     	; 0x506a <__fp_splitA+0x30>
    505a:	16 16       	cp	r1, r22
    505c:	17 06       	cpc	r1, r23
    505e:	18 06       	cpc	r1, r24
    5060:	99 1f       	adc	r25, r25
    5062:	f1 cf       	rjmp	.-30     	; 0x5046 <__fp_splitA+0xc>
    5064:	86 95       	lsr	r24
    5066:	71 05       	cpc	r23, r1
    5068:	61 05       	cpc	r22, r1
    506a:	08 94       	sec
    506c:	08 95       	ret

0000506e <__fp_zero>:
    506e:	e8 94       	clt

00005070 <__fp_szero>:
    5070:	bb 27       	eor	r27, r27
    5072:	66 27       	eor	r22, r22
    5074:	77 27       	eor	r23, r23
    5076:	cb 01       	movw	r24, r22
    5078:	97 f9       	bld	r25, 7
    507a:	08 95       	ret

0000507c <__gesf2>:
    507c:	8a df       	rcall	.-236    	; 0x4f92 <__fp_cmp>
    507e:	08 f4       	brcc	.+2      	; 0x5082 <__gesf2+0x6>
    5080:	8f ef       	ldi	r24, 0xFF	; 255
    5082:	08 95       	ret

00005084 <__mulsf3>:
    5084:	0b d0       	rcall	.+22     	; 0x509c <__mulsf3x>
    5086:	c0 cf       	rjmp	.-128    	; 0x5008 <__fp_round>
    5088:	b1 df       	rcall	.-158    	; 0x4fec <__fp_pscA>
    508a:	28 f0       	brcs	.+10     	; 0x5096 <__mulsf3+0x12>
    508c:	b6 df       	rcall	.-148    	; 0x4ffa <__fp_pscB>
    508e:	18 f0       	brcs	.+6      	; 0x5096 <__mulsf3+0x12>
    5090:	95 23       	and	r25, r21
    5092:	09 f0       	breq	.+2      	; 0x5096 <__mulsf3+0x12>
    5094:	a2 cf       	rjmp	.-188    	; 0x4fda <__fp_inf>
    5096:	a7 cf       	rjmp	.-178    	; 0x4fe6 <__fp_nan>
    5098:	11 24       	eor	r1, r1
    509a:	ea cf       	rjmp	.-44     	; 0x5070 <__fp_szero>

0000509c <__mulsf3x>:
    509c:	c6 df       	rcall	.-116    	; 0x502a <__fp_split3>
    509e:	a0 f3       	brcs	.-24     	; 0x5088 <__mulsf3+0x4>

000050a0 <__mulsf3_pse>:
    50a0:	95 9f       	mul	r25, r21
    50a2:	d1 f3       	breq	.-12     	; 0x5098 <__mulsf3+0x14>
    50a4:	95 0f       	add	r25, r21
    50a6:	50 e0       	ldi	r21, 0x00	; 0
    50a8:	55 1f       	adc	r21, r21
    50aa:	62 9f       	mul	r22, r18
    50ac:	f0 01       	movw	r30, r0
    50ae:	72 9f       	mul	r23, r18
    50b0:	bb 27       	eor	r27, r27
    50b2:	f0 0d       	add	r31, r0
    50b4:	b1 1d       	adc	r27, r1
    50b6:	63 9f       	mul	r22, r19
    50b8:	aa 27       	eor	r26, r26
    50ba:	f0 0d       	add	r31, r0
    50bc:	b1 1d       	adc	r27, r1
    50be:	aa 1f       	adc	r26, r26
    50c0:	64 9f       	mul	r22, r20
    50c2:	66 27       	eor	r22, r22
    50c4:	b0 0d       	add	r27, r0
    50c6:	a1 1d       	adc	r26, r1
    50c8:	66 1f       	adc	r22, r22
    50ca:	82 9f       	mul	r24, r18
    50cc:	22 27       	eor	r18, r18
    50ce:	b0 0d       	add	r27, r0
    50d0:	a1 1d       	adc	r26, r1
    50d2:	62 1f       	adc	r22, r18
    50d4:	73 9f       	mul	r23, r19
    50d6:	b0 0d       	add	r27, r0
    50d8:	a1 1d       	adc	r26, r1
    50da:	62 1f       	adc	r22, r18
    50dc:	83 9f       	mul	r24, r19
    50de:	a0 0d       	add	r26, r0
    50e0:	61 1d       	adc	r22, r1
    50e2:	22 1f       	adc	r18, r18
    50e4:	74 9f       	mul	r23, r20
    50e6:	33 27       	eor	r19, r19
    50e8:	a0 0d       	add	r26, r0
    50ea:	61 1d       	adc	r22, r1
    50ec:	23 1f       	adc	r18, r19
    50ee:	84 9f       	mul	r24, r20
    50f0:	60 0d       	add	r22, r0
    50f2:	21 1d       	adc	r18, r1
    50f4:	82 2f       	mov	r24, r18
    50f6:	76 2f       	mov	r23, r22
    50f8:	6a 2f       	mov	r22, r26
    50fa:	11 24       	eor	r1, r1
    50fc:	9f 57       	subi	r25, 0x7F	; 127
    50fe:	50 40       	sbci	r21, 0x00	; 0
    5100:	8a f0       	brmi	.+34     	; 0x5124 <__mulsf3_pse+0x84>
    5102:	e1 f0       	breq	.+56     	; 0x513c <__mulsf3_pse+0x9c>
    5104:	88 23       	and	r24, r24
    5106:	4a f0       	brmi	.+18     	; 0x511a <__mulsf3_pse+0x7a>
    5108:	ee 0f       	add	r30, r30
    510a:	ff 1f       	adc	r31, r31
    510c:	bb 1f       	adc	r27, r27
    510e:	66 1f       	adc	r22, r22
    5110:	77 1f       	adc	r23, r23
    5112:	88 1f       	adc	r24, r24
    5114:	91 50       	subi	r25, 0x01	; 1
    5116:	50 40       	sbci	r21, 0x00	; 0
    5118:	a9 f7       	brne	.-22     	; 0x5104 <__mulsf3_pse+0x64>
    511a:	9e 3f       	cpi	r25, 0xFE	; 254
    511c:	51 05       	cpc	r21, r1
    511e:	70 f0       	brcs	.+28     	; 0x513c <__mulsf3_pse+0x9c>
    5120:	5c cf       	rjmp	.-328    	; 0x4fda <__fp_inf>
    5122:	a6 cf       	rjmp	.-180    	; 0x5070 <__fp_szero>
    5124:	5f 3f       	cpi	r21, 0xFF	; 255
    5126:	ec f3       	brlt	.-6      	; 0x5122 <__mulsf3_pse+0x82>
    5128:	98 3e       	cpi	r25, 0xE8	; 232
    512a:	dc f3       	brlt	.-10     	; 0x5122 <__mulsf3_pse+0x82>
    512c:	86 95       	lsr	r24
    512e:	77 95       	ror	r23
    5130:	67 95       	ror	r22
    5132:	b7 95       	ror	r27
    5134:	f7 95       	ror	r31
    5136:	e7 95       	ror	r30
    5138:	9f 5f       	subi	r25, 0xFF	; 255
    513a:	c1 f7       	brne	.-16     	; 0x512c <__mulsf3_pse+0x8c>
    513c:	fe 2b       	or	r31, r30
    513e:	88 0f       	add	r24, r24
    5140:	91 1d       	adc	r25, r1
    5142:	96 95       	lsr	r25
    5144:	87 95       	ror	r24
    5146:	97 f9       	bld	r25, 7
    5148:	08 95       	ret

0000514a <__mulsi3>:
    514a:	62 9f       	mul	r22, r18
    514c:	d0 01       	movw	r26, r0
    514e:	73 9f       	mul	r23, r19
    5150:	f0 01       	movw	r30, r0
    5152:	82 9f       	mul	r24, r18
    5154:	e0 0d       	add	r30, r0
    5156:	f1 1d       	adc	r31, r1
    5158:	64 9f       	mul	r22, r20
    515a:	e0 0d       	add	r30, r0
    515c:	f1 1d       	adc	r31, r1
    515e:	92 9f       	mul	r25, r18
    5160:	f0 0d       	add	r31, r0
    5162:	83 9f       	mul	r24, r19
    5164:	f0 0d       	add	r31, r0
    5166:	74 9f       	mul	r23, r20
    5168:	f0 0d       	add	r31, r0
    516a:	65 9f       	mul	r22, r21
    516c:	f0 0d       	add	r31, r0
    516e:	99 27       	eor	r25, r25
    5170:	72 9f       	mul	r23, r18
    5172:	b0 0d       	add	r27, r0
    5174:	e1 1d       	adc	r30, r1
    5176:	f9 1f       	adc	r31, r25
    5178:	63 9f       	mul	r22, r19
    517a:	b0 0d       	add	r27, r0
    517c:	e1 1d       	adc	r30, r1
    517e:	f9 1f       	adc	r31, r25
    5180:	bd 01       	movw	r22, r26
    5182:	cf 01       	movw	r24, r30
    5184:	11 24       	eor	r1, r1
    5186:	08 95       	ret

00005188 <__divmodhi4>:
    5188:	97 fb       	bst	r25, 7
    518a:	09 2e       	mov	r0, r25
    518c:	07 26       	eor	r0, r23
    518e:	0a d0       	rcall	.+20     	; 0x51a4 <__divmodhi4_neg1>
    5190:	77 fd       	sbrc	r23, 7
    5192:	04 d0       	rcall	.+8      	; 0x519c <__divmodhi4_neg2>
    5194:	49 d0       	rcall	.+146    	; 0x5228 <__udivmodhi4>
    5196:	06 d0       	rcall	.+12     	; 0x51a4 <__divmodhi4_neg1>
    5198:	00 20       	and	r0, r0
    519a:	1a f4       	brpl	.+6      	; 0x51a2 <__divmodhi4_exit>

0000519c <__divmodhi4_neg2>:
    519c:	70 95       	com	r23
    519e:	61 95       	neg	r22
    51a0:	7f 4f       	sbci	r23, 0xFF	; 255

000051a2 <__divmodhi4_exit>:
    51a2:	08 95       	ret

000051a4 <__divmodhi4_neg1>:
    51a4:	f6 f7       	brtc	.-4      	; 0x51a2 <__divmodhi4_exit>
    51a6:	90 95       	com	r25
    51a8:	81 95       	neg	r24
    51aa:	9f 4f       	sbci	r25, 0xFF	; 255
    51ac:	08 95       	ret

000051ae <__udivmodsi4>:
    51ae:	a1 e2       	ldi	r26, 0x21	; 33
    51b0:	1a 2e       	mov	r1, r26
    51b2:	aa 1b       	sub	r26, r26
    51b4:	bb 1b       	sub	r27, r27
    51b6:	fd 01       	movw	r30, r26
    51b8:	0d c0       	rjmp	.+26     	; 0x51d4 <__udivmodsi4_ep>

000051ba <__udivmodsi4_loop>:
    51ba:	aa 1f       	adc	r26, r26
    51bc:	bb 1f       	adc	r27, r27
    51be:	ee 1f       	adc	r30, r30
    51c0:	ff 1f       	adc	r31, r31
    51c2:	a2 17       	cp	r26, r18
    51c4:	b3 07       	cpc	r27, r19
    51c6:	e4 07       	cpc	r30, r20
    51c8:	f5 07       	cpc	r31, r21
    51ca:	20 f0       	brcs	.+8      	; 0x51d4 <__udivmodsi4_ep>
    51cc:	a2 1b       	sub	r26, r18
    51ce:	b3 0b       	sbc	r27, r19
    51d0:	e4 0b       	sbc	r30, r20
    51d2:	f5 0b       	sbc	r31, r21

000051d4 <__udivmodsi4_ep>:
    51d4:	66 1f       	adc	r22, r22
    51d6:	77 1f       	adc	r23, r23
    51d8:	88 1f       	adc	r24, r24
    51da:	99 1f       	adc	r25, r25
    51dc:	1a 94       	dec	r1
    51de:	69 f7       	brne	.-38     	; 0x51ba <__udivmodsi4_loop>
    51e0:	60 95       	com	r22
    51e2:	70 95       	com	r23
    51e4:	80 95       	com	r24
    51e6:	90 95       	com	r25
    51e8:	9b 01       	movw	r18, r22
    51ea:	ac 01       	movw	r20, r24
    51ec:	bd 01       	movw	r22, r26
    51ee:	cf 01       	movw	r24, r30
    51f0:	08 95       	ret

000051f2 <__divmodsi4>:
    51f2:	97 fb       	bst	r25, 7
    51f4:	09 2e       	mov	r0, r25
    51f6:	05 26       	eor	r0, r21
    51f8:	0e d0       	rcall	.+28     	; 0x5216 <__divmodsi4_neg1>
    51fa:	57 fd       	sbrc	r21, 7
    51fc:	04 d0       	rcall	.+8      	; 0x5206 <__divmodsi4_neg2>
    51fe:	d7 df       	rcall	.-82     	; 0x51ae <__udivmodsi4>
    5200:	0a d0       	rcall	.+20     	; 0x5216 <__divmodsi4_neg1>
    5202:	00 1c       	adc	r0, r0
    5204:	38 f4       	brcc	.+14     	; 0x5214 <__divmodsi4_exit>

00005206 <__divmodsi4_neg2>:
    5206:	50 95       	com	r21
    5208:	40 95       	com	r20
    520a:	30 95       	com	r19
    520c:	21 95       	neg	r18
    520e:	3f 4f       	sbci	r19, 0xFF	; 255
    5210:	4f 4f       	sbci	r20, 0xFF	; 255
    5212:	5f 4f       	sbci	r21, 0xFF	; 255

00005214 <__divmodsi4_exit>:
    5214:	08 95       	ret

00005216 <__divmodsi4_neg1>:
    5216:	f6 f7       	brtc	.-4      	; 0x5214 <__divmodsi4_exit>
    5218:	90 95       	com	r25
    521a:	80 95       	com	r24
    521c:	70 95       	com	r23
    521e:	61 95       	neg	r22
    5220:	7f 4f       	sbci	r23, 0xFF	; 255
    5222:	8f 4f       	sbci	r24, 0xFF	; 255
    5224:	9f 4f       	sbci	r25, 0xFF	; 255
    5226:	08 95       	ret

00005228 <__udivmodhi4>:
    5228:	aa 1b       	sub	r26, r26
    522a:	bb 1b       	sub	r27, r27
    522c:	51 e1       	ldi	r21, 0x11	; 17
    522e:	07 c0       	rjmp	.+14     	; 0x523e <__udivmodhi4_ep>

00005230 <__udivmodhi4_loop>:
    5230:	aa 1f       	adc	r26, r26
    5232:	bb 1f       	adc	r27, r27
    5234:	a6 17       	cp	r26, r22
    5236:	b7 07       	cpc	r27, r23
    5238:	10 f0       	brcs	.+4      	; 0x523e <__udivmodhi4_ep>
    523a:	a6 1b       	sub	r26, r22
    523c:	b7 0b       	sbc	r27, r23

0000523e <__udivmodhi4_ep>:
    523e:	88 1f       	adc	r24, r24
    5240:	99 1f       	adc	r25, r25
    5242:	5a 95       	dec	r21
    5244:	a9 f7       	brne	.-22     	; 0x5230 <__udivmodhi4_loop>
    5246:	80 95       	com	r24
    5248:	90 95       	com	r25
    524a:	bc 01       	movw	r22, r24
    524c:	cd 01       	movw	r24, r26
    524e:	08 95       	ret

00005250 <setjmp>:
    5250:	dc 01       	movw	r26, r24
    5252:	2d 92       	st	X+, r2
    5254:	3d 92       	st	X+, r3
    5256:	4d 92       	st	X+, r4
    5258:	5d 92       	st	X+, r5
    525a:	6d 92       	st	X+, r6
    525c:	7d 92       	st	X+, r7
    525e:	8d 92       	st	X+, r8
    5260:	9d 92       	st	X+, r9
    5262:	ad 92       	st	X+, r10
    5264:	bd 92       	st	X+, r11
    5266:	cd 92       	st	X+, r12
    5268:	dd 92       	st	X+, r13
    526a:	ed 92       	st	X+, r14
    526c:	fd 92       	st	X+, r15
    526e:	0d 93       	st	X+, r16
    5270:	1d 93       	st	X+, r17
    5272:	cd 93       	st	X+, r28
    5274:	dd 93       	st	X+, r29
    5276:	ff 91       	pop	r31
    5278:	ef 91       	pop	r30
    527a:	8d b7       	in	r24, 0x3d	; 61
    527c:	8d 93       	st	X+, r24
    527e:	8e b7       	in	r24, 0x3e	; 62
    5280:	8d 93       	st	X+, r24
    5282:	8f b7       	in	r24, 0x3f	; 63
    5284:	8d 93       	st	X+, r24
    5286:	ed 93       	st	X+, r30
    5288:	fd 93       	st	X+, r31
    528a:	88 27       	eor	r24, r24
    528c:	99 27       	eor	r25, r25
    528e:	09 94       	ijmp

00005290 <longjmp>:
    5290:	dc 01       	movw	r26, r24
    5292:	cb 01       	movw	r24, r22
    5294:	81 30       	cpi	r24, 0x01	; 1
    5296:	91 05       	cpc	r25, r1
    5298:	81 1d       	adc	r24, r1
    529a:	2d 90       	ld	r2, X+
    529c:	3d 90       	ld	r3, X+
    529e:	4d 90       	ld	r4, X+
    52a0:	5d 90       	ld	r5, X+
    52a2:	6d 90       	ld	r6, X+
    52a4:	7d 90       	ld	r7, X+
    52a6:	8d 90       	ld	r8, X+
    52a8:	9d 90       	ld	r9, X+
    52aa:	ad 90       	ld	r10, X+
    52ac:	bd 90       	ld	r11, X+
    52ae:	cd 90       	ld	r12, X+
    52b0:	dd 90       	ld	r13, X+
    52b2:	ed 90       	ld	r14, X+
    52b4:	fd 90       	ld	r15, X+
    52b6:	0d 91       	ld	r16, X+
    52b8:	1d 91       	ld	r17, X+
    52ba:	cd 91       	ld	r28, X+
    52bc:	dd 91       	ld	r29, X+
    52be:	ed 91       	ld	r30, X+
    52c0:	fd 91       	ld	r31, X+
    52c2:	0d 90       	ld	r0, X+
    52c4:	f8 94       	cli
    52c6:	fe bf       	out	0x3e, r31	; 62
    52c8:	0f be       	out	0x3f, r0	; 63
    52ca:	ed bf       	out	0x3d, r30	; 61
    52cc:	ed 91       	ld	r30, X+
    52ce:	fd 91       	ld	r31, X+
    52d0:	09 94       	ijmp

000052d2 <strcmp>:
    52d2:	fb 01       	movw	r30, r22
    52d4:	dc 01       	movw	r26, r24
    52d6:	8d 91       	ld	r24, X+
    52d8:	01 90       	ld	r0, Z+
    52da:	80 19       	sub	r24, r0
    52dc:	01 10       	cpse	r0, r1
    52de:	d9 f3       	breq	.-10     	; 0x52d6 <strcmp+0x4>
    52e0:	99 0b       	sbc	r25, r25
    52e2:	08 95       	ret

000052e4 <strncat>:
    52e4:	fb 01       	movw	r30, r22
    52e6:	dc 01       	movw	r26, r24
    52e8:	0d 90       	ld	r0, X+
    52ea:	00 20       	and	r0, r0
    52ec:	e9 f7       	brne	.-6      	; 0x52e8 <strncat+0x4>
    52ee:	11 97       	sbiw	r26, 0x01	; 1
    52f0:	41 50       	subi	r20, 0x01	; 1
    52f2:	50 40       	sbci	r21, 0x00	; 0
    52f4:	28 f0       	brcs	.+10     	; 0x5300 <strncat+0x1c>
    52f6:	01 90       	ld	r0, Z+
    52f8:	00 20       	and	r0, r0
    52fa:	0d 92       	st	X+, r0
    52fc:	c9 f7       	brne	.-14     	; 0x52f0 <strncat+0xc>
    52fe:	08 95       	ret
    5300:	1c 92       	st	X, r1
    5302:	08 95       	ret

00005304 <fputc>:
    5304:	0f 93       	push	r16
    5306:	1f 93       	push	r17
    5308:	cf 93       	push	r28
    530a:	df 93       	push	r29
    530c:	8c 01       	movw	r16, r24
    530e:	eb 01       	movw	r28, r22
    5310:	8b 81       	ldd	r24, Y+3	; 0x03
    5312:	81 ff       	sbrs	r24, 1
    5314:	1b c0       	rjmp	.+54     	; 0x534c <fputc+0x48>
    5316:	82 ff       	sbrs	r24, 2
    5318:	0d c0       	rjmp	.+26     	; 0x5334 <fputc+0x30>
    531a:	2e 81       	ldd	r18, Y+6	; 0x06
    531c:	3f 81       	ldd	r19, Y+7	; 0x07
    531e:	8c 81       	ldd	r24, Y+4	; 0x04
    5320:	9d 81       	ldd	r25, Y+5	; 0x05
    5322:	28 17       	cp	r18, r24
    5324:	39 07       	cpc	r19, r25
    5326:	64 f4       	brge	.+24     	; 0x5340 <fputc+0x3c>
    5328:	e8 81       	ld	r30, Y
    532a:	f9 81       	ldd	r31, Y+1	; 0x01
    532c:	01 93       	st	Z+, r16
    532e:	f9 83       	std	Y+1, r31	; 0x01
    5330:	e8 83       	st	Y, r30
    5332:	06 c0       	rjmp	.+12     	; 0x5340 <fputc+0x3c>
    5334:	e8 85       	ldd	r30, Y+8	; 0x08
    5336:	f9 85       	ldd	r31, Y+9	; 0x09
    5338:	80 2f       	mov	r24, r16
    533a:	09 95       	icall
    533c:	00 97       	sbiw	r24, 0x00	; 0
    533e:	31 f4       	brne	.+12     	; 0x534c <fputc+0x48>
    5340:	8e 81       	ldd	r24, Y+6	; 0x06
    5342:	9f 81       	ldd	r25, Y+7	; 0x07
    5344:	01 96       	adiw	r24, 0x01	; 1
    5346:	9f 83       	std	Y+7, r25	; 0x07
    5348:	8e 83       	std	Y+6, r24	; 0x06
    534a:	02 c0       	rjmp	.+4      	; 0x5350 <fputc+0x4c>
    534c:	0f ef       	ldi	r16, 0xFF	; 255
    534e:	1f ef       	ldi	r17, 0xFF	; 255
    5350:	c8 01       	movw	r24, r16
    5352:	df 91       	pop	r29
    5354:	cf 91       	pop	r28
    5356:	1f 91       	pop	r17
    5358:	0f 91       	pop	r16
    535a:	08 95       	ret

0000535c <printf>:
    535c:	a0 e0       	ldi	r26, 0x00	; 0
    535e:	b0 e0       	ldi	r27, 0x00	; 0
    5360:	e4 eb       	ldi	r30, 0xB4	; 180
    5362:	f9 e2       	ldi	r31, 0x29	; 41
    5364:	0c 94 2e 2c 	jmp	0x585c	; 0x585c <__prologue_saves__+0x20>
    5368:	fe 01       	movw	r30, r28
    536a:	35 96       	adiw	r30, 0x05	; 5
    536c:	61 91       	ld	r22, Z+
    536e:	71 91       	ld	r23, Z+
    5370:	80 91 81 06 	lds	r24, 0x0681
    5374:	90 91 82 06 	lds	r25, 0x0682
    5378:	af 01       	movw	r20, r30
    537a:	0e 94 c3 29 	call	0x5386	; 0x5386 <vfprintf>
    537e:	20 96       	adiw	r28, 0x00	; 0
    5380:	e2 e0       	ldi	r30, 0x02	; 2
    5382:	0c 94 4a 2c 	jmp	0x5894	; 0x5894 <__epilogue_restores__+0x20>

00005386 <vfprintf>:
    5386:	ac e0       	ldi	r26, 0x0C	; 12
    5388:	b0 e0       	ldi	r27, 0x00	; 0
    538a:	e9 ec       	ldi	r30, 0xC9	; 201
    538c:	f9 e2       	ldi	r31, 0x29	; 41
    538e:	0c 94 1e 2c 	jmp	0x583c	; 0x583c <__prologue_saves__>
    5392:	6c 01       	movw	r12, r24
    5394:	1b 01       	movw	r2, r22
    5396:	8a 01       	movw	r16, r20
    5398:	fc 01       	movw	r30, r24
    539a:	17 82       	std	Z+7, r1	; 0x07
    539c:	16 82       	std	Z+6, r1	; 0x06
    539e:	83 81       	ldd	r24, Z+3	; 0x03
    53a0:	81 ff       	sbrs	r24, 1
    53a2:	d1 c1       	rjmp	.+930    	; 0x5746 <vfprintf+0x3c0>
    53a4:	2e 01       	movw	r4, r28
    53a6:	08 94       	sec
    53a8:	41 1c       	adc	r4, r1
    53aa:	51 1c       	adc	r5, r1
    53ac:	f6 01       	movw	r30, r12
    53ae:	93 81       	ldd	r25, Z+3	; 0x03
    53b0:	f1 01       	movw	r30, r2
    53b2:	93 fd       	sbrc	r25, 3
    53b4:	85 91       	lpm	r24, Z+
    53b6:	93 ff       	sbrs	r25, 3
    53b8:	81 91       	ld	r24, Z+
    53ba:	1f 01       	movw	r2, r30
    53bc:	88 23       	and	r24, r24
    53be:	09 f4       	brne	.+2      	; 0x53c2 <vfprintf+0x3c>
    53c0:	be c1       	rjmp	.+892    	; 0x573e <vfprintf+0x3b8>
    53c2:	85 32       	cpi	r24, 0x25	; 37
    53c4:	39 f4       	brne	.+14     	; 0x53d4 <vfprintf+0x4e>
    53c6:	93 fd       	sbrc	r25, 3
    53c8:	85 91       	lpm	r24, Z+
    53ca:	93 ff       	sbrs	r25, 3
    53cc:	81 91       	ld	r24, Z+
    53ce:	1f 01       	movw	r2, r30
    53d0:	85 32       	cpi	r24, 0x25	; 37
    53d2:	29 f4       	brne	.+10     	; 0x53de <vfprintf+0x58>
    53d4:	90 e0       	ldi	r25, 0x00	; 0
    53d6:	b6 01       	movw	r22, r12
    53d8:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
    53dc:	e7 cf       	rjmp	.-50     	; 0x53ac <vfprintf+0x26>
    53de:	ee 24       	eor	r14, r14
    53e0:	ff 24       	eor	r15, r15
    53e2:	20 e0       	ldi	r18, 0x00	; 0
    53e4:	20 32       	cpi	r18, 0x20	; 32
    53e6:	b0 f4       	brcc	.+44     	; 0x5414 <vfprintf+0x8e>
    53e8:	8b 32       	cpi	r24, 0x2B	; 43
    53ea:	69 f0       	breq	.+26     	; 0x5406 <vfprintf+0x80>
    53ec:	8c 32       	cpi	r24, 0x2C	; 44
    53ee:	28 f4       	brcc	.+10     	; 0x53fa <vfprintf+0x74>
    53f0:	80 32       	cpi	r24, 0x20	; 32
    53f2:	51 f0       	breq	.+20     	; 0x5408 <vfprintf+0x82>
    53f4:	83 32       	cpi	r24, 0x23	; 35
    53f6:	71 f4       	brne	.+28     	; 0x5414 <vfprintf+0x8e>
    53f8:	0b c0       	rjmp	.+22     	; 0x5410 <vfprintf+0x8a>
    53fa:	8d 32       	cpi	r24, 0x2D	; 45
    53fc:	39 f0       	breq	.+14     	; 0x540c <vfprintf+0x86>
    53fe:	80 33       	cpi	r24, 0x30	; 48
    5400:	49 f4       	brne	.+18     	; 0x5414 <vfprintf+0x8e>
    5402:	21 60       	ori	r18, 0x01	; 1
    5404:	2c c0       	rjmp	.+88     	; 0x545e <vfprintf+0xd8>
    5406:	22 60       	ori	r18, 0x02	; 2
    5408:	24 60       	ori	r18, 0x04	; 4
    540a:	29 c0       	rjmp	.+82     	; 0x545e <vfprintf+0xd8>
    540c:	28 60       	ori	r18, 0x08	; 8
    540e:	27 c0       	rjmp	.+78     	; 0x545e <vfprintf+0xd8>
    5410:	20 61       	ori	r18, 0x10	; 16
    5412:	25 c0       	rjmp	.+74     	; 0x545e <vfprintf+0xd8>
    5414:	27 fd       	sbrc	r18, 7
    5416:	2c c0       	rjmp	.+88     	; 0x5470 <vfprintf+0xea>
    5418:	38 2f       	mov	r19, r24
    541a:	30 53       	subi	r19, 0x30	; 48
    541c:	3a 30       	cpi	r19, 0x0A	; 10
    541e:	98 f4       	brcc	.+38     	; 0x5446 <vfprintf+0xc0>
    5420:	26 ff       	sbrs	r18, 6
    5422:	08 c0       	rjmp	.+16     	; 0x5434 <vfprintf+0xae>
    5424:	8e 2d       	mov	r24, r14
    5426:	88 0f       	add	r24, r24
    5428:	e8 2e       	mov	r14, r24
    542a:	ee 0c       	add	r14, r14
    542c:	ee 0c       	add	r14, r14
    542e:	e8 0e       	add	r14, r24
    5430:	e3 0e       	add	r14, r19
    5432:	15 c0       	rjmp	.+42     	; 0x545e <vfprintf+0xd8>
    5434:	8f 2d       	mov	r24, r15
    5436:	88 0f       	add	r24, r24
    5438:	f8 2e       	mov	r15, r24
    543a:	ff 0c       	add	r15, r15
    543c:	ff 0c       	add	r15, r15
    543e:	f8 0e       	add	r15, r24
    5440:	f3 0e       	add	r15, r19
    5442:	20 62       	ori	r18, 0x20	; 32
    5444:	0c c0       	rjmp	.+24     	; 0x545e <vfprintf+0xd8>
    5446:	8e 32       	cpi	r24, 0x2E	; 46
    5448:	21 f4       	brne	.+8      	; 0x5452 <vfprintf+0xcc>
    544a:	26 fd       	sbrc	r18, 6
    544c:	78 c1       	rjmp	.+752    	; 0x573e <vfprintf+0x3b8>
    544e:	20 64       	ori	r18, 0x40	; 64
    5450:	06 c0       	rjmp	.+12     	; 0x545e <vfprintf+0xd8>
    5452:	8c 36       	cpi	r24, 0x6C	; 108
    5454:	11 f4       	brne	.+4      	; 0x545a <vfprintf+0xd4>
    5456:	20 68       	ori	r18, 0x80	; 128
    5458:	02 c0       	rjmp	.+4      	; 0x545e <vfprintf+0xd8>
    545a:	88 36       	cpi	r24, 0x68	; 104
    545c:	49 f4       	brne	.+18     	; 0x5470 <vfprintf+0xea>
    545e:	f1 01       	movw	r30, r2
    5460:	93 fd       	sbrc	r25, 3
    5462:	85 91       	lpm	r24, Z+
    5464:	93 ff       	sbrs	r25, 3
    5466:	81 91       	ld	r24, Z+
    5468:	1f 01       	movw	r2, r30
    546a:	88 23       	and	r24, r24
    546c:	09 f0       	breq	.+2      	; 0x5470 <vfprintf+0xea>
    546e:	ba cf       	rjmp	.-140    	; 0x53e4 <vfprintf+0x5e>
    5470:	98 2f       	mov	r25, r24
    5472:	95 54       	subi	r25, 0x45	; 69
    5474:	93 30       	cpi	r25, 0x03	; 3
    5476:	18 f0       	brcs	.+6      	; 0x547e <vfprintf+0xf8>
    5478:	90 52       	subi	r25, 0x20	; 32
    547a:	93 30       	cpi	r25, 0x03	; 3
    547c:	28 f4       	brcc	.+10     	; 0x5488 <vfprintf+0x102>
    547e:	0c 5f       	subi	r16, 0xFC	; 252
    5480:	1f 4f       	sbci	r17, 0xFF	; 255
    5482:	ff e3       	ldi	r31, 0x3F	; 63
    5484:	f9 83       	std	Y+1, r31	; 0x01
    5486:	0d c0       	rjmp	.+26     	; 0x54a2 <vfprintf+0x11c>
    5488:	83 36       	cpi	r24, 0x63	; 99
    548a:	31 f0       	breq	.+12     	; 0x5498 <vfprintf+0x112>
    548c:	83 37       	cpi	r24, 0x73	; 115
    548e:	71 f0       	breq	.+28     	; 0x54ac <vfprintf+0x126>
    5490:	83 35       	cpi	r24, 0x53	; 83
    5492:	09 f0       	breq	.+2      	; 0x5496 <vfprintf+0x110>
    5494:	60 c0       	rjmp	.+192    	; 0x5556 <vfprintf+0x1d0>
    5496:	22 c0       	rjmp	.+68     	; 0x54dc <vfprintf+0x156>
    5498:	f8 01       	movw	r30, r16
    549a:	80 81       	ld	r24, Z
    549c:	89 83       	std	Y+1, r24	; 0x01
    549e:	0e 5f       	subi	r16, 0xFE	; 254
    54a0:	1f 4f       	sbci	r17, 0xFF	; 255
    54a2:	42 01       	movw	r8, r4
    54a4:	71 e0       	ldi	r23, 0x01	; 1
    54a6:	a7 2e       	mov	r10, r23
    54a8:	b1 2c       	mov	r11, r1
    54aa:	16 c0       	rjmp	.+44     	; 0x54d8 <vfprintf+0x152>
    54ac:	62 e0       	ldi	r22, 0x02	; 2
    54ae:	66 2e       	mov	r6, r22
    54b0:	71 2c       	mov	r7, r1
    54b2:	60 0e       	add	r6, r16
    54b4:	71 1e       	adc	r7, r17
    54b6:	f8 01       	movw	r30, r16
    54b8:	80 80       	ld	r8, Z
    54ba:	91 80       	ldd	r9, Z+1	; 0x01
    54bc:	26 ff       	sbrs	r18, 6
    54be:	03 c0       	rjmp	.+6      	; 0x54c6 <vfprintf+0x140>
    54c0:	6e 2d       	mov	r22, r14
    54c2:	70 e0       	ldi	r23, 0x00	; 0
    54c4:	02 c0       	rjmp	.+4      	; 0x54ca <vfprintf+0x144>
    54c6:	6f ef       	ldi	r22, 0xFF	; 255
    54c8:	7f ef       	ldi	r23, 0xFF	; 255
    54ca:	c4 01       	movw	r24, r8
    54cc:	2c 87       	std	Y+12, r18	; 0x0c
    54ce:	0e 94 b5 2b 	call	0x576a	; 0x576a <strnlen>
    54d2:	5c 01       	movw	r10, r24
    54d4:	83 01       	movw	r16, r6
    54d6:	2c 85       	ldd	r18, Y+12	; 0x0c
    54d8:	2f 77       	andi	r18, 0x7F	; 127
    54da:	17 c0       	rjmp	.+46     	; 0x550a <vfprintf+0x184>
    54dc:	52 e0       	ldi	r21, 0x02	; 2
    54de:	65 2e       	mov	r6, r21
    54e0:	71 2c       	mov	r7, r1
    54e2:	60 0e       	add	r6, r16
    54e4:	71 1e       	adc	r7, r17
    54e6:	f8 01       	movw	r30, r16
    54e8:	80 80       	ld	r8, Z
    54ea:	91 80       	ldd	r9, Z+1	; 0x01
    54ec:	26 ff       	sbrs	r18, 6
    54ee:	03 c0       	rjmp	.+6      	; 0x54f6 <vfprintf+0x170>
    54f0:	6e 2d       	mov	r22, r14
    54f2:	70 e0       	ldi	r23, 0x00	; 0
    54f4:	02 c0       	rjmp	.+4      	; 0x54fa <vfprintf+0x174>
    54f6:	6f ef       	ldi	r22, 0xFF	; 255
    54f8:	7f ef       	ldi	r23, 0xFF	; 255
    54fa:	c4 01       	movw	r24, r8
    54fc:	2c 87       	std	Y+12, r18	; 0x0c
    54fe:	0e 94 aa 2b 	call	0x5754	; 0x5754 <strnlen_P>
    5502:	5c 01       	movw	r10, r24
    5504:	2c 85       	ldd	r18, Y+12	; 0x0c
    5506:	20 68       	ori	r18, 0x80	; 128
    5508:	83 01       	movw	r16, r6
    550a:	23 fd       	sbrc	r18, 3
    550c:	20 c0       	rjmp	.+64     	; 0x554e <vfprintf+0x1c8>
    550e:	08 c0       	rjmp	.+16     	; 0x5520 <vfprintf+0x19a>
    5510:	80 e2       	ldi	r24, 0x20	; 32
    5512:	90 e0       	ldi	r25, 0x00	; 0
    5514:	b6 01       	movw	r22, r12
    5516:	2c 87       	std	Y+12, r18	; 0x0c
    5518:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
    551c:	fa 94       	dec	r15
    551e:	2c 85       	ldd	r18, Y+12	; 0x0c
    5520:	8f 2d       	mov	r24, r15
    5522:	90 e0       	ldi	r25, 0x00	; 0
    5524:	a8 16       	cp	r10, r24
    5526:	b9 06       	cpc	r11, r25
    5528:	98 f3       	brcs	.-26     	; 0x5510 <vfprintf+0x18a>
    552a:	11 c0       	rjmp	.+34     	; 0x554e <vfprintf+0x1c8>
    552c:	f4 01       	movw	r30, r8
    552e:	27 fd       	sbrc	r18, 7
    5530:	85 91       	lpm	r24, Z+
    5532:	27 ff       	sbrs	r18, 7
    5534:	81 91       	ld	r24, Z+
    5536:	4f 01       	movw	r8, r30
    5538:	90 e0       	ldi	r25, 0x00	; 0
    553a:	b6 01       	movw	r22, r12
    553c:	2c 87       	std	Y+12, r18	; 0x0c
    553e:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
    5542:	2c 85       	ldd	r18, Y+12	; 0x0c
    5544:	f1 10       	cpse	r15, r1
    5546:	fa 94       	dec	r15
    5548:	08 94       	sec
    554a:	a1 08       	sbc	r10, r1
    554c:	b1 08       	sbc	r11, r1
    554e:	a1 14       	cp	r10, r1
    5550:	b1 04       	cpc	r11, r1
    5552:	61 f7       	brne	.-40     	; 0x552c <vfprintf+0x1a6>
    5554:	f1 c0       	rjmp	.+482    	; 0x5738 <vfprintf+0x3b2>
    5556:	84 36       	cpi	r24, 0x64	; 100
    5558:	11 f0       	breq	.+4      	; 0x555e <vfprintf+0x1d8>
    555a:	89 36       	cpi	r24, 0x69	; 105
    555c:	49 f5       	brne	.+82     	; 0x55b0 <vfprintf+0x22a>
    555e:	27 ff       	sbrs	r18, 7
    5560:	08 c0       	rjmp	.+16     	; 0x5572 <vfprintf+0x1ec>
    5562:	f8 01       	movw	r30, r16
    5564:	60 81       	ld	r22, Z
    5566:	71 81       	ldd	r23, Z+1	; 0x01
    5568:	82 81       	ldd	r24, Z+2	; 0x02
    556a:	93 81       	ldd	r25, Z+3	; 0x03
    556c:	0c 5f       	subi	r16, 0xFC	; 252
    556e:	1f 4f       	sbci	r17, 0xFF	; 255
    5570:	09 c0       	rjmp	.+18     	; 0x5584 <vfprintf+0x1fe>
    5572:	f8 01       	movw	r30, r16
    5574:	60 81       	ld	r22, Z
    5576:	71 81       	ldd	r23, Z+1	; 0x01
    5578:	88 27       	eor	r24, r24
    557a:	77 fd       	sbrc	r23, 7
    557c:	80 95       	com	r24
    557e:	98 2f       	mov	r25, r24
    5580:	0e 5f       	subi	r16, 0xFE	; 254
    5582:	1f 4f       	sbci	r17, 0xFF	; 255
    5584:	4f e6       	ldi	r20, 0x6F	; 111
    5586:	b4 2e       	mov	r11, r20
    5588:	b2 22       	and	r11, r18
    558a:	97 ff       	sbrs	r25, 7
    558c:	09 c0       	rjmp	.+18     	; 0x55a0 <vfprintf+0x21a>
    558e:	90 95       	com	r25
    5590:	80 95       	com	r24
    5592:	70 95       	com	r23
    5594:	61 95       	neg	r22
    5596:	7f 4f       	sbci	r23, 0xFF	; 255
    5598:	8f 4f       	sbci	r24, 0xFF	; 255
    559a:	9f 4f       	sbci	r25, 0xFF	; 255
    559c:	f0 e8       	ldi	r31, 0x80	; 128
    559e:	bf 2a       	or	r11, r31
    55a0:	a2 01       	movw	r20, r4
    55a2:	2a e0       	ldi	r18, 0x0A	; 10
    55a4:	30 e0       	ldi	r19, 0x00	; 0
    55a6:	0e 94 c0 2b 	call	0x5780	; 0x5780 <__ultoa_invert>
    55aa:	78 2e       	mov	r7, r24
    55ac:	74 18       	sub	r7, r4
    55ae:	45 c0       	rjmp	.+138    	; 0x563a <vfprintf+0x2b4>
    55b0:	85 37       	cpi	r24, 0x75	; 117
    55b2:	31 f4       	brne	.+12     	; 0x55c0 <vfprintf+0x23a>
    55b4:	3f ee       	ldi	r19, 0xEF	; 239
    55b6:	b3 2e       	mov	r11, r19
    55b8:	b2 22       	and	r11, r18
    55ba:	2a e0       	ldi	r18, 0x0A	; 10
    55bc:	30 e0       	ldi	r19, 0x00	; 0
    55be:	25 c0       	rjmp	.+74     	; 0x560a <vfprintf+0x284>
    55c0:	99 ef       	ldi	r25, 0xF9	; 249
    55c2:	b9 2e       	mov	r11, r25
    55c4:	b2 22       	and	r11, r18
    55c6:	8f 36       	cpi	r24, 0x6F	; 111
    55c8:	c1 f0       	breq	.+48     	; 0x55fa <vfprintf+0x274>
    55ca:	80 37       	cpi	r24, 0x70	; 112
    55cc:	20 f4       	brcc	.+8      	; 0x55d6 <vfprintf+0x250>
    55ce:	88 35       	cpi	r24, 0x58	; 88
    55d0:	09 f0       	breq	.+2      	; 0x55d4 <vfprintf+0x24e>
    55d2:	b5 c0       	rjmp	.+362    	; 0x573e <vfprintf+0x3b8>
    55d4:	0d c0       	rjmp	.+26     	; 0x55f0 <vfprintf+0x26a>
    55d6:	80 37       	cpi	r24, 0x70	; 112
    55d8:	21 f0       	breq	.+8      	; 0x55e2 <vfprintf+0x25c>
    55da:	88 37       	cpi	r24, 0x78	; 120
    55dc:	09 f0       	breq	.+2      	; 0x55e0 <vfprintf+0x25a>
    55de:	af c0       	rjmp	.+350    	; 0x573e <vfprintf+0x3b8>
    55e0:	02 c0       	rjmp	.+4      	; 0x55e6 <vfprintf+0x260>
    55e2:	20 e1       	ldi	r18, 0x10	; 16
    55e4:	b2 2a       	or	r11, r18
    55e6:	b4 fe       	sbrs	r11, 4
    55e8:	0b c0       	rjmp	.+22     	; 0x5600 <vfprintf+0x27a>
    55ea:	84 e0       	ldi	r24, 0x04	; 4
    55ec:	b8 2a       	or	r11, r24
    55ee:	08 c0       	rjmp	.+16     	; 0x5600 <vfprintf+0x27a>
    55f0:	b4 fe       	sbrs	r11, 4
    55f2:	09 c0       	rjmp	.+18     	; 0x5606 <vfprintf+0x280>
    55f4:	e6 e0       	ldi	r30, 0x06	; 6
    55f6:	be 2a       	or	r11, r30
    55f8:	06 c0       	rjmp	.+12     	; 0x5606 <vfprintf+0x280>
    55fa:	28 e0       	ldi	r18, 0x08	; 8
    55fc:	30 e0       	ldi	r19, 0x00	; 0
    55fe:	05 c0       	rjmp	.+10     	; 0x560a <vfprintf+0x284>
    5600:	20 e1       	ldi	r18, 0x10	; 16
    5602:	30 e0       	ldi	r19, 0x00	; 0
    5604:	02 c0       	rjmp	.+4      	; 0x560a <vfprintf+0x284>
    5606:	20 e1       	ldi	r18, 0x10	; 16
    5608:	32 e0       	ldi	r19, 0x02	; 2
    560a:	b7 fe       	sbrs	r11, 7
    560c:	08 c0       	rjmp	.+16     	; 0x561e <vfprintf+0x298>
    560e:	f8 01       	movw	r30, r16
    5610:	60 81       	ld	r22, Z
    5612:	71 81       	ldd	r23, Z+1	; 0x01
    5614:	82 81       	ldd	r24, Z+2	; 0x02
    5616:	93 81       	ldd	r25, Z+3	; 0x03
    5618:	0c 5f       	subi	r16, 0xFC	; 252
    561a:	1f 4f       	sbci	r17, 0xFF	; 255
    561c:	07 c0       	rjmp	.+14     	; 0x562c <vfprintf+0x2a6>
    561e:	f8 01       	movw	r30, r16
    5620:	60 81       	ld	r22, Z
    5622:	71 81       	ldd	r23, Z+1	; 0x01
    5624:	80 e0       	ldi	r24, 0x00	; 0
    5626:	90 e0       	ldi	r25, 0x00	; 0
    5628:	0e 5f       	subi	r16, 0xFE	; 254
    562a:	1f 4f       	sbci	r17, 0xFF	; 255
    562c:	a2 01       	movw	r20, r4
    562e:	0e 94 c0 2b 	call	0x5780	; 0x5780 <__ultoa_invert>
    5632:	78 2e       	mov	r7, r24
    5634:	74 18       	sub	r7, r4
    5636:	ff e7       	ldi	r31, 0x7F	; 127
    5638:	bf 22       	and	r11, r31
    563a:	b6 fe       	sbrs	r11, 6
    563c:	0b c0       	rjmp	.+22     	; 0x5654 <vfprintf+0x2ce>
    563e:	2e ef       	ldi	r18, 0xFE	; 254
    5640:	b2 22       	and	r11, r18
    5642:	7e 14       	cp	r7, r14
    5644:	38 f4       	brcc	.+14     	; 0x5654 <vfprintf+0x2ce>
    5646:	b4 fe       	sbrs	r11, 4
    5648:	07 c0       	rjmp	.+14     	; 0x5658 <vfprintf+0x2d2>
    564a:	b2 fc       	sbrc	r11, 2
    564c:	05 c0       	rjmp	.+10     	; 0x5658 <vfprintf+0x2d2>
    564e:	8f ee       	ldi	r24, 0xEF	; 239
    5650:	b8 22       	and	r11, r24
    5652:	02 c0       	rjmp	.+4      	; 0x5658 <vfprintf+0x2d2>
    5654:	a7 2c       	mov	r10, r7
    5656:	01 c0       	rjmp	.+2      	; 0x565a <vfprintf+0x2d4>
    5658:	ae 2c       	mov	r10, r14
    565a:	8b 2d       	mov	r24, r11
    565c:	90 e0       	ldi	r25, 0x00	; 0
    565e:	b4 fe       	sbrs	r11, 4
    5660:	0d c0       	rjmp	.+26     	; 0x567c <vfprintf+0x2f6>
    5662:	fe 01       	movw	r30, r28
    5664:	e7 0d       	add	r30, r7
    5666:	f1 1d       	adc	r31, r1
    5668:	20 81       	ld	r18, Z
    566a:	20 33       	cpi	r18, 0x30	; 48
    566c:	19 f4       	brne	.+6      	; 0x5674 <vfprintf+0x2ee>
    566e:	e9 ee       	ldi	r30, 0xE9	; 233
    5670:	be 22       	and	r11, r30
    5672:	09 c0       	rjmp	.+18     	; 0x5686 <vfprintf+0x300>
    5674:	a3 94       	inc	r10
    5676:	b2 fe       	sbrs	r11, 2
    5678:	06 c0       	rjmp	.+12     	; 0x5686 <vfprintf+0x300>
    567a:	04 c0       	rjmp	.+8      	; 0x5684 <vfprintf+0x2fe>
    567c:	86 78       	andi	r24, 0x86	; 134
    567e:	90 70       	andi	r25, 0x00	; 0
    5680:	00 97       	sbiw	r24, 0x00	; 0
    5682:	09 f0       	breq	.+2      	; 0x5686 <vfprintf+0x300>
    5684:	a3 94       	inc	r10
    5686:	8b 2c       	mov	r8, r11
    5688:	99 24       	eor	r9, r9
    568a:	b3 fc       	sbrc	r11, 3
    568c:	14 c0       	rjmp	.+40     	; 0x56b6 <vfprintf+0x330>
    568e:	b0 fe       	sbrs	r11, 0
    5690:	0f c0       	rjmp	.+30     	; 0x56b0 <vfprintf+0x32a>
    5692:	af 14       	cp	r10, r15
    5694:	28 f4       	brcc	.+10     	; 0x56a0 <vfprintf+0x31a>
    5696:	e7 2c       	mov	r14, r7
    5698:	ef 0c       	add	r14, r15
    569a:	ea 18       	sub	r14, r10
    569c:	af 2c       	mov	r10, r15
    569e:	08 c0       	rjmp	.+16     	; 0x56b0 <vfprintf+0x32a>
    56a0:	e7 2c       	mov	r14, r7
    56a2:	06 c0       	rjmp	.+12     	; 0x56b0 <vfprintf+0x32a>
    56a4:	80 e2       	ldi	r24, 0x20	; 32
    56a6:	90 e0       	ldi	r25, 0x00	; 0
    56a8:	b6 01       	movw	r22, r12
    56aa:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
    56ae:	a3 94       	inc	r10
    56b0:	af 14       	cp	r10, r15
    56b2:	c0 f3       	brcs	.-16     	; 0x56a4 <vfprintf+0x31e>
    56b4:	04 c0       	rjmp	.+8      	; 0x56be <vfprintf+0x338>
    56b6:	af 14       	cp	r10, r15
    56b8:	10 f4       	brcc	.+4      	; 0x56be <vfprintf+0x338>
    56ba:	fa 18       	sub	r15, r10
    56bc:	01 c0       	rjmp	.+2      	; 0x56c0 <vfprintf+0x33a>
    56be:	ff 24       	eor	r15, r15
    56c0:	84 fe       	sbrs	r8, 4
    56c2:	0f c0       	rjmp	.+30     	; 0x56e2 <vfprintf+0x35c>
    56c4:	80 e3       	ldi	r24, 0x30	; 48
    56c6:	90 e0       	ldi	r25, 0x00	; 0
    56c8:	b6 01       	movw	r22, r12
    56ca:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
    56ce:	82 fe       	sbrs	r8, 2
    56d0:	1f c0       	rjmp	.+62     	; 0x5710 <vfprintf+0x38a>
    56d2:	81 fe       	sbrs	r8, 1
    56d4:	03 c0       	rjmp	.+6      	; 0x56dc <vfprintf+0x356>
    56d6:	88 e5       	ldi	r24, 0x58	; 88
    56d8:	90 e0       	ldi	r25, 0x00	; 0
    56da:	10 c0       	rjmp	.+32     	; 0x56fc <vfprintf+0x376>
    56dc:	88 e7       	ldi	r24, 0x78	; 120
    56de:	90 e0       	ldi	r25, 0x00	; 0
    56e0:	0d c0       	rjmp	.+26     	; 0x56fc <vfprintf+0x376>
    56e2:	c4 01       	movw	r24, r8
    56e4:	86 78       	andi	r24, 0x86	; 134
    56e6:	90 70       	andi	r25, 0x00	; 0
    56e8:	00 97       	sbiw	r24, 0x00	; 0
    56ea:	91 f0       	breq	.+36     	; 0x5710 <vfprintf+0x38a>
    56ec:	81 fc       	sbrc	r8, 1
    56ee:	02 c0       	rjmp	.+4      	; 0x56f4 <vfprintf+0x36e>
    56f0:	80 e2       	ldi	r24, 0x20	; 32
    56f2:	01 c0       	rjmp	.+2      	; 0x56f6 <vfprintf+0x370>
    56f4:	8b e2       	ldi	r24, 0x2B	; 43
    56f6:	b7 fc       	sbrc	r11, 7
    56f8:	8d e2       	ldi	r24, 0x2D	; 45
    56fa:	90 e0       	ldi	r25, 0x00	; 0
    56fc:	b6 01       	movw	r22, r12
    56fe:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
    5702:	06 c0       	rjmp	.+12     	; 0x5710 <vfprintf+0x38a>
    5704:	80 e3       	ldi	r24, 0x30	; 48
    5706:	90 e0       	ldi	r25, 0x00	; 0
    5708:	b6 01       	movw	r22, r12
    570a:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
    570e:	ea 94       	dec	r14
    5710:	7e 14       	cp	r7, r14
    5712:	c0 f3       	brcs	.-16     	; 0x5704 <vfprintf+0x37e>
    5714:	7a 94       	dec	r7
    5716:	f2 01       	movw	r30, r4
    5718:	e7 0d       	add	r30, r7
    571a:	f1 1d       	adc	r31, r1
    571c:	80 81       	ld	r24, Z
    571e:	90 e0       	ldi	r25, 0x00	; 0
    5720:	b6 01       	movw	r22, r12
    5722:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
    5726:	77 20       	and	r7, r7
    5728:	a9 f7       	brne	.-22     	; 0x5714 <vfprintf+0x38e>
    572a:	06 c0       	rjmp	.+12     	; 0x5738 <vfprintf+0x3b2>
    572c:	80 e2       	ldi	r24, 0x20	; 32
    572e:	90 e0       	ldi	r25, 0x00	; 0
    5730:	b6 01       	movw	r22, r12
    5732:	0e 94 82 29 	call	0x5304	; 0x5304 <fputc>
    5736:	fa 94       	dec	r15
    5738:	ff 20       	and	r15, r15
    573a:	c1 f7       	brne	.-16     	; 0x572c <vfprintf+0x3a6>
    573c:	37 ce       	rjmp	.-914    	; 0x53ac <vfprintf+0x26>
    573e:	f6 01       	movw	r30, r12
    5740:	26 81       	ldd	r18, Z+6	; 0x06
    5742:	37 81       	ldd	r19, Z+7	; 0x07
    5744:	02 c0       	rjmp	.+4      	; 0x574a <vfprintf+0x3c4>
    5746:	2f ef       	ldi	r18, 0xFF	; 255
    5748:	3f ef       	ldi	r19, 0xFF	; 255
    574a:	c9 01       	movw	r24, r18
    574c:	2c 96       	adiw	r28, 0x0c	; 12
    574e:	e2 e1       	ldi	r30, 0x12	; 18
    5750:	0c 94 3a 2c 	jmp	0x5874	; 0x5874 <__epilogue_restores__>

00005754 <strnlen_P>:
    5754:	fc 01       	movw	r30, r24
    5756:	05 90       	lpm	r0, Z+
    5758:	61 50       	subi	r22, 0x01	; 1
    575a:	70 40       	sbci	r23, 0x00	; 0
    575c:	01 10       	cpse	r0, r1
    575e:	d8 f7       	brcc	.-10     	; 0x5756 <strnlen_P+0x2>
    5760:	80 95       	com	r24
    5762:	90 95       	com	r25
    5764:	8e 0f       	add	r24, r30
    5766:	9f 1f       	adc	r25, r31
    5768:	08 95       	ret

0000576a <strnlen>:
    576a:	fc 01       	movw	r30, r24
    576c:	61 50       	subi	r22, 0x01	; 1
    576e:	70 40       	sbci	r23, 0x00	; 0
    5770:	01 90       	ld	r0, Z+
    5772:	01 10       	cpse	r0, r1
    5774:	d8 f7       	brcc	.-10     	; 0x576c <strnlen+0x2>
    5776:	80 95       	com	r24
    5778:	90 95       	com	r25
    577a:	8e 0f       	add	r24, r30
    577c:	9f 1f       	adc	r25, r31
    577e:	08 95       	ret

00005780 <__ultoa_invert>:
    5780:	fa 01       	movw	r30, r20
    5782:	aa 27       	eor	r26, r26
    5784:	28 30       	cpi	r18, 0x08	; 8
    5786:	51 f1       	breq	.+84     	; 0x57dc <__ultoa_invert+0x5c>
    5788:	20 31       	cpi	r18, 0x10	; 16
    578a:	81 f1       	breq	.+96     	; 0x57ec <__ultoa_invert+0x6c>
    578c:	e8 94       	clt
    578e:	6f 93       	push	r22
    5790:	6e 7f       	andi	r22, 0xFE	; 254
    5792:	6e 5f       	subi	r22, 0xFE	; 254
    5794:	7f 4f       	sbci	r23, 0xFF	; 255
    5796:	8f 4f       	sbci	r24, 0xFF	; 255
    5798:	9f 4f       	sbci	r25, 0xFF	; 255
    579a:	af 4f       	sbci	r26, 0xFF	; 255
    579c:	b1 e0       	ldi	r27, 0x01	; 1
    579e:	3e d0       	rcall	.+124    	; 0x581c <__ultoa_invert+0x9c>
    57a0:	b4 e0       	ldi	r27, 0x04	; 4
    57a2:	3c d0       	rcall	.+120    	; 0x581c <__ultoa_invert+0x9c>
    57a4:	67 0f       	add	r22, r23
    57a6:	78 1f       	adc	r23, r24
    57a8:	89 1f       	adc	r24, r25
    57aa:	9a 1f       	adc	r25, r26
    57ac:	a1 1d       	adc	r26, r1
    57ae:	68 0f       	add	r22, r24
    57b0:	79 1f       	adc	r23, r25
    57b2:	8a 1f       	adc	r24, r26
    57b4:	91 1d       	adc	r25, r1
    57b6:	a1 1d       	adc	r26, r1
    57b8:	6a 0f       	add	r22, r26
    57ba:	71 1d       	adc	r23, r1
    57bc:	81 1d       	adc	r24, r1
    57be:	91 1d       	adc	r25, r1
    57c0:	a1 1d       	adc	r26, r1
    57c2:	20 d0       	rcall	.+64     	; 0x5804 <__ultoa_invert+0x84>
    57c4:	09 f4       	brne	.+2      	; 0x57c8 <__ultoa_invert+0x48>
    57c6:	68 94       	set
    57c8:	3f 91       	pop	r19
    57ca:	2a e0       	ldi	r18, 0x0A	; 10
    57cc:	26 9f       	mul	r18, r22
    57ce:	11 24       	eor	r1, r1
    57d0:	30 19       	sub	r19, r0
    57d2:	30 5d       	subi	r19, 0xD0	; 208
    57d4:	31 93       	st	Z+, r19
    57d6:	de f6       	brtc	.-74     	; 0x578e <__ultoa_invert+0xe>
    57d8:	cf 01       	movw	r24, r30
    57da:	08 95       	ret
    57dc:	46 2f       	mov	r20, r22
    57de:	47 70       	andi	r20, 0x07	; 7
    57e0:	40 5d       	subi	r20, 0xD0	; 208
    57e2:	41 93       	st	Z+, r20
    57e4:	b3 e0       	ldi	r27, 0x03	; 3
    57e6:	0f d0       	rcall	.+30     	; 0x5806 <__ultoa_invert+0x86>
    57e8:	c9 f7       	brne	.-14     	; 0x57dc <__ultoa_invert+0x5c>
    57ea:	f6 cf       	rjmp	.-20     	; 0x57d8 <__ultoa_invert+0x58>
    57ec:	46 2f       	mov	r20, r22
    57ee:	4f 70       	andi	r20, 0x0F	; 15
    57f0:	40 5d       	subi	r20, 0xD0	; 208
    57f2:	4a 33       	cpi	r20, 0x3A	; 58
    57f4:	18 f0       	brcs	.+6      	; 0x57fc <__ultoa_invert+0x7c>
    57f6:	49 5d       	subi	r20, 0xD9	; 217
    57f8:	31 fd       	sbrc	r19, 1
    57fa:	40 52       	subi	r20, 0x20	; 32
    57fc:	41 93       	st	Z+, r20
    57fe:	02 d0       	rcall	.+4      	; 0x5804 <__ultoa_invert+0x84>
    5800:	a9 f7       	brne	.-22     	; 0x57ec <__ultoa_invert+0x6c>
    5802:	ea cf       	rjmp	.-44     	; 0x57d8 <__ultoa_invert+0x58>
    5804:	b4 e0       	ldi	r27, 0x04	; 4
    5806:	a6 95       	lsr	r26
    5808:	97 95       	ror	r25
    580a:	87 95       	ror	r24
    580c:	77 95       	ror	r23
    580e:	67 95       	ror	r22
    5810:	ba 95       	dec	r27
    5812:	c9 f7       	brne	.-14     	; 0x5806 <__ultoa_invert+0x86>
    5814:	00 97       	sbiw	r24, 0x00	; 0
    5816:	61 05       	cpc	r22, r1
    5818:	71 05       	cpc	r23, r1
    581a:	08 95       	ret
    581c:	9b 01       	movw	r18, r22
    581e:	ac 01       	movw	r20, r24
    5820:	0a 2e       	mov	r0, r26
    5822:	06 94       	lsr	r0
    5824:	57 95       	ror	r21
    5826:	47 95       	ror	r20
    5828:	37 95       	ror	r19
    582a:	27 95       	ror	r18
    582c:	ba 95       	dec	r27
    582e:	c9 f7       	brne	.-14     	; 0x5822 <__ultoa_invert+0xa2>
    5830:	62 0f       	add	r22, r18
    5832:	73 1f       	adc	r23, r19
    5834:	84 1f       	adc	r24, r20
    5836:	95 1f       	adc	r25, r21
    5838:	a0 1d       	adc	r26, r0
    583a:	08 95       	ret

0000583c <__prologue_saves__>:
    583c:	2f 92       	push	r2
    583e:	3f 92       	push	r3
    5840:	4f 92       	push	r4
    5842:	5f 92       	push	r5
    5844:	6f 92       	push	r6
    5846:	7f 92       	push	r7
    5848:	8f 92       	push	r8
    584a:	9f 92       	push	r9
    584c:	af 92       	push	r10
    584e:	bf 92       	push	r11
    5850:	cf 92       	push	r12
    5852:	df 92       	push	r13
    5854:	ef 92       	push	r14
    5856:	ff 92       	push	r15
    5858:	0f 93       	push	r16
    585a:	1f 93       	push	r17
    585c:	cf 93       	push	r28
    585e:	df 93       	push	r29
    5860:	cd b7       	in	r28, 0x3d	; 61
    5862:	de b7       	in	r29, 0x3e	; 62
    5864:	ca 1b       	sub	r28, r26
    5866:	db 0b       	sbc	r29, r27
    5868:	0f b6       	in	r0, 0x3f	; 63
    586a:	f8 94       	cli
    586c:	de bf       	out	0x3e, r29	; 62
    586e:	0f be       	out	0x3f, r0	; 63
    5870:	cd bf       	out	0x3d, r28	; 61
    5872:	09 94       	ijmp

00005874 <__epilogue_restores__>:
    5874:	2a 88       	ldd	r2, Y+18	; 0x12
    5876:	39 88       	ldd	r3, Y+17	; 0x11
    5878:	48 88       	ldd	r4, Y+16	; 0x10
    587a:	5f 84       	ldd	r5, Y+15	; 0x0f
    587c:	6e 84       	ldd	r6, Y+14	; 0x0e
    587e:	7d 84       	ldd	r7, Y+13	; 0x0d
    5880:	8c 84       	ldd	r8, Y+12	; 0x0c
    5882:	9b 84       	ldd	r9, Y+11	; 0x0b
    5884:	aa 84       	ldd	r10, Y+10	; 0x0a
    5886:	b9 84       	ldd	r11, Y+9	; 0x09
    5888:	c8 84       	ldd	r12, Y+8	; 0x08
    588a:	df 80       	ldd	r13, Y+7	; 0x07
    588c:	ee 80       	ldd	r14, Y+6	; 0x06
    588e:	fd 80       	ldd	r15, Y+5	; 0x05
    5890:	0c 81       	ldd	r16, Y+4	; 0x04
    5892:	1b 81       	ldd	r17, Y+3	; 0x03
    5894:	aa 81       	ldd	r26, Y+2	; 0x02
    5896:	b9 81       	ldd	r27, Y+1	; 0x01
    5898:	ce 0f       	add	r28, r30
    589a:	d1 1d       	adc	r29, r1
    589c:	0f b6       	in	r0, 0x3f	; 63
    589e:	f8 94       	cli
    58a0:	de bf       	out	0x3e, r29	; 62
    58a2:	0f be       	out	0x3f, r0	; 63
    58a4:	cd bf       	out	0x3d, r28	; 61
    58a6:	ed 01       	movw	r28, r26
    58a8:	08 95       	ret

000058aa <_exit>:
    58aa:	f8 94       	cli

000058ac <__stop_program>:
    58ac:	ff cf       	rjmp	.-2      	; 0x58ac <__stop_program>
