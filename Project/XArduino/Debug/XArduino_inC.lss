
XArduino_inC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000198  00800100  00000534  000005c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000534  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800298  00800298  00000760  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000760  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00000eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001102  00000000  00000000  00000ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005ee  00000000  00000000  000020fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000801  00000000  00000000  000026e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000224  00000000  00000000  00002eec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008d0  00000000  00000000  00003110  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000052a  00000000  00000000  000039e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e3       	ldi	r30, 0x34	; 52
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 39       	cpi	r26, 0x98	; 152
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	12 e0       	ldi	r17, 0x02	; 2
  8c:	a8 e9       	ldi	r26, 0x98	; 152
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 39       	cpi	r26, 0x9A	; 154
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 98 02 	jmp	0x530	; 0x530 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
/*******************************************************************************
 * 6. Function Definitions
 ******************************************************************************/
int main(void)
{
	setup();
  a6:	0e 94 5a 00 	call	0xb4	; 0xb4 <setup>
	loop();
  aa:	0e 94 79 00 	call	0xf2	; 0xf2 <loop>
}
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	08 95       	ret

000000b4 <setup>:
extern const uint8_t characterLib[43][8];

/*******************************************************************************
 * 6. Function Definitions
 ******************************************************************************/
void setup(void){
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	00 d0       	rcall	.+0      	; 0xba <setup+0x6>
  ba:	00 d0       	rcall	.+0      	; 0xbc <setup+0x8>
  bc:	0f 92       	push	r0
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
	sendString(strStart);
#endif


	SPI_Config_Typedef config;
	config.dataTxOrder = SPI_SPCR_TransmitMSBFirst;
  c2:	19 82       	std	Y+1, r1	; 0x01
	config.masterSlaveMode = SPI_SPCR_MasterMode;
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	8a 83       	std	Y+2, r24	; 0x02
	config.clockPolarity = SPI_SPCR_IdleLow;
  c8:	1b 82       	std	Y+3, r1	; 0x03
	config.clockPhase = SPI_SPCR_LeadingEdgeSampling;
  ca:	1c 82       	std	Y+4, r1	; 0x04
	config.clockFrequency = SPI_FoscDiv16 ;
  cc:	8d 83       	std	Y+5, r24	; 0x05
	initSPI(&config);
  ce:	ce 01       	movw	r24, r28
  d0:	01 96       	adiw	r24, 0x01	; 1
  d2:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <initSPI>
	commandSPI(ENABLE);
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	0e 94 36 01 	call	0x26c	; 0x26c <commandSPI>
	masterTransmit('A');
  dc:	81 e4       	ldi	r24, 0x41	; 65
  de:	0e 94 40 01 	call	0x280	; 0x280 <masterTransmit>
	}
#endif
	
	

}
  e2:	0f 90       	pop	r0
  e4:	0f 90       	pop	r0
  e6:	0f 90       	pop	r0
  e8:	0f 90       	pop	r0
  ea:	0f 90       	pop	r0
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	08 95       	ret

000000f2 <loop>:

void loop(void){	
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <loop>

000000f4 <getPortBase>:
 * 6. Function Definitions
 ******************************************************************************/
GPIO_Typedef* getPortBase(GPIO_Port_Typedef port){
	GPIO_Typedef* gpiox = NULL;
	
	switch(port){
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	39 f0       	breq	.+14     	; 0x106 <getPortBase+0x12>
  f8:	81 30       	cpi	r24, 0x01	; 1
  fa:	58 f0       	brcs	.+22     	; 0x112 <getPortBase+0x1e>
  fc:	82 30       	cpi	r24, 0x02	; 2
  fe:	31 f0       	breq	.+12     	; 0x10c <getPortBase+0x18>

/*******************************************************************************
 * 6. Function Definitions
 ******************************************************************************/
GPIO_Typedef* getPortBase(GPIO_Port_Typedef port){
	GPIO_Typedef* gpiox = NULL;
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	08 95       	ret
	switch(port){
		case GPIO_PortB:
			gpiox = GPIOB;
			break;
		case GPIO_PortC:
			gpiox = GPIOC;
 106:	86 e2       	ldi	r24, 0x26	; 38
 108:	90 e0       	ldi	r25, 0x00	; 0
			break;
 10a:	08 95       	ret
		case GPIO_PortD:
			gpiox = GPIOD;
 10c:	89 e2       	ldi	r24, 0x29	; 41
 10e:	90 e0       	ldi	r25, 0x00	; 0
			break;
 110:	08 95       	ret
GPIO_Typedef* getPortBase(GPIO_Port_Typedef port){
	GPIO_Typedef* gpiox = NULL;
	
	switch(port){
		case GPIO_PortB:
			gpiox = GPIOB;
 112:	83 e2       	ldi	r24, 0x23	; 35
 114:	90 e0       	ldi	r25, 0x00	; 0
			gpiox = GPIOD;
			break;
	}
	
	return gpiox;
}
 116:	08 95       	ret

00000118 <disablePullUpResistor>:

void disablePullUpResistor(void){
	MCUCR |= 0x01 << 4;
 118:	85 b7       	in	r24, 0x35	; 53
 11a:	80 61       	ori	r24, 0x10	; 16
 11c:	85 bf       	out	0x35, r24	; 53
}
 11e:	08 95       	ret

00000120 <pinMode>:

void pinMode(uint8_t arduinoPin, GPIO_DDRxDirection_Typedef direction){
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	d6 2f       	mov	r29, r22
	GPIO_Typedef *gpiox = NULL;
	GPIO_Port_Typedef port = pins[arduinoPin].port;
 126:	e8 2f       	mov	r30, r24
 128:	f0 e0       	ldi	r31, 0x00	; 0
	GPIO_Pin_Typedef pin = pins[arduinoPin].pin;
 12a:	ee 0f       	add	r30, r30
 12c:	ff 1f       	adc	r31, r31
 12e:	e0 50       	subi	r30, 0x00	; 0
 130:	ff 4f       	sbci	r31, 0xFF	; 255
 132:	c1 81       	ldd	r28, Z+1	; 0x01
	
	gpiox = getPortBase(port);
 134:	80 81       	ld	r24, Z
 136:	0e 94 7a 00 	call	0xf4	; 0xf4 <getPortBase>
 13a:	fc 01       	movw	r30, r24
	if(NULL != gpiox){
 13c:	00 97       	sbiw	r24, 0x00	; 0
 13e:	b1 f0       	breq	.+44     	; 0x16c <pinMode+0x4c>
		gpiox->DDRx &= ~(GPIO_DDRx_Output << pin);
		gpiox->DDRx |= direction << pin;
 140:	8d 2f       	mov	r24, r29
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0c 2e       	mov	r0, r28
 146:	02 c0       	rjmp	.+4      	; 0x14c <pinMode+0x2c>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	0a 94       	dec	r0
 14e:	e2 f7       	brpl	.-8      	; 0x148 <pinMode+0x28>
	GPIO_Port_Typedef port = pins[arduinoPin].port;
	GPIO_Pin_Typedef pin = pins[arduinoPin].pin;
	
	gpiox = getPortBase(port);
	if(NULL != gpiox){
		gpiox->DDRx &= ~(GPIO_DDRx_Output << pin);
 150:	21 e0       	ldi	r18, 0x01	; 1
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	a9 01       	movw	r20, r18
 156:	02 c0       	rjmp	.+4      	; 0x15c <pinMode+0x3c>
 158:	44 0f       	add	r20, r20
 15a:	55 1f       	adc	r21, r21
 15c:	ca 95       	dec	r28
 15e:	e2 f7       	brpl	.-8      	; 0x158 <pinMode+0x38>
 160:	ea 01       	movw	r28, r20
 162:	c0 95       	com	r28
 164:	91 81       	ldd	r25, Z+1	; 0x01
 166:	c9 23       	and	r28, r25
		gpiox->DDRx |= direction << pin;
 168:	8c 2b       	or	r24, r28
 16a:	81 83       	std	Z+1, r24	; 0x01
	} else {
		// Do nothing
	}
	
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <digitalWrite>:

void digitalWrite(uint8_t arduinoPin, IOValue_Typedef value){
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	c6 2f       	mov	r28, r22
	GPIO_Typedef *gpiox = NULL;
	GPIO_Port_Typedef port = pins[arduinoPin].port;
 178:	e8 2f       	mov	r30, r24
 17a:	f0 e0       	ldi	r31, 0x00	; 0
	GPIO_Pin_Typedef pin = pins[arduinoPin].pin;
 17c:	ee 0f       	add	r30, r30
 17e:	ff 1f       	adc	r31, r31
 180:	e0 50       	subi	r30, 0x00	; 0
 182:	ff 4f       	sbci	r31, 0xFF	; 255
 184:	d1 81       	ldd	r29, Z+1	; 0x01
	
	gpiox = getPortBase(port);
 186:	80 81       	ld	r24, Z
 188:	0e 94 7a 00 	call	0xf4	; 0xf4 <getPortBase>
 18c:	fc 01       	movw	r30, r24
	if(NULL != gpiox){
 18e:	00 97       	sbiw	r24, 0x00	; 0
 190:	c1 f0       	breq	.+48     	; 0x1c2 <digitalWrite+0x50>
		if(HIGH == value){
 192:	c1 30       	cpi	r28, 0x01	; 1
 194:	59 f4       	brne	.+22     	; 0x1ac <digitalWrite+0x3a>
			gpiox->PORTx |= HIGH << pin;
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <digitalWrite+0x2e>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	da 95       	dec	r29
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <digitalWrite+0x2a>
 1a4:	d2 81       	ldd	r29, Z+2	; 0x02
 1a6:	8d 2b       	or	r24, r29
 1a8:	82 83       	std	Z+2, r24	; 0x02
 1aa:	0b c0       	rjmp	.+22     	; 0x1c2 <digitalWrite+0x50>
		} else {
			gpiox->PORTx &= ~(HIGH << pin);
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <digitalWrite+0x44>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	da 95       	dec	r29
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <digitalWrite+0x40>
 1ba:	80 95       	com	r24
 1bc:	d2 81       	ldd	r29, Z+2	; 0x02
 1be:	8d 23       	and	r24, r29
 1c0:	82 83       	std	Z+2, r24	; 0x02
		
	} else {
		// Do nothing
	}		
	
}
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	08 95       	ret

000001c8 <initSPI>:
};

/*******************************************************************************
 * 6. Function Definitions
 ******************************************************************************/
void initSPI(SPI_Config_Typedef *config){
 1c8:	fc 01       	movw	r30, r24
	// Select data transmission order
	SPCR &= ~(1 << DORD);
 1ca:	8c b5       	in	r24, 0x2c	; 44
 1cc:	8f 7d       	andi	r24, 0xDF	; 223
 1ce:	8c bd       	out	0x2c, r24	; 44
	SPCR |= config->dataTxOrder << DORD;
 1d0:	9c b5       	in	r25, 0x2c	; 44
 1d2:	80 81       	ld	r24, Z
 1d4:	82 95       	swap	r24
 1d6:	88 0f       	add	r24, r24
 1d8:	80 7e       	andi	r24, 0xE0	; 224
 1da:	89 2b       	or	r24, r25
 1dc:	8c bd       	out	0x2c, r24	; 44
	// Select mode: Master or Slave
	SPCR &= ~(1 << MSTR);
 1de:	8c b5       	in	r24, 0x2c	; 44
 1e0:	8f 7e       	andi	r24, 0xEF	; 239
 1e2:	8c bd       	out	0x2c, r24	; 44
	SPCR |= config->masterSlaveMode << MSTR;
 1e4:	9c b5       	in	r25, 0x2c	; 44
 1e6:	81 81       	ldd	r24, Z+1	; 0x01
 1e8:	82 95       	swap	r24
 1ea:	80 7f       	andi	r24, 0xF0	; 240
 1ec:	89 2b       	or	r24, r25
 1ee:	8c bd       	out	0x2c, r24	; 44
	// Select clock polarity
	SPCR &= ~(1 << CPOL);
 1f0:	8c b5       	in	r24, 0x2c	; 44
 1f2:	87 7f       	andi	r24, 0xF7	; 247
 1f4:	8c bd       	out	0x2c, r24	; 44
	SPCR |= config->clockPolarity << CPOL;
 1f6:	9c b5       	in	r25, 0x2c	; 44
 1f8:	82 81       	ldd	r24, Z+2	; 0x02
 1fa:	88 0f       	add	r24, r24
 1fc:	88 0f       	add	r24, r24
 1fe:	88 0f       	add	r24, r24
 200:	89 2b       	or	r24, r25
 202:	8c bd       	out	0x2c, r24	; 44
	// Select clock phase
	SPCR &= ~(1 << CPHA);
 204:	8c b5       	in	r24, 0x2c	; 44
 206:	8b 7f       	andi	r24, 0xFB	; 251
 208:	8c bd       	out	0x2c, r24	; 44
	SPCR |= config->clockPhase << CPHA;
 20a:	9c b5       	in	r25, 0x2c	; 44
 20c:	83 81       	ldd	r24, Z+3	; 0x03
 20e:	88 0f       	add	r24, r24
 210:	88 0f       	add	r24, r24
 212:	89 2b       	or	r24, r25
 214:	8c bd       	out	0x2c, r24	; 44
	// Select clock frequency
	SPCR &= ~(3 << SPR0);	/* 2-bit mask */
 216:	8c b5       	in	r24, 0x2c	; 44
 218:	8c 7f       	andi	r24, 0xFC	; 252
 21a:	8c bd       	out	0x2c, r24	; 44
	SPSR &= ~(1 << SPI2X);
 21c:	8d b5       	in	r24, 0x2d	; 45
 21e:	8e 7f       	andi	r24, 0xFE	; 254
 220:	8d bd       	out	0x2d, r24	; 45
	SPCR |= (clkFreqConfig[config->clockFrequency].SPR1_value | 
 222:	6c b5       	in	r22, 0x2c	; 44
 224:	84 81       	ldd	r24, Z+4	; 0x04
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	48 e2       	ldi	r20, 0x28	; 40
 22a:	51 e0       	ldi	r21, 0x01	; 1
 22c:	9c 01       	movw	r18, r24
 22e:	22 0f       	add	r18, r18
 230:	33 1f       	adc	r19, r19
 232:	82 0f       	add	r24, r18
 234:	93 1f       	adc	r25, r19
 236:	da 01       	movw	r26, r20
 238:	a8 0f       	add	r26, r24
 23a:	b9 1f       	adc	r27, r25
 23c:	11 96       	adiw	r26, 0x01	; 1
 23e:	8c 91       	ld	r24, X
 240:	11 97       	sbiw	r26, 0x01	; 1
 242:	86 2b       	or	r24, r22
 244:	12 96       	adiw	r26, 0x02	; 2
 246:	9c 91       	ld	r25, X
 248:	12 97       	sbiw	r26, 0x02	; 2
 24a:	89 2b       	or	r24, r25
 24c:	8c bd       	out	0x2c, r24	; 44
		clkFreqConfig[config->clockFrequency].SPR0_value) << SPR0;
	SPSR |= clkFreqConfig[config->clockFrequency].SPI2X_value << SPI2X;
 24e:	6d b5       	in	r22, 0x2d	; 45
 250:	84 81       	ldd	r24, Z+4	; 0x04
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	9c 01       	movw	r18, r24
 256:	22 0f       	add	r18, r18
 258:	33 1f       	adc	r19, r19
 25a:	82 0f       	add	r24, r18
 25c:	93 1f       	adc	r25, r19
 25e:	48 0f       	add	r20, r24
 260:	59 1f       	adc	r21, r25
 262:	fa 01       	movw	r30, r20
 264:	80 81       	ld	r24, Z
 266:	86 2b       	or	r24, r22
 268:	8d bd       	out	0x2d, r24	; 45
}
 26a:	08 95       	ret

0000026c <commandSPI>:

void commandSPI(Command_Typedef cmd){
	if(ENABLE == cmd){
 26c:	81 30       	cpi	r24, 0x01	; 1
 26e:	21 f4       	brne	.+8      	; 0x278 <commandSPI+0xc>
		SPCR |= 1 << SPE;
 270:	8c b5       	in	r24, 0x2c	; 44
 272:	80 64       	ori	r24, 0x40	; 64
 274:	8c bd       	out	0x2c, r24	; 44
 276:	08 95       	ret
	} else {
		SPCR &= ~(1 << SPE);
 278:	8c b5       	in	r24, 0x2c	; 44
 27a:	8f 7b       	andi	r24, 0xBF	; 191
 27c:	8c bd       	out	0x2c, r24	; 44
 27e:	08 95       	ret

00000280 <masterTransmit>:
	}
}

void masterTransmit(uint8_t data) {
	SPDR = data;
 280:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
 282:	0d b4       	in	r0, 0x2d	; 45
 284:	07 fe       	sbrs	r0, 7
 286:	fd cf       	rjmp	.-6      	; 0x282 <masterTransmit+0x2>
}
 288:	08 95       	ret

0000028a <initUSART>:


/*******************************************************************************
 * 6. Function Definitions
 ******************************************************************************/
void initUSART(USART_Config_Typedef *config){
 28a:	dc 01       	movw	r26, r24
	/* Declare 2 local variables since data frame size configuring bits 
	   are located in 2 registers.*/
	uint8_t UCSZn2 = (config->dataFrame) & 0x04;
 28c:	13 96       	adiw	r26, 0x03	; 3
 28e:	8c 91       	ld	r24, X
 290:	13 97       	sbiw	r26, 0x03	; 3
 292:	98 2f       	mov	r25, r24
 294:	94 70       	andi	r25, 0x04	; 4
	uint8_t UCSZn1To0 = (config->dataFrame) & 0x03;;
 296:	83 70       	andi	r24, 0x03	; 3
	
	// Select sync or async USART
	UCSR0C &= ~(config->mode << 6);
 298:	e2 ec       	ldi	r30, 0xC2	; 194
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	30 81       	ld	r19, Z
 29e:	2c 91       	ld	r18, X
 2a0:	22 95       	swap	r18
 2a2:	22 0f       	add	r18, r18
 2a4:	22 0f       	add	r18, r18
 2a6:	20 7c       	andi	r18, 0xC0	; 192
 2a8:	20 95       	com	r18
 2aa:	23 23       	and	r18, r19
 2ac:	20 83       	st	Z, r18
	UCSR0C |= config->mode << 6;
 2ae:	30 81       	ld	r19, Z
 2b0:	2c 91       	ld	r18, X
 2b2:	22 95       	swap	r18
 2b4:	22 0f       	add	r18, r18
 2b6:	22 0f       	add	r18, r18
 2b8:	20 7c       	andi	r18, 0xC0	; 192
 2ba:	23 2b       	or	r18, r19
 2bc:	20 83       	st	Z, r18
	// Select parity mode
	UCSR0C &= ~(config->parity << 4);
 2be:	30 81       	ld	r19, Z
 2c0:	11 96       	adiw	r26, 0x01	; 1
 2c2:	2c 91       	ld	r18, X
 2c4:	11 97       	sbiw	r26, 0x01	; 1
 2c6:	22 95       	swap	r18
 2c8:	20 7f       	andi	r18, 0xF0	; 240
 2ca:	20 95       	com	r18
 2cc:	23 23       	and	r18, r19
 2ce:	20 83       	st	Z, r18
	UCSR0C |= config->parity << 4;
 2d0:	30 81       	ld	r19, Z
 2d2:	11 96       	adiw	r26, 0x01	; 1
 2d4:	2c 91       	ld	r18, X
 2d6:	11 97       	sbiw	r26, 0x01	; 1
 2d8:	22 95       	swap	r18
 2da:	20 7f       	andi	r18, 0xF0	; 240
 2dc:	23 2b       	or	r18, r19
 2de:	20 83       	st	Z, r18
	// Select number of stop bit
	UCSR0C &= ~(config->stopBit << 3);
 2e0:	30 81       	ld	r19, Z
 2e2:	12 96       	adiw	r26, 0x02	; 2
 2e4:	2c 91       	ld	r18, X
 2e6:	12 97       	sbiw	r26, 0x02	; 2
 2e8:	22 0f       	add	r18, r18
 2ea:	22 0f       	add	r18, r18
 2ec:	22 0f       	add	r18, r18
 2ee:	20 95       	com	r18
 2f0:	23 23       	and	r18, r19
 2f2:	20 83       	st	Z, r18
	UCSR0C |= config->stopBit << 3;
 2f4:	30 81       	ld	r19, Z
 2f6:	12 96       	adiw	r26, 0x02	; 2
 2f8:	2c 91       	ld	r18, X
 2fa:	22 0f       	add	r18, r18
 2fc:	22 0f       	add	r18, r18
 2fe:	22 0f       	add	r18, r18
 300:	23 2b       	or	r18, r19
 302:	20 83       	st	Z, r18
	// Select data frame size
	UCSR0B &= ~(UCSZn2 << 2);
 304:	a1 ec       	ldi	r26, 0xC1	; 193
 306:	b0 e0       	ldi	r27, 0x00	; 0
 308:	3c 91       	ld	r19, X
 30a:	29 2f       	mov	r18, r25
 30c:	22 0f       	add	r18, r18
 30e:	22 0f       	add	r18, r18
 310:	20 95       	com	r18
 312:	23 23       	and	r18, r19
 314:	2c 93       	st	X, r18
	UCSR0B |= UCSZn2 << 2;
 316:	2c 91       	ld	r18, X
 318:	99 0f       	add	r25, r25
 31a:	99 0f       	add	r25, r25
 31c:	92 2b       	or	r25, r18
 31e:	9c 93       	st	X, r25
	UCSR0C &= ~(UCSZn1To0 << 1);
 320:	20 81       	ld	r18, Z
 322:	98 2f       	mov	r25, r24
 324:	99 0f       	add	r25, r25
 326:	90 95       	com	r25
 328:	92 23       	and	r25, r18
 32a:	90 83       	st	Z, r25
	UCSR0C |= UCSZn1To0 << 1;
 32c:	90 81       	ld	r25, Z
 32e:	88 0f       	add	r24, r24
 330:	89 2b       	or	r24, r25
 332:	80 83       	st	Z, r24
}
 334:	08 95       	ret

00000336 <setBaudrate>:


void setBaudrate(USART_Baudrate_Typedef baudrate){
	uint16_t UBRRnValue;
	uint8_t isDoubleSpeed = UCSR0A & (1 << U2X0);
 336:	20 91 c0 00 	lds	r18, 0x00C0
	
	if(0 == isDoubleSpeed){
 33a:	21 fd       	sbrc	r18, 1
 33c:	1d c0       	rjmp	.+58     	; 0x378 <setBaudrate+0x42>
		UBRRnValue = FOSC/(baudrate*16) - 1;
 33e:	dc 01       	movw	r26, r24
 340:	cb 01       	movw	r24, r22
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	aa 1f       	adc	r26, r26
 348:	bb 1f       	adc	r27, r27
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	aa 1f       	adc	r26, r26
 350:	bb 1f       	adc	r27, r27
 352:	9c 01       	movw	r18, r24
 354:	ad 01       	movw	r20, r26
 356:	22 0f       	add	r18, r18
 358:	33 1f       	adc	r19, r19
 35a:	44 1f       	adc	r20, r20
 35c:	55 1f       	adc	r21, r21
 35e:	22 0f       	add	r18, r18
 360:	33 1f       	adc	r19, r19
 362:	44 1f       	adc	r20, r20
 364:	55 1f       	adc	r21, r21
 366:	60 e0       	ldi	r22, 0x00	; 0
 368:	74 e2       	ldi	r23, 0x24	; 36
 36a:	84 ef       	ldi	r24, 0xF4	; 244
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	0e 94 76 02 	call	0x4ec	; 0x4ec <__udivmodsi4>
 372:	21 50       	subi	r18, 0x01	; 1
 374:	30 40       	sbci	r19, 0x00	; 0
 376:	18 c0       	rjmp	.+48     	; 0x3a8 <setBaudrate+0x72>
	} else {
		UBRRnValue = FOSC/(baudrate*8) - 1;
 378:	dc 01       	movw	r26, r24
 37a:	cb 01       	movw	r24, r22
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	aa 1f       	adc	r26, r26
 382:	bb 1f       	adc	r27, r27
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	aa 1f       	adc	r26, r26
 38a:	bb 1f       	adc	r27, r27
 38c:	9c 01       	movw	r18, r24
 38e:	ad 01       	movw	r20, r26
 390:	22 0f       	add	r18, r18
 392:	33 1f       	adc	r19, r19
 394:	44 1f       	adc	r20, r20
 396:	55 1f       	adc	r21, r21
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	74 e2       	ldi	r23, 0x24	; 36
 39c:	84 ef       	ldi	r24, 0xF4	; 244
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e 94 76 02 	call	0x4ec	; 0x4ec <__udivmodsi4>
 3a4:	21 50       	subi	r18, 0x01	; 1
 3a6:	30 40       	sbci	r19, 0x00	; 0
	}
	
	/* Set baudrate. Since baurate value range from 0..0x0FFF, the UBRRnL and UBRRnH are compared with 
	0x00FF and 0x0F00 respectively. */
	UBRR0L = (UBRRnValue & 0x00FF);
 3a8:	20 93 c4 00 	sts	0x00C4, r18
	UBRR0H = (UBRRnValue & 0x0F00);
 3ac:	10 92 c5 00 	sts	0x00C5, r1
}
 3b0:	08 95       	ret

000003b2 <commandTransmitter>:

void commandTransmitter(Command_Typedef cmd){
	if(ENABLE == cmd){
 3b2:	81 30       	cpi	r24, 0x01	; 1
 3b4:	31 f4       	brne	.+12     	; 0x3c2 <commandTransmitter+0x10>
		UCSR0B |= 1 << TXEN0;
 3b6:	e1 ec       	ldi	r30, 0xC1	; 193
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	80 81       	ld	r24, Z
 3bc:	88 60       	ori	r24, 0x08	; 8
 3be:	80 83       	st	Z, r24
 3c0:	08 95       	ret
	} else {
		UCSR0B &= ~(1 << TXEN0);
 3c2:	e1 ec       	ldi	r30, 0xC1	; 193
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	80 81       	ld	r24, Z
 3c8:	87 7f       	andi	r24, 0xF7	; 247
 3ca:	80 83       	st	Z, r24
 3cc:	08 95       	ret

000003ce <commandReceiver>:
	}
}

void commandReceiver(Command_Typedef cmd){
	if(ENABLE == cmd){
 3ce:	81 30       	cpi	r24, 0x01	; 1
 3d0:	31 f4       	brne	.+12     	; 0x3de <commandReceiver+0x10>
		UCSR0B |= 1 << RXEN0;
 3d2:	e1 ec       	ldi	r30, 0xC1	; 193
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	80 81       	ld	r24, Z
 3d8:	80 61       	ori	r24, 0x10	; 16
 3da:	80 83       	st	Z, r24
 3dc:	08 95       	ret
	} else {
		UCSR0B &= ~(1 << RXEN0);
 3de:	e1 ec       	ldi	r30, 0xC1	; 193
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	80 81       	ld	r24, Z
 3e4:	8f 7e       	andi	r24, 0xEF	; 239
 3e6:	80 83       	st	Z, r24
 3e8:	08 95       	ret

000003ea <sendChar>:
	}
}

void sendChar(uint8_t data){
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1 << UDRE0)));
 3ea:	e0 ec       	ldi	r30, 0xC0	; 192
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	90 81       	ld	r25, Z
 3f0:	95 ff       	sbrs	r25, 5
 3f2:	fd cf       	rjmp	.-6      	; 0x3ee <sendChar+0x4>
	/* Put data into buffer to send the data */
	UDR0 = data;
 3f4:	80 93 c6 00 	sts	0x00C6, r24
}
 3f8:	08 95       	ret

000003fa <sendString>:

void sendString(uint8_t *str){
 3fa:	cf 93       	push	r28
 3fc:	df 93       	push	r29
 3fe:	ec 01       	movw	r28, r24
	while(NULL != *str){
 400:	88 81       	ld	r24, Y
 402:	88 23       	and	r24, r24
 404:	31 f0       	breq	.+12     	; 0x412 <sendString+0x18>
	while (!(UCSR0A & (1 << UDRE0)));
	/* Put data into buffer to send the data */
	UDR0 = data;
}

void sendString(uint8_t *str){
 406:	21 96       	adiw	r28, 0x01	; 1
	while(NULL != *str){
		sendChar(*str);
 408:	0e 94 f5 01 	call	0x3ea	; 0x3ea <sendChar>
	/* Put data into buffer to send the data */
	UDR0 = data;
}

void sendString(uint8_t *str){
	while(NULL != *str){
 40c:	89 91       	ld	r24, Y+
 40e:	88 23       	and	r24, r24
 410:	d9 f7       	brne	.-10     	; 0x408 <sendString+0xe>
		sendChar(*str);
		str++;
	}
}
 412:	df 91       	pop	r29
 414:	cf 91       	pop	r28
 416:	08 95       	ret

00000418 <receiveChar>:

uint8_t receiveChar(void){
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)));
 418:	e0 ec       	ldi	r30, 0xC0	; 192
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	80 81       	ld	r24, Z
 41e:	88 23       	and	r24, r24
 420:	ec f7       	brge	.-6      	; 0x41c <receiveChar+0x4>
	/* Get and return received data from buffer */
	return UDR0;
 422:	80 91 c6 00 	lds	r24, 0x00C6
}
 426:	08 95       	ret

00000428 <receiveString>:

uint8_t* receiveString(void){
 428:	0f 93       	push	r16
 42a:	1f 93       	push	r17
 42c:	cf 93       	push	r28
	static uint8_t *str;//TODO str[RECEIVED_STRING_LENGTH];
	uint8_t data, i = 0;
 42e:	c0 e0       	ldi	r28, 0x00	; 0

	do {
		data = receiveChar();
		str[i++] = data;		
 430:	00 91 98 02 	lds	r16, 0x0298
 434:	10 91 99 02 	lds	r17, 0x0299
uint8_t* receiveString(void){
	static uint8_t *str;//TODO str[RECEIVED_STRING_LENGTH];
	uint8_t data, i = 0;

	do {
		data = receiveChar();
 438:	0e 94 0c 02 	call	0x418	; 0x418 <receiveChar>
		str[i++] = data;		
 43c:	91 2f       	mov	r25, r17
 43e:	f8 01       	movw	r30, r16
 440:	ec 0f       	add	r30, r28
 442:	f1 1d       	adc	r31, r1
 444:	80 83       	st	Z, r24
 446:	cf 5f       	subi	r28, 0xFF	; 255
	} while('\n' != data);
 448:	8a 30       	cpi	r24, 0x0A	; 10
 44a:	b1 f7       	brne	.-20     	; 0x438 <receiveString+0x10>
	
	return str;
}
 44c:	80 2f       	mov	r24, r16
 44e:	cf 91       	pop	r28
 450:	1f 91       	pop	r17
 452:	0f 91       	pop	r16
 454:	08 95       	ret

00000456 <write_Max7219_byte>:
};

/*******************************************************************************
 * 6. Function Definitions
 ******************************************************************************/
void write_Max7219_byte(uint8_t data) {
 456:	cf 93       	push	r28
 458:	df 93       	push	r29
 45a:	d8 2f       	mov	r29, r24
	uint8_t i;
	digitalWrite(CS_PIN, LOW);
 45c:	8a e0       	ldi	r24, 0x0A	; 10
 45e:	60 e0       	ldi	r22, 0x00	; 0
 460:	0e 94 b9 00 	call	0x172	; 0x172 <digitalWrite>
 464:	c8 e0       	ldi	r28, 0x08	; 8
	for(i = 8; i >= 1; i--) {
		digitalWrite(CLK_PIN, LOW);
 466:	8d e0       	ldi	r24, 0x0D	; 13
 468:	60 e0       	ldi	r22, 0x00	; 0
 46a:	0e 94 b9 00 	call	0x172	; 0x172 <digitalWrite>

		if(data & 0x80) { // TODO:Extracting a bit data
 46e:	dd 23       	and	r29, r29
 470:	2c f4       	brge	.+10     	; 0x47c <write_Max7219_byte+0x26>
			digitalWrite(MOSI_PIN, HIGH);
 472:	8b e0       	ldi	r24, 0x0B	; 11
 474:	61 e0       	ldi	r22, 0x01	; 1
 476:	0e 94 b9 00 	call	0x172	; 0x172 <digitalWrite>
 47a:	04 c0       	rjmp	.+8      	; 0x484 <write_Max7219_byte+0x2e>
		} else {
			digitalWrite(MOSI_PIN, LOW);
 47c:	8b e0       	ldi	r24, 0x0B	; 11
 47e:	60 e0       	ldi	r22, 0x00	; 0
 480:	0e 94 b9 00 	call	0x172	; 0x172 <digitalWrite>
		}

	data = data << 1;
 484:	dd 0f       	add	r29, r29
	digitalWrite(CLK_PIN, HIGH);
 486:	8d e0       	ldi	r24, 0x0D	; 13
 488:	61 e0       	ldi	r22, 0x01	; 1
 48a:	0e 94 b9 00 	call	0x172	; 0x172 <digitalWrite>
 48e:	c1 50       	subi	r28, 0x01	; 1
 * 6. Function Definitions
 ******************************************************************************/
void write_Max7219_byte(uint8_t data) {
	uint8_t i;
	digitalWrite(CS_PIN, LOW);
	for(i = 8; i >= 1; i--) {
 490:	51 f7       	brne	.-44     	; 0x466 <write_Max7219_byte+0x10>
		}

	data = data << 1;
	digitalWrite(CLK_PIN, HIGH);
	}
}
 492:	df 91       	pop	r29
 494:	cf 91       	pop	r28
 496:	08 95       	ret

00000498 <write_Max7219>:

void write_Max7219(uint8_t address, uint8_t data) {
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	d8 2f       	mov	r29, r24
 49e:	c6 2f       	mov	r28, r22
	digitalWrite(CS_PIN, LOW);
 4a0:	8a e0       	ldi	r24, 0x0A	; 10
 4a2:	60 e0       	ldi	r22, 0x00	; 0
 4a4:	0e 94 b9 00 	call	0x172	; 0x172 <digitalWrite>
	write_Max7219_byte(address);
 4a8:	8d 2f       	mov	r24, r29
 4aa:	0e 94 2b 02 	call	0x456	; 0x456 <write_Max7219_byte>
	write_Max7219_byte(data); 
 4ae:	8c 2f       	mov	r24, r28
 4b0:	0e 94 2b 02 	call	0x456	; 0x456 <write_Max7219_byte>
	digitalWrite(CS_PIN, HIGH);
 4b4:	8a e0       	ldi	r24, 0x0A	; 10
 4b6:	61 e0       	ldi	r22, 0x01	; 1
 4b8:	0e 94 b9 00 	call	0x172	; 0x172 <digitalWrite>
}
 4bc:	df 91       	pop	r29
 4be:	cf 91       	pop	r28
 4c0:	08 95       	ret

000004c2 <init_Max7219>:

void init_Max7219(void) {
	write_Max7219(0x09, 0x00);       //decoding :BCD
 4c2:	89 e0       	ldi	r24, 0x09	; 9
 4c4:	60 e0       	ldi	r22, 0x00	; 0
 4c6:	0e 94 4c 02 	call	0x498	; 0x498 <write_Max7219>
	write_Max7219(0x0a, 0x03);       //brightness
 4ca:	8a e0       	ldi	r24, 0x0A	; 10
 4cc:	63 e0       	ldi	r22, 0x03	; 3
 4ce:	0e 94 4c 02 	call	0x498	; 0x498 <write_Max7219>
	write_Max7219(0x0b, 0x07);       //scanlimit;8 LEDs
 4d2:	8b e0       	ldi	r24, 0x0B	; 11
 4d4:	67 e0       	ldi	r22, 0x07	; 7
 4d6:	0e 94 4c 02 	call	0x498	; 0x498 <write_Max7219>
	write_Max7219(0x0c, 0x01);       //power-down mode:0,normal mode:1
 4da:	8c e0       	ldi	r24, 0x0C	; 12
 4dc:	61 e0       	ldi	r22, 0x01	; 1
 4de:	0e 94 4c 02 	call	0x498	; 0x498 <write_Max7219>
	write_Max7219(0x0f, 0x00);       //test display:1;EOT,display:0
 4e2:	8f e0       	ldi	r24, 0x0F	; 15
 4e4:	60 e0       	ldi	r22, 0x00	; 0
 4e6:	0e 94 4c 02 	call	0x498	; 0x498 <write_Max7219>
}
 4ea:	08 95       	ret

000004ec <__udivmodsi4>:
 4ec:	a1 e2       	ldi	r26, 0x21	; 33
 4ee:	1a 2e       	mov	r1, r26
 4f0:	aa 1b       	sub	r26, r26
 4f2:	bb 1b       	sub	r27, r27
 4f4:	fd 01       	movw	r30, r26
 4f6:	0d c0       	rjmp	.+26     	; 0x512 <__udivmodsi4_ep>

000004f8 <__udivmodsi4_loop>:
 4f8:	aa 1f       	adc	r26, r26
 4fa:	bb 1f       	adc	r27, r27
 4fc:	ee 1f       	adc	r30, r30
 4fe:	ff 1f       	adc	r31, r31
 500:	a2 17       	cp	r26, r18
 502:	b3 07       	cpc	r27, r19
 504:	e4 07       	cpc	r30, r20
 506:	f5 07       	cpc	r31, r21
 508:	20 f0       	brcs	.+8      	; 0x512 <__udivmodsi4_ep>
 50a:	a2 1b       	sub	r26, r18
 50c:	b3 0b       	sbc	r27, r19
 50e:	e4 0b       	sbc	r30, r20
 510:	f5 0b       	sbc	r31, r21

00000512 <__udivmodsi4_ep>:
 512:	66 1f       	adc	r22, r22
 514:	77 1f       	adc	r23, r23
 516:	88 1f       	adc	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	1a 94       	dec	r1
 51c:	69 f7       	brne	.-38     	; 0x4f8 <__udivmodsi4_loop>
 51e:	60 95       	com	r22
 520:	70 95       	com	r23
 522:	80 95       	com	r24
 524:	90 95       	com	r25
 526:	9b 01       	movw	r18, r22
 528:	ac 01       	movw	r20, r24
 52a:	bd 01       	movw	r22, r26
 52c:	cf 01       	movw	r24, r30
 52e:	08 95       	ret

00000530 <_exit>:
 530:	f8 94       	cli

00000532 <__stop_program>:
 532:	ff cf       	rjmp	.-2      	; 0x532 <__stop_program>
